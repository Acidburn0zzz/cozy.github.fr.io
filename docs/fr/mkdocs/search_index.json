{
    "docs": [
        {
            "location": "/index_fr/", 
            "text": "Documentation Cozy\nTout ce qu\nil faut savoir pour utiliser et configurer Cozy\n\n\n\n    \n\n      \n\n      \nD\u00e9couverte de votre nouveau domicile num\u00e9rique\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nSynchronisez toutes vos donn\u00e9es\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nInstallez votre propre serveur\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nD\u00e9veloppez\u00a0!\n\n      Apprenez \u00e0 d\u00e9velopper des applications et des connecteurs.\n    \n\n  \n\n\n\n\nRestons en contact\nSi vous avez des questions, 3 options s\noffrent \u00e0 vous\u00a0:\n\n\nwrite an email to our Support team: contact at cozy.io\npost on the forum\nchat with us on IRC", 
            "title": "Accueil"
        }, 
        {
            "location": "/index_fr/#documentation-cozy", 
            "text": "Tout ce qu il faut savoir pour utiliser et configurer Cozy  \n     \n       \n       D\u00e9couverte de votre nouveau domicile num\u00e9rique \n     \n    \n     \n       \n       Synchronisez toutes vos donn\u00e9es \n     \n    \n     \n       \n       Installez votre propre serveur \n     \n    \n     \n       \n       D\u00e9veloppez\u00a0! \n      Apprenez \u00e0 d\u00e9velopper des applications et des connecteurs.", 
            "title": "Documentation Cozy"
        }, 
        {
            "location": "/index_fr/#restons-en-contact", 
            "text": "Si vous avez des questions, 3 options s offrent \u00e0 vous\u00a0:  write an email to our Support team: contact at cozy.io post on the forum chat with us on IRC", 
            "title": "Restons en contact"
        }, 
        {
            "location": "/use/index_fr/", 
            "text": "Bienvenue chez vous\u00a0!\nVoil\u00e0 c\u2019est parti, votre Cozy est sur le point de changer votre vie quotidienne ! Pour y parvenir et afin de vous faciliter au mieux cette installation, nous avons imagin\u00e9 pour vous un mini-guide avec tous les indispensables pour d\u00e9marrer votre Cozy.\nClaude, notre expert de l\u2019\u00e9quipe Support qui connait Cozy comme sa maison, est l\u2019auteur de cette documentation et vous livrera ses astuces.\nPr\u00eat (e) \u00e0 adopter Cozy\u00a0? Nous vous accompagnons dans vos premiers pas\u00a0!\nIntroduction\nNotre charte d\u2019engagement\u00a0: vous redonner vos donn\u00e9es personnelles dans un endroit s\u00fbr et accessible par vous seul est notre priorit\u00e9\nComment vos donn\u00e9es personnelles sont-elles prot\u00e9g\u00e9es\u00a0?\nDans votre cloud personnel, vous \u00eates chez vous\nVous \u00eates la seule personne \u00e0 avoir acc\u00e8s \u00e0 vos donn\u00e9es, lesquelles ne sont partag\u00e9es avec aucun prestataire, sauf accord explicite et pr\u00e9alable de votre part donn\u00e9 au prestataire concern\u00e9.\nVos donn\u00e9es vous appartiennent et nous n\u2019y toucherons pas\nVos photos, vos donn\u00e9es bancaires ou l\u2019historique de votre poids, vous seul choisissez les donn\u00e9es que vous souhaitez r\u00e9cup\u00e9rer aupr\u00e8s des tiers qui aujourd\u2019hui les d\u00e9tiennent. Vous \u00eates l\u2019unique propri\u00e9taire des donn\u00e9es de votre service Cozy et des sauvegardes que Cozy Cloud r\u00e9alise automatiquement. Toute utilisation de vos donn\u00e9es par un tiers suppose votre accord explicite et pr\u00e9alable.\nVous \u00eates libre de supprimer, modifier, copier, partager vos donn\u00e9es gr\u00e2ce au service Cozy, et ce aussi longtemps que vous \u00eates utilisateur du service.\nNous ne regardons pas vos donn\u00e9es personnelles comme nous ne vous espionnons pas quand vous prenez votre douche.\nNous garantissons la transparence de notre plateforme.\nCozy est et restera un service reposant sur un logiciel libre : vous pouvez utiliser, copier, modifier (et am\u00e9liorer !) le code source. Le choix de l\u2019approche logiciel libre garantit la transparence du service Cozy, qui est auditable en toute circonstance, conform\u00e9ment \u00e0 la licence libre du logiciel utilis\u00e9 par Cozy Cloud.\nVous d\u00e9cidez de l\u2019utilisation de vos donn\u00e9es\nLa plateforme Cozy est con\u00e7ue pour vous permettre de contr\u00f4ler les donn\u00e9es sortantes de votre Cozy. Ce contr\u00f4le des applications tierces est partag\u00e9 par les utilisateurs de la communaut\u00e9 des Cozynautes, et Cozy Cloud s\u2019engage \u00e0 faciliter pour tous les utilisateurs de Cozy le signalement d\u2019applications malicieuses. Notre objectif : ce qui est dans votre Cozy reste dans votre Cozy.\nBien d\u00e9marrer avec Cozy\nCr\u00e9ez votre adresse Cozy\nAvant d\u2019arriver \u00e0 la maison, vous devez rentrer votre adresse dans un GPS ou la connaitre par c\u0153ur. C\u2019est exactement la m\u00eame chose pour votre Cozy mais sans la boussole\u00a0!\nL\u2019adresse de votre Cozy, c\u2019est la v\u00f4tre et \u00e0 la diff\u00e9rence de votre maison, elle ne figure pas dans les pages blanches visibles par tous.\nVous manquez d\u2019imagination pour la cr\u00e9er\u00a0?\nPas de panique\u00a0! Nous vous avons pr\u00e9par\u00e9 quelques exemples pour vous aider \u2013 attention, il ne suffit pas de les recopier mais bien d\u2019imaginer votre adresse personnalis\u00e9e\u00a0:\nisabelledurand73.mycozy.cloud\nbernardlhermite.mycozy.cloud\nzazadurand.mycozy.cloud\n\n\n\n\n\n\nL\u2019astuce de Claude\nAjoutez votre adresse Cozy \u00e0 vos favoris pour y acc\u00e9der en un seul clic\n\n\n\nCr\u00e9er votre mot de passe\n\n\nL\u2019astuce de Claude\nPour cr\u00e9er un mot de passe complexe mais facile \u00e0 retenir, imaginez une phrase absurde et cr\u00e9ez le mot de passe \u00e0 partir des initiales des mots et de la ponctuation. Ainsi, \u00ab\u00a0Ma\u00eetre renard, sur un nuage perch\u00e9, tenait en son bec de la pluie\u00a0\u00bb deviendra \u00ab\u00a0Mr,s1np,tesb2lp\u00a0\u00bb\n\n\nBien utiliser votre Cozy\nNous avons \u00e9labor\u00e9 une bo\u00eete \u00e0 outils pour param\u00e9trer votre Cozy et d\u00e9cupler ses capacit\u00e9s.\nSauvegardez vos fichiers et documents en un seul clic\nCozy vous permet d\u2019enregistrer tous vos fichiers (photos, vid\u00e9os, documents administratifs, factures etc.) au m\u00eame endroit et de les sauvegarder automatiquement. Ainsi, m\u00eame si votre ordinateur tombe en panne ou si vous oubliez votre t\u00e9l\u00e9phone dans le train, tous vos fichiers restent prot\u00e9g\u00e9s. Plus besoin d\u2019un disque externe pour sauvegarder vos documents\u00a0!\nAjout de fichiers \u00e0 votre Cozy sur un ordinateur Windows ou Mac\n\n\nV\u00e9rifiez que l\u2019application de bureau est install\u00e9e sur votre ordinateur. Si vous n\u2019avez pas rencontr\u00e9 de soucis en suivants nos conseils, vous devriez passer cette \u00e9tape sans difficult\u00e9s.\nFaites glisser et d\u00e9posez les fichiers souhait\u00e9s dans le dossier Cozy Drive.\nSimple comme dire bonjour n\u2019est-ce pas\u00a0? Votre Cozy garde vos fichiers bien au chaud \u00e0 l\u2019abri de tous\u00a0!\n\n\n\n\n\nSur votre Cozy depuis un navigateur\n\n\nConnectez-vous \u00e0 votre Cozy en suivant l\u2019adresse Internet que vous avez cr\u00e9\u00e9 au d\u00e9but (Par exemple\u00a0: isabelledurand.mycozy.cloud)\nOuvrez votre application Drive dans le menu Applications si ce n\u2019est pas d\u00e9j\u00e0 fait\nCliquez sur le bouton bleu Transf\u00e9rer des fichiers en haut \u00e0 droite de la fen\u00eatre.\nChoisissez le fichier \u00e0 ajouter, puis cliquez sur Ouvrir.\n\n\nAcc\u00e9dez \u00e0 vos fichiers ou que vous soyez et quand vous voulez\nEnregistrez vos photos et vos documents dans Cozy, puis consultez-les \u00e0 partir de l\u2019application Cozy sur un ordinateur, un t\u00e9l\u00e9phone ou une tablette. Tous les fichiers que vous enregistrez dans Cozy sont automatiquement synchronis\u00e9s sur l\u2019ensemble de vos appareils, et restent ainsi toujours \u00e0 port\u00e9e de main.\nPour retrouver vos fichiers sur tous vos appareils (PC, mobile et tablette) et synchroniser vos photos avec votre Cozy, t\u00e9l\u00e9chargez l\u2019application de \nCozy pour iOS\n et l\u2019\n\napplication pour Android\n.\nConnectez-vous pour enfin d\u00e9connecter\u00a0!\nCliquez sur Applications en haut \u00e0 droite de votre \u00e9cran et cliquez sur Cozy Collect, votre application regroupant les collecteurs disponibles dans votre Cozy.\n\n\n\nEn s\u00e9lectionnant les connecteurs de vos fournisseurs, vous allez automatiser la r\u00e9cup\u00e9ration de vos donn\u00e9es li\u00e9es \u00e0 vos diff\u00e9rents comptes client.\nC\u2019est tr\u00e8s simple\u00a0: s\u00e9lectionnez le fournisseur, entrez vos identifiant et mot de passe \u2013 ce sont ceux qui vous permettent de rentrer sur votre espace client. En un seul clic, votre connecteur est op\u00e9rationnel et actif.\nUn macaron vert apparaitra sur le connecteur ainsi actif.\nVous pouvez renouveler l\u2019op\u00e9ration avec autant de connecteurs que vous le souhaitez (dans la mesure ou vous avez un compte client associ\u00e9).\nAvez-vous pens\u00e9 \u00e0 tout\u00a0?\nAvez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy Drive sur votre iPhone ou votre Android\u00a0?\nSi oui, bravo\u00a0! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9\u00a0!\nSi non, voici la marche \u00e0 suivre\u00a0:\n\n\nConnectez-vous \u00e0 l\u2019adresse de notre site cozy.io\nAllez au bas de la page et cliquez sur le lien \u00ab\u00a0T\u00e9l\u00e9charger l\u2019app mobile\u00a0\u00bb\n\n\nVous \u00eates d\u00e9sormais sur la page\u00a0: \nhttps://docs.cozy.io/fr/download/\n, vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre appareil.\nO\u00f9 alors cliquez sur les ic\u00f4nes ci-dessous\u00a0:\n\n\n\nAvez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy de bureau\u00a0?\nSi oui, bravo\u00a0! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9\u00a0!\nSi ce n\u2019est pas d\u00e9j\u00e0 fait, cela vous prendra moins de deux minutes pour l\u2019installer\u00a0:\n\n\nConnectez-vous \u00e0 l\u2019adresse de notre site cozy.io\nAllez au bas de la page et cliquez sur le lien \u00ab\u00a0T\u00e9l\u00e9charger l\u2019app PC\u00bb\n\n\nVous \u00eates d\u00e9sormais sur la page\u00a0: \nhttps://docs.cozy.io/fr/download/\n, vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre PC\u00a0: \n\nMacOS\n ou \n\nMicrosoft Windows\n.\nF\u00e9licitations ! Votre Cozy n\u2019a d\u00e9sormais plus de secret pour vous.\nEncore des questions\u00a0?\nNotre \u00e9quipe support se tient \u00e0 votre disposition pour toute autre question. Visitez notre page Aide en ligne sur le site cozy.io.\nVenez \u00e9galement nous dire bonjour sur \nTwitter\n et \n\nFacebook\n.", 
            "title": "Utiliser Cozy"
        }, 
        {
            "location": "/use/index_fr/#bienvenue-chez-vous", 
            "text": "Voil\u00e0 c\u2019est parti, votre Cozy est sur le point de changer votre vie quotidienne ! Pour y parvenir et afin de vous faciliter au mieux cette installation, nous avons imagin\u00e9 pour vous un mini-guide avec tous les indispensables pour d\u00e9marrer votre Cozy. Claude, notre expert de l\u2019\u00e9quipe Support qui connait Cozy comme sa maison, est l\u2019auteur de cette documentation et vous livrera ses astuces. Pr\u00eat (e) \u00e0 adopter Cozy\u00a0? Nous vous accompagnons dans vos premiers pas\u00a0!", 
            "title": "Bienvenue chez vous\u00a0!"
        }, 
        {
            "location": "/use/index_fr/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/use/index_fr/#notre-charte-dengagement-vous-redonner-vos-donnees-personnelles-dans-un-endroit-sur-et-accessible-par-vous-seul-est-notre-priorite", 
            "text": "", 
            "title": "Notre charte d\u2019engagement\u00a0: vous redonner vos donn\u00e9es personnelles dans un endroit s\u00fbr et accessible par vous seul est notre priorit\u00e9"
        }, 
        {
            "location": "/use/index_fr/#comment-vos-donnees-personnelles-sont-elles-protegees", 
            "text": "", 
            "title": "Comment vos donn\u00e9es personnelles sont-elles prot\u00e9g\u00e9es\u00a0?"
        }, 
        {
            "location": "/use/index_fr/#dans-votre-cloud-personnel-vous-etes-chez-vous", 
            "text": "Vous \u00eates la seule personne \u00e0 avoir acc\u00e8s \u00e0 vos donn\u00e9es, lesquelles ne sont partag\u00e9es avec aucun prestataire, sauf accord explicite et pr\u00e9alable de votre part donn\u00e9 au prestataire concern\u00e9.", 
            "title": "Dans votre cloud personnel, vous \u00eates chez vous"
        }, 
        {
            "location": "/use/index_fr/#vos-donnees-vous-appartiennent-et-nous-ny-toucherons-pas", 
            "text": "Vos photos, vos donn\u00e9es bancaires ou l\u2019historique de votre poids, vous seul choisissez les donn\u00e9es que vous souhaitez r\u00e9cup\u00e9rer aupr\u00e8s des tiers qui aujourd\u2019hui les d\u00e9tiennent. Vous \u00eates l\u2019unique propri\u00e9taire des donn\u00e9es de votre service Cozy et des sauvegardes que Cozy Cloud r\u00e9alise automatiquement. Toute utilisation de vos donn\u00e9es par un tiers suppose votre accord explicite et pr\u00e9alable. Vous \u00eates libre de supprimer, modifier, copier, partager vos donn\u00e9es gr\u00e2ce au service Cozy, et ce aussi longtemps que vous \u00eates utilisateur du service. Nous ne regardons pas vos donn\u00e9es personnelles comme nous ne vous espionnons pas quand vous prenez votre douche.", 
            "title": "Vos donn\u00e9es vous appartiennent et nous n\u2019y toucherons pas"
        }, 
        {
            "location": "/use/index_fr/#nous-garantissons-la-transparence-de-notre-plateforme", 
            "text": "Cozy est et restera un service reposant sur un logiciel libre : vous pouvez utiliser, copier, modifier (et am\u00e9liorer !) le code source. Le choix de l\u2019approche logiciel libre garantit la transparence du service Cozy, qui est auditable en toute circonstance, conform\u00e9ment \u00e0 la licence libre du logiciel utilis\u00e9 par Cozy Cloud.", 
            "title": "Nous garantissons la transparence de notre plateforme."
        }, 
        {
            "location": "/use/index_fr/#vous-decidez-de-lutilisation-de-vos-donnees", 
            "text": "La plateforme Cozy est con\u00e7ue pour vous permettre de contr\u00f4ler les donn\u00e9es sortantes de votre Cozy. Ce contr\u00f4le des applications tierces est partag\u00e9 par les utilisateurs de la communaut\u00e9 des Cozynautes, et Cozy Cloud s\u2019engage \u00e0 faciliter pour tous les utilisateurs de Cozy le signalement d\u2019applications malicieuses. Notre objectif : ce qui est dans votre Cozy reste dans votre Cozy.", 
            "title": "Vous d\u00e9cidez de l\u2019utilisation de vos donn\u00e9es"
        }, 
        {
            "location": "/use/index_fr/#bien-demarrer-avec-cozy", 
            "text": "", 
            "title": "Bien d\u00e9marrer avec Cozy"
        }, 
        {
            "location": "/use/index_fr/#creez-votre-adresse-cozy", 
            "text": "Avant d\u2019arriver \u00e0 la maison, vous devez rentrer votre adresse dans un GPS ou la connaitre par c\u0153ur. C\u2019est exactement la m\u00eame chose pour votre Cozy mais sans la boussole\u00a0! L\u2019adresse de votre Cozy, c\u2019est la v\u00f4tre et \u00e0 la diff\u00e9rence de votre maison, elle ne figure pas dans les pages blanches visibles par tous. Vous manquez d\u2019imagination pour la cr\u00e9er\u00a0? Pas de panique\u00a0! Nous vous avons pr\u00e9par\u00e9 quelques exemples pour vous aider \u2013 attention, il ne suffit pas de les recopier mais bien d\u2019imaginer votre adresse personnalis\u00e9e\u00a0: isabelledurand73.mycozy.cloud\nbernardlhermite.mycozy.cloud\nzazadurand.mycozy.cloud   L\u2019astuce de Claude Ajoutez votre adresse Cozy \u00e0 vos favoris pour y acc\u00e9der en un seul clic", 
            "title": "Cr\u00e9ez votre adresse Cozy"
        }, 
        {
            "location": "/use/index_fr/#creer-votre-mot-de-passe", 
            "text": "L\u2019astuce de Claude Pour cr\u00e9er un mot de passe complexe mais facile \u00e0 retenir, imaginez une phrase absurde et cr\u00e9ez le mot de passe \u00e0 partir des initiales des mots et de la ponctuation. Ainsi, \u00ab\u00a0Ma\u00eetre renard, sur un nuage perch\u00e9, tenait en son bec de la pluie\u00a0\u00bb deviendra \u00ab\u00a0Mr,s1np,tesb2lp\u00a0\u00bb", 
            "title": "Cr\u00e9er votre mot de passe"
        }, 
        {
            "location": "/use/index_fr/#bien-utiliser-votre-cozy", 
            "text": "Nous avons \u00e9labor\u00e9 une bo\u00eete \u00e0 outils pour param\u00e9trer votre Cozy et d\u00e9cupler ses capacit\u00e9s.", 
            "title": "Bien utiliser votre Cozy"
        }, 
        {
            "location": "/use/index_fr/#sauvegardez-vos-fichiers-et-documents-en-un-seul-clic", 
            "text": "Cozy vous permet d\u2019enregistrer tous vos fichiers (photos, vid\u00e9os, documents administratifs, factures etc.) au m\u00eame endroit et de les sauvegarder automatiquement. Ainsi, m\u00eame si votre ordinateur tombe en panne ou si vous oubliez votre t\u00e9l\u00e9phone dans le train, tous vos fichiers restent prot\u00e9g\u00e9s. Plus besoin d\u2019un disque externe pour sauvegarder vos documents\u00a0!", 
            "title": "Sauvegardez vos fichiers et documents en un seul clic"
        }, 
        {
            "location": "/use/index_fr/#ajout-de-fichiers-a-votre-cozy-sur-un-ordinateur-windows-ou-mac", 
            "text": "V\u00e9rifiez que l\u2019application de bureau est install\u00e9e sur votre ordinateur. Si vous n\u2019avez pas rencontr\u00e9 de soucis en suivants nos conseils, vous devriez passer cette \u00e9tape sans difficult\u00e9s. Faites glisser et d\u00e9posez les fichiers souhait\u00e9s dans le dossier Cozy Drive. Simple comme dire bonjour n\u2019est-ce pas\u00a0? Votre Cozy garde vos fichiers bien au chaud \u00e0 l\u2019abri de tous\u00a0!", 
            "title": "Ajout de fichiers \u00e0 votre Cozy sur un ordinateur Windows ou Mac"
        }, 
        {
            "location": "/use/index_fr/#sur-votre-cozy-depuis-un-navigateur", 
            "text": "Connectez-vous \u00e0 votre Cozy en suivant l\u2019adresse Internet que vous avez cr\u00e9\u00e9 au d\u00e9but (Par exemple\u00a0: isabelledurand.mycozy.cloud) Ouvrez votre application Drive dans le menu Applications si ce n\u2019est pas d\u00e9j\u00e0 fait Cliquez sur le bouton bleu Transf\u00e9rer des fichiers en haut \u00e0 droite de la fen\u00eatre. Choisissez le fichier \u00e0 ajouter, puis cliquez sur Ouvrir.", 
            "title": "Sur votre Cozy depuis un navigateur"
        }, 
        {
            "location": "/use/index_fr/#accedez-a-vos-fichiers-ou-que-vous-soyez-et-quand-vous-voulez", 
            "text": "Enregistrez vos photos et vos documents dans Cozy, puis consultez-les \u00e0 partir de l\u2019application Cozy sur un ordinateur, un t\u00e9l\u00e9phone ou une tablette. Tous les fichiers que vous enregistrez dans Cozy sont automatiquement synchronis\u00e9s sur l\u2019ensemble de vos appareils, et restent ainsi toujours \u00e0 port\u00e9e de main. Pour retrouver vos fichiers sur tous vos appareils (PC, mobile et tablette) et synchroniser vos photos avec votre Cozy, t\u00e9l\u00e9chargez l\u2019application de  Cozy pour iOS  et l\u2019 application pour Android .", 
            "title": "Acc\u00e9dez \u00e0 vos fichiers ou que vous soyez et quand vous voulez"
        }, 
        {
            "location": "/use/index_fr/#connectez-vous-pour-enfin-deconnecter", 
            "text": "Cliquez sur Applications en haut \u00e0 droite de votre \u00e9cran et cliquez sur Cozy Collect, votre application regroupant les collecteurs disponibles dans votre Cozy.  En s\u00e9lectionnant les connecteurs de vos fournisseurs, vous allez automatiser la r\u00e9cup\u00e9ration de vos donn\u00e9es li\u00e9es \u00e0 vos diff\u00e9rents comptes client. C\u2019est tr\u00e8s simple\u00a0: s\u00e9lectionnez le fournisseur, entrez vos identifiant et mot de passe \u2013 ce sont ceux qui vous permettent de rentrer sur votre espace client. En un seul clic, votre connecteur est op\u00e9rationnel et actif. Un macaron vert apparaitra sur le connecteur ainsi actif. Vous pouvez renouveler l\u2019op\u00e9ration avec autant de connecteurs que vous le souhaitez (dans la mesure ou vous avez un compte client associ\u00e9).", 
            "title": "Connectez-vous pour enfin d\u00e9connecter\u00a0!"
        }, 
        {
            "location": "/use/index_fr/#avez-vous-pense-a-tout", 
            "text": "", 
            "title": "Avez-vous pens\u00e9 \u00e0 tout\u00a0?"
        }, 
        {
            "location": "/use/index_fr/#avez-vous-telecharge-lapplication-cozy-drive-sur-votre-iphone-ou-votre-android", 
            "text": "Si oui, bravo\u00a0! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9\u00a0! Si non, voici la marche \u00e0 suivre\u00a0:  Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab\u00a0T\u00e9l\u00e9charger l\u2019app mobile\u00a0\u00bb  Vous \u00eates d\u00e9sormais sur la page\u00a0:  https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre appareil. O\u00f9 alors cliquez sur les ic\u00f4nes ci-dessous\u00a0:", 
            "title": "Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy Drive sur votre iPhone ou votre Android\u00a0?"
        }, 
        {
            "location": "/use/index_fr/#avez-vous-telecharge-lapplication-cozy-de-bureau", 
            "text": "Si oui, bravo\u00a0! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9\u00a0! Si ce n\u2019est pas d\u00e9j\u00e0 fait, cela vous prendra moins de deux minutes pour l\u2019installer\u00a0:  Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab\u00a0T\u00e9l\u00e9charger l\u2019app PC\u00bb  Vous \u00eates d\u00e9sormais sur la page\u00a0:  https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre PC\u00a0:  MacOS  ou  Microsoft Windows . F\u00e9licitations ! Votre Cozy n\u2019a d\u00e9sormais plus de secret pour vous.", 
            "title": "Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy de bureau\u00a0?"
        }, 
        {
            "location": "/use/index_fr/#encore-des-questions", 
            "text": "Notre \u00e9quipe support se tient \u00e0 votre disposition pour toute autre question. Visitez notre page Aide en ligne sur le site cozy.io. Venez \u00e9galement nous dire bonjour sur  Twitter  et  Facebook .", 
            "title": "Encore des questions\u00a0?"
        }, 
        {
            "location": "/sync/", 
            "text": "Synchronisez tous vos terminaux avec votre Cozy\n\u00c0 venir\u2026\n\n\nsynchronize your phone\nsynchronize your desktop computer", 
            "title": "Restez synchro"
        }, 
        {
            "location": "/sync/#synchronisez-tous-vos-terminaux-avec-votre-cozy", 
            "text": "\u00c0 venir\u2026  synchronize your phone synchronize your desktop computer", 
            "title": "Synchronisez tous vos terminaux avec votre Cozy"
        }, 
        {
            "location": "/sync/phone/", 
            "text": "Synchronisez votre t\u00e9l\u00e9phone avec votre Cozy\nCette documentation sera bient\u00f4t disponible.", 
            "title": "Synchronisez vos t\u00e9l\u00e9phones"
        }, 
        {
            "location": "/sync/phone/#synchronisez-votre-telephone-avec-votre-cozy", 
            "text": "Cette documentation sera bient\u00f4t disponible.", 
            "title": "Synchronisez votre t\u00e9l\u00e9phone avec votre Cozy"
        }, 
        {
            "location": "/sync/desktop/", 
            "text": "Synchronisation avec votre ordinateur\nLe logiciel Cozy Drive pour ordinateur vous permet de synchroniser vos fichiers et vos dossiers entre votre Cozy et votre ordinateur. Vous pouvez ainsi travailler sur vos fichiers hors ligne. Les modifications seront alors synchronis\u00e9es d\u00e8s que vous retrouverez du r\u00e9seau.\nInstallation\nAvant de commencer l\ninstallation de Cozy Drive pour ordinateur, assurez-vous d\navoir un Cozy dans sa toute derni\u00e8re version.\nWindows\nVous pouvez t\u00e9l\u00e9charger Cozy Drive pour Windows sur \ncette page\n.\nmacOS\nVous pouvez t\u00e9l\u00e9charger Cozy Drive pour MacOS sur \ncette page\n.\nLinux\nLa version pour GNU/Linux sera bient\u00f4t disponible.\nConfiguration\n\u00c0 la fin de l\u2019installation, l\u2019application va d\u00e9marrer et vous demander quelques informations\u00a0:\n\n\nl\u2019URL de votre Cozy, c\u2019est \u00e0 dire l\u2019adresse de votre serveur\u00a0;\nle mot de passe de votre serveur. L\u2019application n\u2019enregistre pas ce mot de passe, mais elle en a besoin lors de la premi\u00e8re utilisation pour obtenir l\u2019autorisation de synchroniser vos fichiers\u00a0;\nle dossier dans lequel vous souhaitez synchroniser vos fichiers.\n\n\nUne fois ces quatre \u00e9crans pass\u00e9s, le logiciel va vous rediriger vers le tableau de bord et la premi\u00e8re synchronisation peut d\u00e9marrer.\nLe tableau de bord est compos\u00e9\u00a0:\n\n\nd\u2019un panneau d\u2019information sur les synchronisations en cours et l\u2019espace disque disponible de votre Cozy\u00a0;\nd\u2019une section de pr\u00e9f\u00e9rences vous permettant de d\u00e9marrer votre logiciel au d\u00e9marrage de votre ordinateur et vous indiquant sa version\u00a0;\nd\u2019une page vous donnant des informations sur leserveur auquel l\u2019application est connect\u00e9e et permettant de la d\u00e9connecter\u00a0;\nd\u2019une page d\u2019aide en cas de souci avec l\u2019application.\n\n\nEn cas de soucis\nSi vous rencontrez un souci avec le logiciel de synchronisation Cozy Drive, vous pouvez nous le signaler et nous envoyer le journal d\nactivit\u00e9s depuis l\ninterface.\nOuvrez l\u2019\u00e9cran d\u2019aide et vliquez sur \nEnvoyez-nous un message\n dans la partie \n\nSupport\n.\nN\u2019oubliez pas de d\u00e9crire votre soucis dans le contenu du message, cela nous aide pour am\u00e9liorer au mieux notre logiciel.", 
            "title": "Synchronisez vos ordinateurs"
        }, 
        {
            "location": "/sync/desktop/#synchronisation-avec-votre-ordinateur", 
            "text": "Le logiciel Cozy Drive pour ordinateur vous permet de synchroniser vos fichiers et vos dossiers entre votre Cozy et votre ordinateur. Vous pouvez ainsi travailler sur vos fichiers hors ligne. Les modifications seront alors synchronis\u00e9es d\u00e8s que vous retrouverez du r\u00e9seau.", 
            "title": "Synchronisation avec votre ordinateur"
        }, 
        {
            "location": "/sync/desktop/#installation", 
            "text": "Avant de commencer l installation de Cozy Drive pour ordinateur, assurez-vous d avoir un Cozy dans sa toute derni\u00e8re version.", 
            "title": "Installation"
        }, 
        {
            "location": "/sync/desktop/#windows", 
            "text": "Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour Windows sur  cette page .", 
            "title": "Windows"
        }, 
        {
            "location": "/sync/desktop/#macos", 
            "text": "Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour MacOS sur  cette page .", 
            "title": "macOS"
        }, 
        {
            "location": "/sync/desktop/#linux", 
            "text": "La version pour GNU/Linux sera bient\u00f4t disponible.", 
            "title": "Linux"
        }, 
        {
            "location": "/sync/desktop/#configuration", 
            "text": "\u00c0 la fin de l\u2019installation, l\u2019application va d\u00e9marrer et vous demander quelques informations\u00a0:  l\u2019URL de votre Cozy, c\u2019est \u00e0 dire l\u2019adresse de votre serveur\u00a0; le mot de passe de votre serveur. L\u2019application n\u2019enregistre pas ce mot de passe, mais elle en a besoin lors de la premi\u00e8re utilisation pour obtenir l\u2019autorisation de synchroniser vos fichiers\u00a0; le dossier dans lequel vous souhaitez synchroniser vos fichiers.  Une fois ces quatre \u00e9crans pass\u00e9s, le logiciel va vous rediriger vers le tableau de bord et la premi\u00e8re synchronisation peut d\u00e9marrer. Le tableau de bord est compos\u00e9\u00a0:  d\u2019un panneau d\u2019information sur les synchronisations en cours et l\u2019espace disque disponible de votre Cozy\u00a0; d\u2019une section de pr\u00e9f\u00e9rences vous permettant de d\u00e9marrer votre logiciel au d\u00e9marrage de votre ordinateur et vous indiquant sa version\u00a0; d\u2019une page vous donnant des informations sur leserveur auquel l\u2019application est connect\u00e9e et permettant de la d\u00e9connecter\u00a0; d\u2019une page d\u2019aide en cas de souci avec l\u2019application.", 
            "title": "Configuration"
        }, 
        {
            "location": "/sync/desktop/#en-cas-de-soucis", 
            "text": "Si vous rencontrez un souci avec le logiciel de synchronisation Cozy Drive, vous pouvez nous le signaler et nous envoyer le journal d activit\u00e9s depuis l interface. Ouvrez l\u2019\u00e9cran d\u2019aide et vliquez sur  Envoyez-nous un message  dans la partie  Support . N\u2019oubliez pas de d\u00e9crire votre soucis dans le contenu du message, cela nous aide pour am\u00e9liorer au mieux notre logiciel.", 
            "title": "En cas de soucis"
        }, 
        {
            "location": "/download/", 
            "text": "T\u00e9l\u00e9chargez Cozy Drive pour tous vos terminaux\nCozy Drive sur votre t\u00e9l\u00e9phone\n\n\n Cozy Drive pour iOS\nN\u00e9cessite iOS 10 ou sup\u00e9rieur\n\n\n\n\n Cozy Drive pour Android\nRequiert Android 5.0.0 ou sup\u00e9rieur\n\n\nCozy Drive pour votre ordinateur\n\n\n Cozy Drive pour Mac OS\nVersion minimale\u00a0: MacOS 10.12.x Sierra\n\n\nDowload for MacOS\n\n\n\n\n\n\n Cozy Drive pour Windows\nPour Windows 10\n\n\nDowload for Microsoft Windows", 
            "title": "T\u00e9l\u00e9charger"
        }, 
        {
            "location": "/download/#telechargez-cozy-drive-pour-tous-vos-terminaux", 
            "text": "", 
            "title": "T\u00e9l\u00e9chargez Cozy Drive pour tous vos terminaux"
        }, 
        {
            "location": "/download/#cozy-drive-sur-votre-telephone", 
            "text": "", 
            "title": "Cozy Drive sur votre t\u00e9l\u00e9phone"
        }, 
        {
            "location": "/download/#cozy-drive-pour-ios", 
            "text": "N\u00e9cessite iOS 10 ou sup\u00e9rieur", 
            "title": "Cozy Drive pour iOS"
        }, 
        {
            "location": "/download/#cozy-drive-pour-android", 
            "text": "Requiert Android 5.0.0 ou sup\u00e9rieur", 
            "title": "Cozy Drive pour Android"
        }, 
        {
            "location": "/download/#cozy-drive-pour-votre-ordinateur", 
            "text": "", 
            "title": "Cozy Drive pour votre ordinateur"
        }, 
        {
            "location": "/download/#cozy-drive-pour-mac-os", 
            "text": "Version minimale\u00a0: MacOS 10.12.x Sierra  Dowload for MacOS", 
            "title": "Cozy Drive pour Mac OS"
        }, 
        {
            "location": "/download/#cozy-drive-pour-windows", 
            "text": "Pour Windows 10  Dowload for Microsoft Windows", 
            "title": "Cozy Drive pour Windows"
        }, 
        {
            "location": "/install/debian/", 
            "text": "A Debian repository serves packages to setup a Cozy self-hosted environment\nIt provides:\n\n\ncozy-couchdb\n: \n\nCouchDB\n database engine used by cozy\ncozy-nsjail\n: \n\nNSJail\n isolation tool used by konnectors\ncozy-stack\n: \n\nCozy core\ncozy-coclyco\n: \n\nCLI\n to manage vhosts and certificates\ncozy\n: metapackage installing everything to setup a self-hosted environment\n\n\nThis repository currently supports:\n\n\nDebian Stretch\n (9.x): amd64\nUbuntu Xenial\n (16.04 LTS): amd64\nRaspbian Stretch\n (9.x): armhf\n\n\nAvailable channels are:\n\n\nstable\n: official and supported releases\ntesting\n: future official releases, for testing purposes\nunstable\n: nightly builds, to be use with caution\n\n\ncozy-couchdb\n and \n\ncozy-nsjail\n are temporary packages. They will be removed when official \n\ncouchd\n and \n\nnsjail\n will be available\nYou can choose to install \ncozy-couchdb\n on the same host as \n\ncozy-stack\n, or use a remote CouchDB server. Cozy only needs a 2.x CouchDB (1.x not supported).\nLike CouchDB, you can choose to install your reverse proxy on the same host, or use a remote one. At this \ncozy-coclyco\n supports only local \n\nnginx\n. If you want to use \n\napache2\n or remote reverse proxy, you need to manually configure it for vhost or TLS certificate issuances.\nPrerequisites\nSetup your repository and fetch the GPG Cozy signing key.\nChange your channel if you prefer \ntesting\n or \n\nunstable\n or an other distribution.\nSupported repositories are:\n\n\nDebian Stretch (9.x)\n\n\ndeb https://apt.cozy.io/debian/ stretch stable\n\n\ndeb https://apt.cozy.io/debian/ stretch testing\n\n\ndeb https://apt.cozy.io/nightly/debian/ stretch unstable\n\n\n\n\nUbuntu Xenial (16.04 LTS)\n\n\ndeb https://apt.cozy.io/ubuntu/ xenial stable\n\n\ndeb https://apt.cozy.io/ubuntu/ xenial testing\n\n\ndeb https://apt.cozy.io/nightly/ubuntu/ xenial unstable\n\n\n\n\nRaspbian Stretch (9.x)\n\n\ndeb https://apt.cozy.io/raspbian/ stretch stable\n\n\ndeb https://apt.cozy.io/raspbian/ stretch testing\n\n\ndeb https://apt.cozy.io/nightly/raspbian/ stretch unstable\n\n\n\n\n\n\necho \ndeb https://apt.cozy.io/debian/ stretch stable\n \n /etc/apt/sources.list.d/cozy.list\ncurl https://apt.cozy.io/cozy.gpg | \\\n    apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add -\napt update\n\n\n\n\nIf you want to use unstable/nightly builds, you have to accept another key (weaker and passwordless on our side because of unattended automated builds)\ncurl https://apt.cozy.io/nightly/cozy.gpg | \\\n    apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add -\n\n\n\n\nSetup\nFor the rest of this document, we assume you install components one by one to allow intermediate verification\nFor a full local environment (\ncouchdb\n + \n\nnginx\n + \n\ncozy\n), just install the \n\ncozy\n package which can install all needed packages in one shot.\nCouchDB\napt install cozy-couchdb\n\n\n\n\nInstall CouchDB in \nstandalone\n mode\nConfigure CouchDB to listen on \n127.0.0.1\nPick an administrator password\n\n(This password is used by shell scripts, so currently avoid to use one with simple or double quotes or others shell meaningfull symbols. We advice you to choose one with only alphanumeric digits to avoid troubles.)\nAt this point, you must have a working CouchDB instance\ncurl http://localhost:5984/       \n{\ncouchdb\n:\nWelcome\n,\nversion\n:\n2.1.0\n,\nfeatures\n:[\nscheduler\n],\nvendor\n:{\nname\n:\nThe Apache Software Foundation\n}}\n\n\n\n\nCozy stack\napt install cozy-stack\n\n\n\n\nCozy need to create a CouchDB administrator and so to connect as admin to the CouchDB. Fill those mandatory parameters to allow this creation:\n\n\nAddress: by default, it\ns \nlocalhost:5984\nNode name: by default, it\ns \ncouchdb@localhost\nAdmin user: by default, it\ns \nadmin\nAdmin password: put the one you choose during CouchDB setup\nCozy user: by default, it\ns \ncozy\nCozy password: pick a password\n\n\n(Those passwords are used by shell scripts, so currently avoid to use ones with simple or double quotes or others shell meaningfull symbols. We advice you to choose ones with only alphanumeric digits to avoid troubles.)\nFor stack management (create instances, install applications\n), \nCozy need an administrator password\n. So pick a new one.\n\n\nWhen invoking \n\ncozy-stack\n (or \n\ncozy-coclyco\n which use it under the hood), you need to set the \n\nCOZY_ADMIN_PASSWORD\n environment variable with this password. You can put it on your \n\n.bashrc\n for simplier life if you want.\nAt this point, you must have a working Cozy stack\ncurl http://localhost:8080/version\n{\nbuild_mode\n:\nproduction\n,\nbuild_time\n:\n2017-09-28T10:26:03Z\n,\nruntime_version\n:\ngo1.8.1\n,\nversion\n:\n0.1.0\n}#\n\n\n\n\nIf you want to use konnectors, you need to initialize the NodeJS chroot\n(Currently this script only works for Debian and will be adapted for Ubuntu and Raspbian soon)\n/usr/share/cozy/konnector-create-chroot.sh\n\n\n\n\nIf you use a self-signed certificate or a not official certificate authority, you need to deploy the corresponding root certificate in \n/usr/share/cozy/chroot/etc/ssl/certs/custom.crt\n.\n\n\nFor example, if you use \n\nLet\ns Encrypt staging environment\n for testing purpose\u00a0:\nwget -q https://letsencrypt.org/certs/fakelerootx1.pem \\\n    -O /usr/share/cozy/chroot/etc/ssl/certs/custom.crt\n\n\n\n\nFinally\napt install cozy\n\n\n\n\nCozy instance setup\nDNS\nCozy relies on sub-domains for each applications you installed on your instance.\nFor an instance \ncozy.example.org\n, \napp\n.cozy.example.org\n must be available too. Currently, you need at least:\n\n\n\n\nonboarding.cozy.example.org\nsettings.cozy.example.org\ndrive.cozy.example.org\nphotos.cozy.example.org\ncollect.cozy.example.org\nstore.cozy.example.org\napp\n.cozy.example.org\n for each application you use\n\n\n\n\nFollow your usual way to create those entries on your domain zone.\nThe simpliest way to handle this is to use a wildcard entry if supported by your domain hosting.\ncozy 1h IN A x.x.x.x\n*.cozy 1h IN CNAME cozy\n\n\n\n\nACME (Let\ns Encrypt)\nLike DNS, each application will use a different sub-domain and so request a certificate which include all needed domains.\ncozy-coclyco\n use Let\ns Encrypt and it ACME protocol to prove your ownership over the domain you try to issue a certificate.\nThis protocol requires your reverse proxy to be able to serve \nhttp://\napp\n.cozy.example.org/.well-known/acme-challenge/\n requests correctly.\n\n\nThe simplest way to achieve this is to configure your reverse proxy with a generic rule to forward any \n/.well-known/acme-challenge/\n request to the corresponding \n\n/etc\n/ssl/private/acme-challenge/\n folder.\nFor \n\nnginx\n, this can be done with\n/etc/nginx/sites-available/default\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n    server_name _;\n\n    location /.well-known/acme-challenge/ {\n        alias /etc/ssl/private/acme-challenge/;\n    }\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n\napt install ssl-cert\nadduser www-data ssl-cert\nsystemctl restart nginx\n\n\n\n\nCreate instances\nOnce you\nve got a stack, your DNS\u00a0and your reverse proxy correctly configured, you can create instances on your Cozy stack.\nRemember to set the \nCOZY_ADMIN_PASSWORD\n environment variable.\nexport COZY_ADMIN_PASSWORD=\nyour-admin-password\n\ncozy-coclyco create cozy.example.org me@example.org\n\n\n\n\nFor complete reference of Coclyco, refer to the documentation of \ncozy-coclyco\n.", 
            "title": "Debian"
        }, 
        {
            "location": "/install/debian/#prerequisites", 
            "text": "Setup your repository and fetch the GPG Cozy signing key. Change your channel if you prefer  testing  or  unstable  or an other distribution.\nSupported repositories are:  Debian Stretch (9.x)  deb https://apt.cozy.io/debian/ stretch stable  deb https://apt.cozy.io/debian/ stretch testing  deb https://apt.cozy.io/nightly/debian/ stretch unstable   Ubuntu Xenial (16.04 LTS)  deb https://apt.cozy.io/ubuntu/ xenial stable  deb https://apt.cozy.io/ubuntu/ xenial testing  deb https://apt.cozy.io/nightly/ubuntu/ xenial unstable   Raspbian Stretch (9.x)  deb https://apt.cozy.io/raspbian/ stretch stable  deb https://apt.cozy.io/raspbian/ stretch testing  deb https://apt.cozy.io/nightly/raspbian/ stretch unstable    echo  deb https://apt.cozy.io/debian/ stretch stable    /etc/apt/sources.list.d/cozy.list\ncurl https://apt.cozy.io/cozy.gpg | \\\n    apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add -\napt update  If you want to use unstable/nightly builds, you have to accept another key (weaker and passwordless on our side because of unattended automated builds) curl https://apt.cozy.io/nightly/cozy.gpg | \\\n    apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add -", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/install/debian/#setup", 
            "text": "For the rest of this document, we assume you install components one by one to allow intermediate verification For a full local environment ( couchdb  +  nginx  +  cozy ), just install the  cozy  package which can install all needed packages in one shot.", 
            "title": "Setup"
        }, 
        {
            "location": "/install/debian/#couchdb", 
            "text": "apt install cozy-couchdb  Install CouchDB in  standalone  mode Configure CouchDB to listen on  127.0.0.1 Pick an administrator password \n(This password is used by shell scripts, so currently avoid to use one with simple or double quotes or others shell meaningfull symbols. We advice you to choose one with only alphanumeric digits to avoid troubles.) At this point, you must have a working CouchDB instance curl http://localhost:5984/       \n{ couchdb : Welcome , version : 2.1.0 , features :[ scheduler ], vendor :{ name : The Apache Software Foundation }}", 
            "title": "CouchDB"
        }, 
        {
            "location": "/install/debian/#cozy-stack", 
            "text": "apt install cozy-stack  Cozy need to create a CouchDB administrator and so to connect as admin to the CouchDB. Fill those mandatory parameters to allow this creation:  Address: by default, it s  localhost:5984 Node name: by default, it s  couchdb@localhost Admin user: by default, it s  admin Admin password: put the one you choose during CouchDB setup Cozy user: by default, it s  cozy Cozy password: pick a password  (Those passwords are used by shell scripts, so currently avoid to use ones with simple or double quotes or others shell meaningfull symbols. We advice you to choose ones with only alphanumeric digits to avoid troubles.) For stack management (create instances, install applications ),  Cozy need an administrator password . So pick a new one. \nWhen invoking  cozy-stack  (or  cozy-coclyco  which use it under the hood), you need to set the  COZY_ADMIN_PASSWORD  environment variable with this password. You can put it on your  .bashrc  for simplier life if you want. At this point, you must have a working Cozy stack curl http://localhost:8080/version\n{ build_mode : production , build_time : 2017-09-28T10:26:03Z , runtime_version : go1.8.1 , version : 0.1.0 }#  If you want to use konnectors, you need to initialize the NodeJS chroot (Currently this script only works for Debian and will be adapted for Ubuntu and Raspbian soon) /usr/share/cozy/konnector-create-chroot.sh  If you use a self-signed certificate or a not official certificate authority, you need to deploy the corresponding root certificate in  /usr/share/cozy/chroot/etc/ssl/certs/custom.crt . \nFor example, if you use  Let s Encrypt staging environment  for testing purpose\u00a0: wget -q https://letsencrypt.org/certs/fakelerootx1.pem \\\n    -O /usr/share/cozy/chroot/etc/ssl/certs/custom.crt", 
            "title": "Cozy stack"
        }, 
        {
            "location": "/install/debian/#finally", 
            "text": "apt install cozy", 
            "title": "Finally"
        }, 
        {
            "location": "/install/debian/#cozy-instance-setup", 
            "text": "", 
            "title": "Cozy instance setup"
        }, 
        {
            "location": "/install/debian/#dns", 
            "text": "Cozy relies on sub-domains for each applications you installed on your instance.\nFor an instance  cozy.example.org ,  app .cozy.example.org  must be available too. Currently, you need at least:   onboarding.cozy.example.org settings.cozy.example.org drive.cozy.example.org photos.cozy.example.org collect.cozy.example.org store.cozy.example.org app .cozy.example.org  for each application you use   Follow your usual way to create those entries on your domain zone.\nThe simpliest way to handle this is to use a wildcard entry if supported by your domain hosting. cozy 1h IN A x.x.x.x\n*.cozy 1h IN CNAME cozy", 
            "title": "DNS"
        }, 
        {
            "location": "/install/debian/#acme-lets-encrypt", 
            "text": "Like DNS, each application will use a different sub-domain and so request a certificate which include all needed domains. cozy-coclyco  use Let s Encrypt and it ACME protocol to prove your ownership over the domain you try to issue a certificate.\nThis protocol requires your reverse proxy to be able to serve  http:// app .cozy.example.org/.well-known/acme-challenge/  requests correctly.  The simplest way to achieve this is to configure your reverse proxy with a generic rule to forward any  /.well-known/acme-challenge/  request to the corresponding  /etc\n/ssl/private/acme-challenge/  folder.\nFor  nginx , this can be done with /etc/nginx/sites-available/default\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n    server_name _;\n\n    location /.well-known/acme-challenge/ {\n        alias /etc/ssl/private/acme-challenge/;\n    }\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n\napt install ssl-cert\nadduser www-data ssl-cert\nsystemctl restart nginx", 
            "title": "ACME (Let's Encrypt)"
        }, 
        {
            "location": "/install/debian/#create-instances", 
            "text": "Once you ve got a stack, your DNS\u00a0and your reverse proxy correctly configured, you can create instances on your Cozy stack.\nRemember to set the  COZY_ADMIN_PASSWORD  environment variable. export COZY_ADMIN_PASSWORD= your-admin-password \ncozy-coclyco create cozy.example.org me@example.org  For complete reference of Coclyco, refer to the documentation of  cozy-coclyco .", 
            "title": "Create instances"
        }, 
        {
            "location": "/install/manual/", 
            "text": "How to install Cozy on Debian Stable\n\n\n\u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images.\n\n\n\n\nFor now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors.\n\n\n\n\nMost of the following commands require root privileges. You can either open a root shell or use \nsudo\n when needed;\n\n\nPre-requisites\nCozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice.\nYou\nll also need a domain name and know how to associate all of its subdomains to the IP address of your server.\nInstall dependencies\nOn a fresh new Debian Stretch, here are the packages that may be useful to install and manage your server:\napt-get update \n apt-get --no-install-recommends -y install \\\n            ca-certificates \\\n            curl \\\n            net-tools \\\n            nginx \\\n            sudo \\\n            vim-tiny \\\n            build-essential \\\n            pkg-config \\\n            erlang \\\n            libicu-dev \\\n            libmozjs185-dev \\\n            libcurl4-openssl-dev\n\n\n\n\nInstall CouchDB\nDownload \nthe source code on CouchDB 2\n and \n\ninstall it\n.\ncd /tmp\ncurl -LO https://dist.apache.org/repos/dist/release/couchdb/source/2.1.0/apache-couchdb-2.1.0.tar.gz\ntar xf apache-couchdb-2.1.0.tar.gz\ncd apache-couchdb-2.1.0\n./configure\nmake release\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n        \nCouchDB Administrator\n couchdb\n\n\n\n\nWe\u2019ll install CouchDB inside \n/home/couchdb\n:\ncp -R rel/couchdb /home/couchdb\nchown -R couchdb:couchdb /home/couchdb\nfind /home/couchdb -type d -exec chmod 0770 {} \\;\nchmod -R 0644 /home/couchdb/etc/*\nmkdir /var/log/couchdb \n chown couchdb: /var/log/couchdb\n\n\n\n\nFor now, we\u2019ll just run the database as a background job, but it is highly recommended to use some supervisor software.\nsudo -b -i -u couchdb sh -c '/home/couchdb/bin/couchdb \n /var/log/couchdb/couch.log 2\n /var/log/couchdb/couch-err.log'\n\n\n\n\nAlternatively, you can setup a service script, and use systemd to run couchdb as a service :\ncat \nEOT \n /etc/systemd/system/couchdb.service\n[Unit]\nDescription=Couchdb service\nAfter=network.target\n\n[Service]\nType=simple\nUser=couchdb\nExecStart=/home/couchdb/bin/couchdb -o /dev/stdout -e /dev/stderr\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOT\n\n\n\n\nThen to start and enable (start at boot) the service :\nsystemctl  daemon-reload\nsystemctl  start couchdb.service\nsystemctl  enable couchdb.service\n\n\n\n\nLast but not least, let\u2019s create the default databases:\ncurl -X PUT http://127.0.0.1:5984/_users\ncurl -X PUT http://127.0.0.1:5984/_replicator\ncurl -X PUT http://127.0.0.1:5984/_global_changes\n\n\n\n\n\n\n\u26a0\ufe0f The default CouchDB installation has no admin user. Everybody can query the server. So, in production environment, make sure to create en admin user and update the CouchDB connexion URL inside the configuration file of Cozy.\n\n\nInstall the Cozy Stack\nThe Cozy server is just a single binary. You can fetch one of its releases from Github:\ncurl -o /usr/local/bin/cozy-stack \\\n     -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha\nchmod +x /usr/local/bin/cozy-stack\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n          \nCozy\n cozy\nmkdir /var/log/cozy\nchown cozy: /var/log/cozy\nmkdir /var/lib/cozy\nchown -R cozy: /var/lib/cozy\n\n\n\n\nYou can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file:\nmkdir /etc/cozy\ncurl -o /etc/cozy/cozy.yaml \\\n     https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml\nchown -R cozy: /etc/cozy\n\n\n\n\nEdit this file to adapt it to your configuration. You should setup a directory to store the files. For example:\n  fs:\n    url: file://localhost/var/lib/cozy\n\n\n\n\nDon\u2019t forget to allow Cozy user to write inside this folder.\nCompile a recent stack\nThe released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them:\napt-get --no-install-recommends -y install \\\n        ca-certificates \\\n        curl \\\n        net-tools \\\n        nginx \\\n        sudo \\\n        vim-tiny \\\n        build-essential \\\n        pkg-config \\\n        erlang \\\n        libicu-dev \\\n        libmozjs185-dev \\\n        libcurl4-openssl-dev \\\n        git\ncd /tmp\ncurl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nPATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack\ncp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack\nchmod +x /usr/local/bin/cozy-stack\n\n\n\n\nConfiguration\nNGinx\nLet\u2019s assume you want to host a server on \nmycozy.tld\n with a self-signed certificate.\nGenerate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain:\nsudo openssl req -x509 -nodes -newkey rsa:4096 \\\n    -keyout /etc/cozy/mycozy.tld.key \\\n    -out /etc/cozy/mycozy.tld.crt \\\n    -days 365 -subj \n/CN={*.mycozy.tld}\n\n\n\n\nThen create a virtual host for your server by creating a file at \n/etc/cozy/sites-available/mycozy.tld.conf\n with \n\nthe following configuration template\n.\nAnd enable it by creating a symbolic link:\nsudo ln -s \n/etc/nginx/sites-available/mycozy.tld.conf\n \\\n       /etc/nginx/sites-enabled/\n\n\n\n\nYou can check that your configuration is valid by running\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n\n\n\nAnd start NGinx:\nsudo service nginx start\n\n\n\n\nOr, if you use systemd:\nsudo systemctl start nginx\nsudo systemctl enable nginx # enable the nginx service at startup, if need to\n\n\n\n\nCozy\nThe Cozy server requires a main password:\nsudo /usr/local/bin/cozy-stack config passwd /etc/cozy/\n\n\n\n\nThis password will be asked every time you use the \ncozy-stack\n command line. To prevent this, you can set the \n\nCOZY_ADMIN_PASSWORD\n environment variable.\nDNS\nMake sure to associate \n*.mycozy.tld\n with the IP address of your server.\nFor example, add the following records to your DNS (replacing \nmycozy.tld\n with your domain of choice):\nmycozy.tld   A     your IP\n*.mycozy.tld CNAME mycozy.tld\n\n\n\n\nRunning\nFor now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software.\nFirst, start the server:\nsudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\\n     --log-level info \\\n     --host 0.0.0.0 \n /var/log/cozy/cozy.log 2\n /var/log/cozy/cozy-err.log'\n\n\n\n\nThen, create your instance and install the applications:\ncozy-stack instances add \\\n           --host 0.0.0.0 \\\n           --apps drive,photos,collect,settings \\\n           --passphrase \nXXX\n \\\n           mycozy.tld\n\n\n\n\npassphrase \nXXX\n allows to set the initial password of the instance.\nYou can add other instances by just running this commands again.\n\n\nThe url of your cozy determines the name of your instance.\nIf you choose another public port than the default public port for SSL (443), say \n1443\n, then you should reflect this when creating your cozy instance with the ${instance_domain} as \n\nmycozy.tld:1443\n.\n\n\nSample configuration files\nNginx\nPut this file into \n/etc/nginx/sites-available\n and enable it by creating a symlink in \n\n/etc/nginx/sites-enabled\n.\nIn this template, you need to replace the following placeholders:\n\n\n%PORT% with the public port nginx will listen to (default should be 443)\n%SERVER_PORT% with the private port cozy will listen to (default should be 8080)\n%DOMAIN% with your domain of choice: \nmycozy.tld\n in this example\n\n\nserver {\n    listen %PORT%;\n\n    server_name *.%DOMAIN%;\n\n    ssl_certificate /etc/cozy/%DOMAIN%.crt;\n    ssl_certificate_key /etc/cozy/%DOMAIN%.key;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers EECDH+AES;\n    ssl_prefer_server_ciphers on;\n    ssl on;\n\n    gzip_vary on;\n    client_max_body_size 1024M;\n\n    add_header Strict-Transport-Security max-age=31536000;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect http:// https://;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \nupgrade\n;\n    }\n\n    access_log /var/log/nginx/cozy.log;\n}\n\n\n\n\nTODO\nCozy also requires a SMTP server (or relay).", 
            "title": "Installation manuelle"
        }, 
        {
            "location": "/install/manual/#how-to-install-cozy-on-debian-stable", 
            "text": "\u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images.   For now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors.   Most of the following commands require root privileges. You can either open a root shell or use  sudo  when needed;", 
            "title": "How to install Cozy on Debian Stable"
        }, 
        {
            "location": "/install/manual/#pre-requisites", 
            "text": "Cozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice. You ll also need a domain name and know how to associate all of its subdomains to the IP address of your server.", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/install/manual/#install-dependencies", 
            "text": "On a fresh new Debian Stretch, here are the packages that may be useful to install and manage your server: apt-get update   apt-get --no-install-recommends -y install \\\n            ca-certificates \\\n            curl \\\n            net-tools \\\n            nginx \\\n            sudo \\\n            vim-tiny \\\n            build-essential \\\n            pkg-config \\\n            erlang \\\n            libicu-dev \\\n            libmozjs185-dev \\\n            libcurl4-openssl-dev", 
            "title": "Install dependencies"
        }, 
        {
            "location": "/install/manual/#install-couchdb", 
            "text": "Download  the source code on CouchDB 2  and  install it . cd /tmp\ncurl -LO https://dist.apache.org/repos/dist/release/couchdb/source/2.1.0/apache-couchdb-2.1.0.tar.gz\ntar xf apache-couchdb-2.1.0.tar.gz\ncd apache-couchdb-2.1.0\n./configure\nmake release\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n         CouchDB Administrator  couchdb  We\u2019ll install CouchDB inside  /home/couchdb : cp -R rel/couchdb /home/couchdb\nchown -R couchdb:couchdb /home/couchdb\nfind /home/couchdb -type d -exec chmod 0770 {} \\;\nchmod -R 0644 /home/couchdb/etc/*\nmkdir /var/log/couchdb   chown couchdb: /var/log/couchdb  For now, we\u2019ll just run the database as a background job, but it is highly recommended to use some supervisor software. sudo -b -i -u couchdb sh -c '/home/couchdb/bin/couchdb   /var/log/couchdb/couch.log 2  /var/log/couchdb/couch-err.log'  Alternatively, you can setup a service script, and use systemd to run couchdb as a service : cat  EOT   /etc/systemd/system/couchdb.service\n[Unit]\nDescription=Couchdb service\nAfter=network.target\n\n[Service]\nType=simple\nUser=couchdb\nExecStart=/home/couchdb/bin/couchdb -o /dev/stdout -e /dev/stderr\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOT  Then to start and enable (start at boot) the service : systemctl  daemon-reload\nsystemctl  start couchdb.service\nsystemctl  enable couchdb.service  Last but not least, let\u2019s create the default databases: curl -X PUT http://127.0.0.1:5984/_users\ncurl -X PUT http://127.0.0.1:5984/_replicator\ncurl -X PUT http://127.0.0.1:5984/_global_changes   \u26a0\ufe0f The default CouchDB installation has no admin user. Everybody can query the server. So, in production environment, make sure to create en admin user and update the CouchDB connexion URL inside the configuration file of Cozy.", 
            "title": "Install CouchDB"
        }, 
        {
            "location": "/install/manual/#install-the-cozy-stack", 
            "text": "The Cozy server is just a single binary. You can fetch one of its releases from Github: curl -o /usr/local/bin/cozy-stack \\\n     -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha\nchmod +x /usr/local/bin/cozy-stack\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n           Cozy  cozy\nmkdir /var/log/cozy\nchown cozy: /var/log/cozy\nmkdir /var/lib/cozy\nchown -R cozy: /var/lib/cozy  You can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file: mkdir /etc/cozy\ncurl -o /etc/cozy/cozy.yaml \\\n     https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml\nchown -R cozy: /etc/cozy  Edit this file to adapt it to your configuration. You should setup a directory to store the files. For example:   fs:\n    url: file://localhost/var/lib/cozy  Don\u2019t forget to allow Cozy user to write inside this folder.", 
            "title": "Install the Cozy Stack"
        }, 
        {
            "location": "/install/manual/#compile-a-recent-stack", 
            "text": "The released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them: apt-get --no-install-recommends -y install \\\n        ca-certificates \\\n        curl \\\n        net-tools \\\n        nginx \\\n        sudo \\\n        vim-tiny \\\n        build-essential \\\n        pkg-config \\\n        erlang \\\n        libicu-dev \\\n        libmozjs185-dev \\\n        libcurl4-openssl-dev \\\n        git\ncd /tmp\ncurl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nPATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack\ncp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack\nchmod +x /usr/local/bin/cozy-stack", 
            "title": "Compile a recent stack"
        }, 
        {
            "location": "/install/manual/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/install/manual/#nginx", 
            "text": "Let\u2019s assume you want to host a server on  mycozy.tld  with a self-signed certificate. Generate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain: sudo openssl req -x509 -nodes -newkey rsa:4096 \\\n    -keyout /etc/cozy/mycozy.tld.key \\\n    -out /etc/cozy/mycozy.tld.crt \\\n    -days 365 -subj  /CN={*.mycozy.tld}  Then create a virtual host for your server by creating a file at  /etc/cozy/sites-available/mycozy.tld.conf  with  the following configuration template .\nAnd enable it by creating a symbolic link: sudo ln -s  /etc/nginx/sites-available/mycozy.tld.conf  \\\n       /etc/nginx/sites-enabled/  You can check that your configuration is valid by running sudo nginx -t -c /etc/nginx/nginx.conf  And start NGinx: sudo service nginx start  Or, if you use systemd: sudo systemctl start nginx\nsudo systemctl enable nginx # enable the nginx service at startup, if need to", 
            "title": "NGinx"
        }, 
        {
            "location": "/install/manual/#cozy", 
            "text": "The Cozy server requires a main password: sudo /usr/local/bin/cozy-stack config passwd /etc/cozy/  This password will be asked every time you use the  cozy-stack  command line. To prevent this, you can set the  COZY_ADMIN_PASSWORD  environment variable.", 
            "title": "Cozy"
        }, 
        {
            "location": "/install/manual/#dns", 
            "text": "Make sure to associate  *.mycozy.tld  with the IP address of your server. For example, add the following records to your DNS (replacing  mycozy.tld  with your domain of choice): mycozy.tld   A     your IP\n*.mycozy.tld CNAME mycozy.tld", 
            "title": "DNS"
        }, 
        {
            "location": "/install/manual/#running", 
            "text": "For now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software. First, start the server: sudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\\n     --log-level info \\\n     --host 0.0.0.0   /var/log/cozy/cozy.log 2  /var/log/cozy/cozy-err.log'  Then, create your instance and install the applications: cozy-stack instances add \\\n           --host 0.0.0.0 \\\n           --apps drive,photos,collect,settings \\\n           --passphrase  XXX  \\\n           mycozy.tld  passphrase  XXX  allows to set the initial password of the instance. You can add other instances by just running this commands again.  The url of your cozy determines the name of your instance.\nIf you choose another public port than the default public port for SSL (443), say  1443 , then you should reflect this when creating your cozy instance with the ${instance_domain} as  mycozy.tld:1443 .", 
            "title": "Running"
        }, 
        {
            "location": "/install/manual/#sample-configuration-files", 
            "text": "", 
            "title": "Sample configuration files"
        }, 
        {
            "location": "/install/manual/#nginx_1", 
            "text": "Put this file into  /etc/nginx/sites-available  and enable it by creating a symlink in  /etc/nginx/sites-enabled . In this template, you need to replace the following placeholders:  %PORT% with the public port nginx will listen to (default should be 443) %SERVER_PORT% with the private port cozy will listen to (default should be 8080) %DOMAIN% with your domain of choice:  mycozy.tld  in this example  server {\n    listen %PORT%;\n\n    server_name *.%DOMAIN%;\n\n    ssl_certificate /etc/cozy/%DOMAIN%.crt;\n    ssl_certificate_key /etc/cozy/%DOMAIN%.key;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers EECDH+AES;\n    ssl_prefer_server_ciphers on;\n    ssl on;\n\n    gzip_vary on;\n    client_max_body_size 1024M;\n\n    add_header Strict-Transport-Security max-age=31536000;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect http:// https://;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection  upgrade ;\n    }\n\n    access_log /var/log/nginx/cozy.log;\n}", 
            "title": "Nginx"
        }, 
        {
            "location": "/install/manual/#todo", 
            "text": "Cozy also requires a SMTP server (or relay).", 
            "title": "TODO"
        }, 
        {
            "location": "/dev/", 
            "text": "Let\ns hack some code\nTutorials\n\n\nintroduction to Cozy architecture\nhow to develop your first application\nhow to develop a connector\nhow to create a mobile application with cordova\n\n\nHow to\nCette documentation sera bient\u00f4t disponible.\nAPI References\nBrowse the full API reference inside our repositories:\nCozy Client JS Reference\n\n\ndocuments\nfiles\nauthentification\nauthentication with OAuth2\nsettings\ninter-app communication\njobs and triggers\nsharing\noffline\nCozy Bar\n\n\nRaw Server API\n\n\n\n\nintroduction:\n\n\n\n\n\nAPI architecture\n\n\nconventions\n\n\nJSON-API\n\n\n\n\n\n\napplications\n: install, update, list applications\n\n\nmerketplace\npermissions\nsettings\nauth\ndocuments\nquery the database\nfiles\nlink files to documents\njobs\nworkers\n architecture\n and \n\nAPI\ninter-application communication\nsharing\nconnectors", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev/#lets-hack-some-code", 
            "text": "", 
            "title": "Let's hack some code"
        }, 
        {
            "location": "/dev/#tutorials", 
            "text": "introduction to Cozy architecture how to develop your first application how to develop a connector how to create a mobile application with cordova", 
            "title": "Tutorials"
        }, 
        {
            "location": "/dev/#how-to", 
            "text": "Cette documentation sera bient\u00f4t disponible.", 
            "title": "How to"
        }, 
        {
            "location": "/dev/#api-references", 
            "text": "Browse the full API reference inside our repositories:", 
            "title": "API References"
        }, 
        {
            "location": "/dev/#cozy-client-js-reference", 
            "text": "documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers sharing offline Cozy Bar", 
            "title": "Cozy Client JS Reference"
        }, 
        {
            "location": "/dev/#raw-server-api", 
            "text": "introduction:   API architecture  conventions  JSON-API    applications : install, update, list applications  merketplace permissions settings auth documents query the database files link files to documents jobs workers  architecture  and  API inter-application communication sharing connectors", 
            "title": "Raw Server API"
        }, 
        {
            "location": "/dev/intro/", 
            "text": "Introduction\nCozy is a personal server hosting applications that allow collect and manipulate all your personal data.\nThere are two kind of applications:\n\n\nweb applications\n: that\ns Single Page Applications (SPA) written in HTML and JavaScript that run inside the user\ns browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails\nconnectors\n: that\ns small application written in JavaScript, running on the server side, that import your data from remote sources.\n\n\nIn this tutorial, you\nll learn how to \nwrite a client application\n and \n\na connector\n.", 
            "title": "Architecture"
        }, 
        {
            "location": "/dev/intro/#introduction", 
            "text": "Cozy is a personal server hosting applications that allow collect and manipulate all your personal data. There are two kind of applications:  web applications : that s Single Page Applications (SPA) written in HTML and JavaScript that run inside the user s browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails connectors : that s small application written in JavaScript, running on the server side, that import your data from remote sources.  In this tutorial, you ll learn how to  write a client application  and  a connector .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev/app/", 
            "text": "How to create your first Cozy application\nPrerequisite\nDeveloping an application for Cozy is quite easy. All you need to know is:\n - how to develop a single page application in HTML5. You can use the tools or framework of your choice, or no framework\n - basic Docker knowledges.\nThe only required tool is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system.\nInstall the development environment\n\n\nOn GNU/Linux, according \nto the documentation\n: \u00ab\u00a0The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at \n\nDocker\u2019s documentation on security\n.\n\n\nEvery application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server.\nThe easiest way is to use the Docker image for developers we provide.\nJust install it:\ndocker pull cozy/cozy-app-dev\n\n\n\n\n(We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running \ndocker pull cozy/cozy-app-dev\n from time to time).\nCreate your first application\nThe minimal application consist of only two files:\n - an HTML file, \nindex.html\n, with the markup and the code of your application\n - a manifest describing the application. It\u2019s a JSON file named \n\nmanifest.webapp\n with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. #TODO add an inner link to the manifest description.\nYour application will be able to use some shared libraries provided by the server, so you don\u2019t have to include them into your project.\nYour application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into \nindex.html\n when it serves the page. So the \n\nindex.html\n file has to contain some string that will be replaced by the server. The general syntax of this variables is \n\n{{\u2026}}\n, so don\u2019t use this syntax for other purpose in the page, for example inside comments.\nYou can use the following variables:\n\n\n{{.Domain}}\n will be substituted by the URL of the API entrypoint\n{{.Token}}\n will be replaced by a token that authenticate your application when accessing the API\n{{.Locale}}\n: the lang f the instance\n{{.AppName}}\n: the name of the application\n{{.IconPath}}\n will be replaced by HTML code to display the \n\nfavicon\n{{.CozyClientJS}}\n will be replaced with HTML code to inject the Cozy client library\n{{.CozyBar}}\n will be replaced with HTML code to inject the upper menu bar.\n\n\nUse the API\nIf you added \n{{.CozyClientJS}}\n to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application):\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n});\n\n\n\n\nYou can then interact with the server by using methods of the \nwindow.cozy.client\n properties. For example, to get current disk usage:\n  cozy.client.settings.diskUsage()\n    .then(function (usage) {console.log(\nUsage (promise)\n, usage);});\n    .catch(function(err){ console.log(\nfail\n, err); });\n\n\n\n\nThis library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline.\nSome server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link.\nBehind the magic\nSome server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Cliznt JS library.\nConnecting to the API requires three things:\n\n\nits URL, injected into the page through the \n{{.Domain}}\n variable\nthe application auth token, injected into the page through the \n{{.Token}}\n variable. Each request sent to the server must include this token in the \n\nAuthorization\n header\nthe session cookie, created when you connect to your server. This is an \nHttpOnly cookie\n, meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie.\n\n\nHere\u2019s a sample code that get API informations provided by the server and query the API:\n    \ndiv data-cozy-token=\n{{.Token}}\n data-cozy-domain=\n{{.Domain}}\n /\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () =\n {\n  \nuse strict\n;\n  const app = document.querySelector('[data-cozy-token]');\n  fetch(`//${app.dataset.cozyDomain}/apps`,\n  {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token\n    },\n    credentials: 'include' // don\u2019t forget to include the session cookie\n  })\n  .then(function (response) {\n    if (response.ok) {\n      response.json().then((result) =\n {\n        console.log(result);\n      });\n    } else {\n      throw new Error('Network response was not ok.');\n    }\n  })\n  .catch(function (error) {\n    console.log('There has been a problem with your fetch operation: ' + error.message);\n  });\n});\n\n\n\n\nThe manifest\nEach application must have a \u201cmanifest\u201d. It\u2019s a JSON file named \nmanifest.webapp\n stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026\nHere\u2019s a sample manifest:\n{\n  \nname\n: \nMy Awesome application\n,\n  \npermissions\n: {\n    \napps\n: {\n      \ntype\n: \nio.cozy.apps\n\n    },\n    \npermissions\n: {\n      \ntype\n: \nio.cozy.permissions\n\n    },\n    \nsettings\n: {\n      \ntype\n: \nio.cozy.settings\n\n    },\n    \nsample\n: {\n      \ntype\n: \nio.cozy.dev.sample\n,\n      \nverbs\n: [\nGET\n, \nPOST\n, \nPUT\n, \nPATCH\n, \nDELETE\n]\n    },\n    \njobs\n: {\n      \ntype\n: \nio.cozy.jobs\n\n    }\n  },\n  \nroutes\n: {\n    \n/\n: {\n      \nfolder\n: \n/\n,\n      \nindex\n: \nindex.html\n,\n      \npublic\n: false\n    },\n    \n/public\n: {\n      \nfolder\n: \n/public\n,\n      \nindex\n: \nindex.html\n,\n      \npublic\n: true\n    }\n  }\n}\n\n\n\n\nPermissions\nApplications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time.\nA permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents.\nIn the manifest, each permission is an object, with a random name and some properties:\n\n\ntype\n: \n\nmandatory\n the document type or action name\ndescription\n: a text that will be displayed to the user to explain why the application require this permission\nverbs\n: an array of HTTP verbs. For example, to limit permissions to read access, use \n\n[\nGET\n]\nselector\n: a document attribute to limit access to a subset of documents\nvalues\n: array of allowed values for this attribute.\n\n\nAn application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API.\nSamples\nApplication require full access to files:\n{\n  \npermissions\n: {\n    \nfiles\n: {\n      \ndescription\n: \n\u2026\n,\n      \ntype\n: \nio.cozy.files\n\n    },\n  }\n}\n\n\n\n\nApplication want to be able to read the contact informations of \ncozy@cozycloud.cc\n{\n  \npermissions\n: {\n    \ncontact\n: {\n      \ntype\n: \nio.cozy.contacts\n,\n      \nverbs\n: [\nGET\n],\n      \nselector\n: \nemail\n,\n      \nvalues\n: [\ncozy@cozycloud.cc\n]\n    }\n  }\n}\n\n\n\n\nRouting\nThe application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties:\n\n\nfolder\n: the base folder of the route\nindex\n: the name of the file inside this folder\npublic\n: a boolean specifying whether the route is public or private (default).\n\n\nSample:\nroutes\n: {\n  \n/admin\n: {\n    \nfolder\n: \n/\n,\n    \nindex\n: \nadmin.html\n,\n    \npublic\n: false\n  },\n  \n/public\n: {\n    \nfolder\n: \n/public\n,\n    \nindex\n: \nindex.html\n,\n    \npublic\n: true\n  },\n  \n/assets\n: {\n    \nfolder\n: \n/assets\n,\n    \npublic\n: true\n  }\n}\n\n\n\n\ncozy-client-js\nThis library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline.\nThe library expose a client API under the \nwindow.cozy.client\n namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application):\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n});\n\n\n\n\nThe library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add \ndisablePromises\n to the options when initializing the library:\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n, disablePromises: true});\n  window.client.settings.diskUsage(function (err, res) {\n    (\u2026)\n  });\n\n\n\n\nRaw API documentation\nIn this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation:\n\n\ndocuments\nfiles\nauthentification\nauthentication with OAuth2\nsettings\ninter-app communication\njobs and triggers\nsharing\noffline\nCozy Bar\n\n\nManipulating documents\nInside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use \nthe Java specification\n. Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by \n\nio.cozy\n or \n\nio.cozy.labs\n. If you don\u2019t own a domain name, and your email address is \n\nfoo@bar.cloud\n, prefix your doctype names with \n\ncloud.bar.foo\n.\nBefore manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically.\nEvery method allowing to handle document are available under the \ncozy.client.data\n namespace. For example:\n\n\ncozy.client.data.create(doctype, attributes)\n, \n\ncozy.client.data.update(doctype, doc, newdoc)\n, \n\ncozy.client.data.delete(doctype, doc)\n to create, update and delete documents\ncozy.client.data.updateAttributes(doctype, id, changes)\n to only update some attributes of a document\ncozy.client.data.find(doctype, id)\n return a document using its ident\ncozy.client.data.changesFeed(doctype, options)\n get the latests updates of documents of a doctype.\nyou can attach files to a document using \ncozy.client.data.addReferencedFiles(doc, fileIds)\n and list attachments with \n\ncozy.client.data.listReferencedFiles(doc)\n.\n\n\nQuerying\nTo search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods:\n\n\ncozy.client.data.defineIndex(doctype, fields)\n to create the index\ncozy.client.data.query(indexReference, query)\n to query an index. The query parameter uses the syntax of the \n\nMango API\n from CouchDB 2.\n\n\nFor example, to search contacts by their email address, you could use:\ncozy.client.data.defineIndex(\nio.cozy.contacts\n, [\nemail\n])\n.then((index) =\n {\n  return cozy.data.query(index, {\nselector\n: {email: \ncozy@cozycloud.cc\n}})\n})\n.then( (result) =\n {\n  console.log(result[0].name);\n});\n\n\n\n\nManipulating files\nThe metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system.\nThe library offer a lot of methods under \ncozy.client.files\n namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the \n\nraw API documentation\n:\n\n\ncreate()\n and \n\nupdateById()\n to create and update a file\ncreateDirectory()\n to create a folder\nupdateAttributesById()\n et \n\nupdateAttributesByPath()\n allow to update some metadata\nuse \ndestroyById\n to remove a file\na virtual trash is available. You can put files into the trash (\ntrashById()\n) and restore them (\n\nrestoreById()\n). You can also list the content of the trash (\n\nlistTrash()\n) and purge all trashed files (\n\nclearTrash()\n)\nstatById(id)\n et \n\nstatByPath(path)\n return the metadata and, or folders, their content\n\n\nFolders\nWhen using \nstatById()\n or \n\nstatByPath()\n to get metadata of of folder, you can than call \n\nrelations()\n on the resulting object to access their content. For example, to list content of the root folder, use:\ncozy.client.files.statByPath(\n/\n)\n.then((dir) =\n {\n  console.log(dir.relations(\ncontents\n));\n})\n\n\n\n\nSome special folder have a pre-defined id that will never change:\n\n\nio.cozy.files.root-dir\n is the root of the filesystem\nio.cozy.files.trash-dir\n is the trash.\n\n\nThe Cozy Bar\nThe \nCozy Bar\n is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing.\nYour application interacts with this component through \ncozy-bar.js\n, a library injected into your pages by the server when you add \n\n{{.CozyBar}}\n in the header. It exposes an API behind the window.cozy.bar namespace.\nBefore using it, you have to initialize the library: \nwindow.cozy.bar.init({appName: \nMon application\n})\n.\nStyling\nIf you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then \nCozy UI\n is here for you!\nIt relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box.\nStart the development server\nNow it\u2019s time to start the development server, to test our application.\n(remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use \nsudo\n to run each of this commands.)\nTo run your application inside the development server, just run the following command from the folder where your \nindex.html\n and \n\nmanifest.webapp\n files leave:\ndocker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev\n\n\n\n\nLet\u2019s have a quick look at this command, so you can adapt it to your needs:\n\n\nrm\n will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images\n-it\n allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server\n-p 8080:8080\n: the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use \n\n-p 9090:8080\n-p 5984:5984\n: this is just a convenient way to access the CouchDB database running inside the server. Point your browser to \n\nhttp://cozy.tools:5984/_utils/\n to access its administrative interface\n-p 8025:8025\n\u00a0: Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to \n\nhttp://cozy.tools:8025/\n to display the messages sent by the server\n-v $(pwd):/data/cozy-app\n this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server\nname cozydev\n name the running virtual machine \n\ncozydev\n, so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use \n\ndocker exec -ti /bin/bash\n.\n\n\nWith this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database.\nHowever, if you want to persist data, you have to mount two folders from the virtual server to local folders: \n/usr/local/couchdb/data\n (database) and \n\n/data/cozy-storage\n (the virtual filesystem). This can be achieved by adding to the command line \n\n-v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage\n which will store the server\u2019s data into \n\n~/cozy/data\n.\nOnce the server started, go to \nhttp://app.cozy.tools:8080/#\n, connect to the server with the default password \n\ncozy\n and you should be able to start testing your application.\nYou can also access the following URLs:\n\n\nhttp://cozy.tools:5984/_utils\n to get the database administrative panel\nhttp://cozy.tools:8025/\n to display the emails sent by the server.\n\n\nTest multiple applications\nYou can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of \n/data/cozy-apps\n. For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in \n\n~/cozy/drive\n and \n\n~/cozy/photos\n, start the development server with:\ndocker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v \n~/cozy/drive\n:/data/cozy-app/drive\n -v \n~/cozy/photos:/data-cozy-app/photos\n --name=cozydev cozy/cozy-app-dev\n\n\n\n\nYou\u2019ll access the applications by connecting to \nhttp://drive.cozy.tools:8080/\n and \n\nhttp://photos.cozy.tools:8080\n.\nTODO\nCe serveur de d\u00e9veloppement utilise les noms de domaine \n*.cozy.tools\n. Nous avons param\u00e9tr\u00e9 ce domaine pour qu\u2019il pointe toujours vers \n\n127.0.0.1\n, l\u2019adresse de votre machine locale.\nLa branche \nsample\n du d\u00e9p\u00f4t de cette documentation contient un squelette minimaliste avec les fichiers n\u00e9cessaires pour cr\u00e9er une application. Vous pouvez les r\u00e9cup\u00e9rer en faisant\u00a0:\ngit clone -b sample https://github.com/cozy/cozy-docdev-v3.git myapp\ncd myapp", 
            "title": "Cr\u00e9ez votre premi\u00e8re application"
        }, 
        {
            "location": "/dev/app/#how-to-create-your-first-cozy-application", 
            "text": "", 
            "title": "How to create your first Cozy application"
        }, 
        {
            "location": "/dev/app/#prerequisite", 
            "text": "Developing an application for Cozy is quite easy. All you need to know is:\n - how to develop a single page application in HTML5. You can use the tools or framework of your choice, or no framework\n - basic Docker knowledges. The only required tool is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system.", 
            "title": "Prerequisite"
        }, 
        {
            "location": "/dev/app/#install-the-development-environment", 
            "text": "On GNU/Linux, according  to the documentation : \u00ab\u00a0The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at  Docker\u2019s documentation on security .  Every application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server. The easiest way is to use the Docker image for developers we provide. Just install it: docker pull cozy/cozy-app-dev  (We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running  docker pull cozy/cozy-app-dev  from time to time).", 
            "title": "Install the development environment"
        }, 
        {
            "location": "/dev/app/#create-your-first-application", 
            "text": "The minimal application consist of only two files:\n - an HTML file,  index.html , with the markup and the code of your application\n - a manifest describing the application. It\u2019s a JSON file named  manifest.webapp  with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. #TODO add an inner link to the manifest description. Your application will be able to use some shared libraries provided by the server, so you don\u2019t have to include them into your project. Your application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into  index.html  when it serves the page. So the  index.html  file has to contain some string that will be replaced by the server. The general syntax of this variables is  {{\u2026}} , so don\u2019t use this syntax for other purpose in the page, for example inside comments. You can use the following variables:  {{.Domain}}  will be substituted by the URL of the API entrypoint {{.Token}}  will be replaced by a token that authenticate your application when accessing the API {{.Locale}} : the lang f the instance {{.AppName}} : the name of the application {{.IconPath}}  will be replaced by HTML code to display the  favicon {{.CozyClientJS}}  will be replaced with HTML code to inject the Cozy client library {{.CozyBar}}  will be replaced with HTML code to inject the upper menu bar.", 
            "title": "Create your first application"
        }, 
        {
            "location": "/dev/app/#use-the-api", 
            "text": "If you added  {{.CozyClientJS}}  to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application):   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 });  You can then interact with the server by using methods of the  window.cozy.client  properties. For example, to get current disk usage:   cozy.client.settings.diskUsage()\n    .then(function (usage) {console.log( Usage (promise) , usage);});\n    .catch(function(err){ console.log( fail , err); });  This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link.", 
            "title": "Use the API"
        }, 
        {
            "location": "/dev/app/#behind-the-magic", 
            "text": "Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Cliznt JS library. Connecting to the API requires three things:  its URL, injected into the page through the  {{.Domain}}  variable the application auth token, injected into the page through the  {{.Token}}  variable. Each request sent to the server must include this token in the  Authorization  header the session cookie, created when you connect to your server. This is an  HttpOnly cookie , meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie.  Here\u2019s a sample code that get API informations provided by the server and query the API:      div data-cozy-token= {{.Token}}  data-cozy-domain= {{.Domain}}  /  document.addEventListener('DOMContentLoaded', () =  {\n   use strict ;\n  const app = document.querySelector('[data-cozy-token]');\n  fetch(`//${app.dataset.cozyDomain}/apps`,\n  {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token\n    },\n    credentials: 'include' // don\u2019t forget to include the session cookie\n  })\n  .then(function (response) {\n    if (response.ok) {\n      response.json().then((result) =  {\n        console.log(result);\n      });\n    } else {\n      throw new Error('Network response was not ok.');\n    }\n  })\n  .catch(function (error) {\n    console.log('There has been a problem with your fetch operation: ' + error.message);\n  });\n});", 
            "title": "Behind the magic"
        }, 
        {
            "location": "/dev/app/#the-manifest", 
            "text": "Each application must have a \u201cmanifest\u201d. It\u2019s a JSON file named  manifest.webapp  stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026 Here\u2019s a sample manifest: {\n   name :  My Awesome application ,\n   permissions : {\n     apps : {\n       type :  io.cozy.apps \n    },\n     permissions : {\n       type :  io.cozy.permissions \n    },\n     settings : {\n       type :  io.cozy.settings \n    },\n     sample : {\n       type :  io.cozy.dev.sample ,\n       verbs : [ GET ,  POST ,  PUT ,  PATCH ,  DELETE ]\n    },\n     jobs : {\n       type :  io.cozy.jobs \n    }\n  },\n   routes : {\n     / : {\n       folder :  / ,\n       index :  index.html ,\n       public : false\n    },\n     /public : {\n       folder :  /public ,\n       index :  index.html ,\n       public : true\n    }\n  }\n}", 
            "title": "The manifest"
        }, 
        {
            "location": "/dev/app/#permissions", 
            "text": "Applications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time. A permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents. In the manifest, each permission is an object, with a random name and some properties:  type :  mandatory  the document type or action name description : a text that will be displayed to the user to explain why the application require this permission verbs : an array of HTTP verbs. For example, to limit permissions to read access, use  [ GET ] selector : a document attribute to limit access to a subset of documents values : array of allowed values for this attribute.  An application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API.", 
            "title": "Permissions"
        }, 
        {
            "location": "/dev/app/#samples", 
            "text": "Application require full access to files: {\n   permissions : {\n     files : {\n       description :  \u2026 ,\n       type :  io.cozy.files \n    },\n  }\n}  Application want to be able to read the contact informations of  cozy@cozycloud.cc {\n   permissions : {\n     contact : {\n       type :  io.cozy.contacts ,\n       verbs : [ GET ],\n       selector :  email ,\n       values : [ cozy@cozycloud.cc ]\n    }\n  }\n}", 
            "title": "Samples"
        }, 
        {
            "location": "/dev/app/#routing", 
            "text": "The application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties:  folder : the base folder of the route index : the name of the file inside this folder public : a boolean specifying whether the route is public or private (default).  Sample: routes : {\n   /admin : {\n     folder :  / ,\n     index :  admin.html ,\n     public : false\n  },\n   /public : {\n     folder :  /public ,\n     index :  index.html ,\n     public : true\n  },\n   /assets : {\n     folder :  /assets ,\n     public : true\n  }\n}", 
            "title": "Routing"
        }, 
        {
            "location": "/dev/app/#cozy-client-js", 
            "text": "This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. The library expose a client API under the  window.cozy.client  namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application):   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 });  The library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add  disablePromises  to the options when initializing the library:   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 , disablePromises: true});\n  window.client.settings.diskUsage(function (err, res) {\n    (\u2026)\n  });", 
            "title": "cozy-client-js"
        }, 
        {
            "location": "/dev/app/#raw-api-documentation", 
            "text": "In this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation:  documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers sharing offline Cozy Bar", 
            "title": "Raw API documentation"
        }, 
        {
            "location": "/dev/app/#manipulating-documents", 
            "text": "Inside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use  the Java specification . Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by  io.cozy  or  io.cozy.labs . If you don\u2019t own a domain name, and your email address is  foo@bar.cloud , prefix your doctype names with  cloud.bar.foo . Before manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically. Every method allowing to handle document are available under the  cozy.client.data  namespace. For example:  cozy.client.data.create(doctype, attributes) ,  cozy.client.data.update(doctype, doc, newdoc) ,  cozy.client.data.delete(doctype, doc)  to create, update and delete documents cozy.client.data.updateAttributes(doctype, id, changes)  to only update some attributes of a document cozy.client.data.find(doctype, id)  return a document using its ident cozy.client.data.changesFeed(doctype, options)  get the latests updates of documents of a doctype. you can attach files to a document using  cozy.client.data.addReferencedFiles(doc, fileIds)  and list attachments with  cozy.client.data.listReferencedFiles(doc) .", 
            "title": "Manipulating documents"
        }, 
        {
            "location": "/dev/app/#querying", 
            "text": "To search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods:  cozy.client.data.defineIndex(doctype, fields)  to create the index cozy.client.data.query(indexReference, query)  to query an index. The query parameter uses the syntax of the  Mango API  from CouchDB 2.  For example, to search contacts by their email address, you could use: cozy.client.data.defineIndex( io.cozy.contacts , [ email ])\n.then((index) =  {\n  return cozy.data.query(index, { selector : {email:  cozy@cozycloud.cc }})\n})\n.then( (result) =  {\n  console.log(result[0].name);\n});", 
            "title": "Querying"
        }, 
        {
            "location": "/dev/app/#manipulating-files", 
            "text": "The metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system. The library offer a lot of methods under  cozy.client.files  namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the  raw API documentation :  create()  and  updateById()  to create and update a file createDirectory()  to create a folder updateAttributesById()  et  updateAttributesByPath()  allow to update some metadata use  destroyById  to remove a file a virtual trash is available. You can put files into the trash ( trashById() ) and restore them ( restoreById() ). You can also list the content of the trash ( listTrash() ) and purge all trashed files ( clearTrash() ) statById(id)  et  statByPath(path)  return the metadata and, or folders, their content", 
            "title": "Manipulating files"
        }, 
        {
            "location": "/dev/app/#folders", 
            "text": "When using  statById()  or  statByPath()  to get metadata of of folder, you can than call  relations()  on the resulting object to access their content. For example, to list content of the root folder, use: cozy.client.files.statByPath( / )\n.then((dir) =  {\n  console.log(dir.relations( contents ));\n})  Some special folder have a pre-defined id that will never change:  io.cozy.files.root-dir  is the root of the filesystem io.cozy.files.trash-dir  is the trash.", 
            "title": "Folders"
        }, 
        {
            "location": "/dev/app/#the-cozy-bar", 
            "text": "The  Cozy Bar  is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing. Your application interacts with this component through  cozy-bar.js , a library injected into your pages by the server when you add  {{.CozyBar}}  in the header. It exposes an API behind the window.cozy.bar namespace. Before using it, you have to initialize the library:  window.cozy.bar.init({appName:  Mon application }) .", 
            "title": "The Cozy Bar"
        }, 
        {
            "location": "/dev/app/#styling", 
            "text": "If you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then  Cozy UI  is here for you! It relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box.", 
            "title": "Styling"
        }, 
        {
            "location": "/dev/app/#start-the-development-server", 
            "text": "Now it\u2019s time to start the development server, to test our application. (remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use  sudo  to run each of this commands.) To run your application inside the development server, just run the following command from the folder where your  index.html  and  manifest.webapp  files leave: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev  Let\u2019s have a quick look at this command, so you can adapt it to your needs:  rm  will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images -it  allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server -p 8080:8080 : the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use  -p 9090:8080 -p 5984:5984 : this is just a convenient way to access the CouchDB database running inside the server. Point your browser to  http://cozy.tools:5984/_utils/  to access its administrative interface -p 8025:8025 \u00a0: Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to  http://cozy.tools:8025/  to display the messages sent by the server -v $(pwd):/data/cozy-app  this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server name cozydev  name the running virtual machine  cozydev , so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use  docker exec -ti /bin/bash .  With this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database. However, if you want to persist data, you have to mount two folders from the virtual server to local folders:  /usr/local/couchdb/data  (database) and  /data/cozy-storage  (the virtual filesystem). This can be achieved by adding to the command line  -v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage  which will store the server\u2019s data into  ~/cozy/data . Once the server started, go to  http://app.cozy.tools:8080/# , connect to the server with the default password  cozy  and you should be able to start testing your application. You can also access the following URLs:  http://cozy.tools:5984/_utils  to get the database administrative panel http://cozy.tools:8025/  to display the emails sent by the server.", 
            "title": "Start the development server"
        }, 
        {
            "location": "/dev/app/#test-multiple-applications", 
            "text": "You can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of  /data/cozy-apps . For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in  ~/cozy/drive  and  ~/cozy/photos , start the development server with: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v  ~/cozy/drive :/data/cozy-app/drive  -v  ~/cozy/photos:/data-cozy-app/photos  --name=cozydev cozy/cozy-app-dev  You\u2019ll access the applications by connecting to  http://drive.cozy.tools:8080/  and  http://photos.cozy.tools:8080 .", 
            "title": "Test multiple applications"
        }, 
        {
            "location": "/dev/app/#todo", 
            "text": "Ce serveur de d\u00e9veloppement utilise les noms de domaine  *.cozy.tools . Nous avons param\u00e9tr\u00e9 ce domaine pour qu\u2019il pointe toujours vers  127.0.0.1 , l\u2019adresse de votre machine locale. La branche  sample  du d\u00e9p\u00f4t de cette documentation contient un squelette minimaliste avec les fichiers n\u00e9cessaires pour cr\u00e9er une application. Vous pouvez les r\u00e9cup\u00e9rer en faisant\u00a0: git clone -b sample https://github.com/cozy/cozy-docdev-v3.git myapp\ncd myapp", 
            "title": "TODO"
        }, 
        {
            "location": "/dev/konnector/", 
            "text": "How to write a connector\nIntroduction\nNew! Want an interactive tutorial on how to create a connector? Try \nthis one\n:\nA connector is a small script that allows to import data from an external website. Each connector is an independent application, managed by the Cozy Collect application.\nTo protect your data, each connector runs inside a sandbox where all their interactions with your data are under control.\nFrom a technical point of view, connectors are Node.js applications executed inside a container. They communicate with the server using its API, like client side apps, and get an auth token every time they start. They need to register with a manifest, and ask permissions to the user.\nTo ease the development of a connector, an npm package, named \ncozy-connector-libs\n provides a lot of\nshared libraries. But you may need some other npm packages to help you running your connector: \n\n\ncheerio\n to manipulate the DOM on remote web pages\u00a0\nmoment\n to manage dates\u00a0\nrequest\n for fetching remote URLs\u00a0\n\n\nWhen the application is started, it also gets some data through environment variables:\n\n\nCOZY_CREDENTIALS\n\u00a0: the auth token used by \n\ncozy-client-js\n to communicate with the server\u00a0\nCOZY_URL\n\u00a0: the API entry point\u00a0\nCOZY_FIELD\n\u00a0: the settings specific to each connector, for example the path of folder where the user wants to store the remote files\u00a0\n\n\nBut the base connector (\nrequire(\ncozy-konnector-libs\n).baseKonnector\n) in cozy-konnector-libs handles these for you.\nThe application can access a temporary file system, deleted at the end of its execution. Its logs (standard and error output) are kept by the server.\nFrom the server point of view, each connector is a \njob\n run through a \n\ntrigger\n.\nLet\u2019s create our first connector\nThe easiest way to create a new connector is to use \nour template\n:\ngit clone https://github.com/cozy/cozy-konnector-template\ncd cozy-konnector-template\nyarn # or npm install\n\n\n\n\nnote: the Cozy Team uses \nyarn\n, but if you prefer \nnpm\n, just keep using it, everything should just work.\nThen, write your code into \nkonnectors.js\n and build the application, running \n\nyarn build\n or \n\nnpm run build\n.\nCollector structure\nBasically, a connector is just an object passed to baseKonnector.createNew:\n\n\nfetchOperations\n: array of methods that will be called sequentially to fetch the data\n\n\nTo create the connector, just call \nbaseKonnector.createNew()\n from the Cozy Collector lib, with an object describing the connector:\nconst {baseKonnector, filterExisting, saveDataAndFile, models} = require(\ncozy-konnector-libs\n);\nconst Kitten = models.baseModel.createNew({\n  name: \nkitten\n\n});\n\nmodule.exports = baseKonnector.createNew({\n  name: \nkitten\n,\n  models: [],\n  fetchOperations: [\n    fetchKittens,\n    customFilterExisting,\n    customSaveDataAndFile\n  ]\n});\n\n\n\n\nFetch operations\nEvery time the connector is run, it will call every method from the \nfetchOperations\n array. Use this methods to log into the remote site, fetch data and save it.\nEach function must use the same signature: \nfunctionName(fields, bills, data, next)\n where:\n\n\nfields\n are the values of the optional configuration fields\nentries\n is an object to pass data from one function to the next one\ndata\n allows to pass raw data from one function to the next one\nnext\n is a function to call to execute next function. One may pass an error as first argument. Don\u2019t forget to call it at the end of every step.\n\n\nA basic connector workflow involves:\n - getting data and storing them into \nentries.fetched\n. You can get the data by calling an API, scraping the remote website\u2026\n - filtering data to remove the ones already present inside the database. The filtered data will be put into \n\nentries.filtered\n\n - save the filtered data into the database.\nMany operations are common to most of the connectors, so we created some common functions you can import from the shared library. Most of the time, you\u2019ll just have to take care of fetching data, store them into \nentries.fetched\n then use the common methods to filter and save them.\nWe\u2019ll have a deeper look at this methods below.\nError handling\nIf your connector hit some issue fetching or saving the data, it can return an error code by passing it to the \nnext\n method. Some error code are defined inside the Cozy Collect application and will display an explicit error to the user:\n\n\nLOGIN_FAILED\n: the konnector could not login\nNOT_EXISTING_DIRECTORY\n: the folder specified as folder_to_save does not exist (checked by base_konnector)\nUNKNOWN_ERROR\n: there was an unexpected error, please take a look at the logs to know what appened\n\n\nKonnector lib\nThe Cozy Konnector Lib provide some useful methods for common tasks:\n\n\nbaseKonnector.createNew()\n: create the connector and fetch data\ncozyClient\n gives an instance of cozy-client-js already initialized according to COZY_URL, and\n   COZY_CREDENTIALS\nfetcher\n is the internal class that run fetching operations in sequence, calling the functions with the right parameters\nlog(type, message)\n allows to log messages\nmanifest\n extracts informations from the manifest (mainly used internaly at the moment)\nnaming\n is a method allowing to build file names according to parameters\nfilterExisting\n to filter data\nlinkBankOperation\n to link a bill to a bank operation\nsaveDataAndFile\n save the data\nupdateOrCreate\n create or update documents inside database\n\n\nThere are also some models available in require(\ncozy-konnector-libs\n).models :\n\n\nbaseModel\n : which is a model from which your model can extend using it\ns \n\ncreateNew\n method.\n   It offers the \n\nall\n, \n\ncreate\n, and \n\nupdateAttributes\n methods already implemented.\nbill\n : Offers an already implemented model allowing to manipulate \nio.cozy.bills\n doctype. It is used by many connectors.\nfile\n : a helper to manipulate files\nfolder\n : a helper to manipulate folders\nbankOperation\n : a helper to manipulate bank operations\n\n\nCommon methods\n cozyClient() \nIf you want to access cozy-client-js directly, this method gives you directly an instance of it,\ninitialized according to COZY_URL and COZY_CREDENTIALS environment variable.\nYou can refer to the \ncozy-client-js documentation\n for more information.\nconst {clientClient} = require('cozy-konnector-libs')\n\ncozyClient.data.defineIndex('my.doctype', ['_id'])\n\n\n\n\n filterExisting(log, model, suffix, vendor) \nThis method returns a fetch function that filter data fetched from the remote site to only keep the ones that don\u2019t exist in database. The fetched data are expected to be in the \nentries.fetched\n array. The resulting array will be put into \n\nentries.filtered\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility)\nmodel\n: the model\nsuffix\n: unused (kept for retro-compatibility)\nvendor\n: if a vendor parameter is given, entry should be of given vendor to be added to the hash (useful for bills).\n\n\nkonnector.fetchOperations = [ (\u2026), customFilterExisting, (\u2026) ];\n\nfunction customFilterExisting(requiredFields, entries, data, next) {\n  filterExisting(myKonnector.logger, Bill) (requiredFields, entries, data, next);\n}\n\n\n\n\n saveDataAndFile(logger, model, options, tags) \nThis method returns a fetch function that creates an object in database for each item in \nentries.filtered\n array. If item has a \n\npdfurl\n attribute, the remote file will be downloaded and stored on the filesystem. \n\npdfUrl\n can point to any file, not necessarily a PDF file. The name comes from legacy code and has not been updated.\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility)\nmodel\n: the model\noptions\n:\ntags\n: array of tags to apply to created files.\n\n\n updateOrCreate(logger, model, filter, options)` \nThis method return a fetch function that creates or updates an object in database for each item in the \nentries[model.displayName]\n array. The filter parameters specifies the fields used to find the document inside the database.\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility)\nmodel\n: the model\nfilters\n: an array of fields names\ntags\n: array of tags to apply to created files.\n\n\n linkBankOperation \nThis method returns a fetch function that will try to link a bill to a bank operation. For each data item from \nentries.fetched\n, it will look for an operation that could match this entry. Once found, it attaches a binary to the bank operation. It\u2019s the same binary that is attached to the corresponding file object.\nThe criteria to find a matching operation are:\n\n\nOperation label should contain one of the identifiers given in parameter\nThe date should be between (bill date - \ndateDelta\n) and (bill date + \n\ndateDelta\n). Where \n\ndateDelta\n is given as a parameter and is in days\nThe amount should be between (bill amount - \namountDelta\n) and (bill amount + \n\namountDelta\n). Where \n\namountDelta\n is given as a parameter.\n\n\nParameters:\nYou should pass parameters as an object whose keys are:\n\n\nlog\n: unused (kept for retro-compatibility)\nmodel\n: a model object to check for.\nidentifier\n: a string or an array of strings to look for in the operation label (case insensitive: the layer will automatically set it to lowercase).\ndateDelta\n: the number of days allowed between the bank operation date and the bill date  (15 by default). \namountDelta\n: the difference between the bank operation amount and the bill amount (useful when the currency is not the same) (0 by default).\nisRefund\n: boolean telling if the operation is a refund or not. By default, it is \n\nfalse\n. Allows to match only operations with positive amount if set to \n\ntrue\n.\n\n\nCommon data models\nThe library includes the most used data model, so you can just require them if you need them:\n\n\nbankOperation\nbill\nfile\nfolder\n\n\nThe library also provide a \nbaseModel\n class to create your own data model. Each model inherits from the following methods:\n\n\nall(callback)\n fetch all documents\ncreate(entry, callback)\n creates a new document\nupdateAttributes(id, changes, callback)\n update the attributes of a document.\n\n\nconst { models: { baseModel } } = require(\u2019cozy-konnector-libs\u2019)\n\nmodule.exports = baseModel.createNew({\n    displayName: \nmyModel\n,\n    name: \nme.cozy.mymodel\n\n});\n\n\n\n\nThe manifest\nEach connector is described by a Manifest. This is a JSON file named \nmanifest.konnector\n at the root of your code folder. It should include the following information:\n\n\nname\n: \u2026\nslug\n: the internal name of the application\ntype\n: for now, the only allowed value is \n\nnode\n. In the future, we may support other types of connectors\nversion\n: \nsource\n: git URL of the source code repository\nfields\n: @TODO\nlocales\n: @TODO\npermissions\n: an object describing the permissions the connector requires\ndeveloper\n: who are you?\nname\n: \nurl\n: \n\n\nPermissions\nTODO See documentation of the manifest of an application\nThe connector parameters are stored in \nio.cozy.accounts\n documents, so each connector should get access to this doctype.\nFAQ\nHow do I scrap a website\nYou will require the \nrequest\n and \n\ncheerio\n npm packages:\nyarn add cheerio request # or npm install --save cheerio request\n\n\n\n\nHere\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill:\nfunction fetchBill(requiredFields, entries, data, next) {\n  'use strict';\n  next();\n  // Create a request instance that keep cookies between requests and follow redirects\n  let request = require('request').defaults({jar: true, followRedirect: true, followAllRedirects: true}),\n      cheerio = require('cheerio'),\n      moment  = require('moment');\n  // Get the login page to get the CSRF token\n  request(\nhttps://login.remote.web\n, function (err, res, html) {\n    if (err) {\n      return next(err.message);\n    }\n    // Post the form\n    let $ = cheerio.load(html),\n        form = {\n          form: {\n            login: requiredFields.login,\n            password: requiredFields.password,\n            csrf_token: $('[name=\ncsrf_token\n]').val(),\n          }\n        };\n    request.post('https://login.remote.web', form, function (err, res, html) {\n      if (err) {\n        return next(err.message);\n      }\n      request(\nhttps://admin.remote.web/bills\n, function (err, res, html) {\n        if (err) {\n          return next(err.message);\n        }\n        entries.fetched = [{date: moment($(\nbill_date\n)), value: $(\n#bill_value\n)}];\n        next();\n      });\n    });\n  });\n}\n\n\n\n\nThe whole connector will be as simple as:\nconst {baseKonnector, filterExisting, saveDataAndFile, models} = require(\ncozy-konnector-libs\n),\n      MyBills = models.baseModel.createNew({\n          name: \nme.mycozy.mybill\n\n      });\n\nfunction fetchBill(requiredFields, entries, data, next) {\n  (\u2026);\n}\n\nmodule.exports = baseKonnector.createNew({\n  name: 'me.mycozy.mybill',\n  fetchOperations: [\n    fetchBill,\n    filterExisting(null, MyBills),\n    saveDataAndFile(null, MyBills, {})\n  ]\n});\n\n\n\n\nTesting\nRunning in standalone mode\nTo ease the development, you don\u2019t need a running Cozy server to test your code. We provide a standalone mode, that mocks the server. This mode uses a configuration file to define the environment variables that the server will send to your application in production. So, start by copying \ndata/env_fields.json.template\n to \n\ndata/env_fields.json\n and set the parameters your application requires. Then start it with \n\nyarn standalone\n or \n\nnpm run standalone\n.\nIn standalone mode, saving a file will put it into the \ndata\n folder at the root of your repository. If you need to query the database, put your mock data into \n\ndata/fixture.json\n. Also, fetched data will just be outputted to the console instead of being sent to the database.", 
            "title": "Cr\u00e9ez votre premier connecteur"
        }, 
        {
            "location": "/dev/konnector/#how-to-write-a-connector", 
            "text": "", 
            "title": "How to write a connector"
        }, 
        {
            "location": "/dev/konnector/#introduction", 
            "text": "New! Want an interactive tutorial on how to create a connector? Try  this one : A connector is a small script that allows to import data from an external website. Each connector is an independent application, managed by the Cozy Collect application. To protect your data, each connector runs inside a sandbox where all their interactions with your data are under control. From a technical point of view, connectors are Node.js applications executed inside a container. They communicate with the server using its API, like client side apps, and get an auth token every time they start. They need to register with a manifest, and ask permissions to the user. To ease the development of a connector, an npm package, named  cozy-connector-libs  provides a lot of\nshared libraries. But you may need some other npm packages to help you running your connector:   cheerio  to manipulate the DOM on remote web pages\u00a0 moment  to manage dates\u00a0 request  for fetching remote URLs\u00a0  When the application is started, it also gets some data through environment variables:  COZY_CREDENTIALS \u00a0: the auth token used by  cozy-client-js  to communicate with the server\u00a0 COZY_URL \u00a0: the API entry point\u00a0 COZY_FIELD \u00a0: the settings specific to each connector, for example the path of folder where the user wants to store the remote files\u00a0  But the base connector ( require( cozy-konnector-libs ).baseKonnector ) in cozy-konnector-libs handles these for you. The application can access a temporary file system, deleted at the end of its execution. Its logs (standard and error output) are kept by the server. From the server point of view, each connector is a  job  run through a  trigger .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev/konnector/#lets-create-our-first-connector", 
            "text": "The easiest way to create a new connector is to use  our template : git clone https://github.com/cozy/cozy-konnector-template\ncd cozy-konnector-template\nyarn # or npm install  note: the Cozy Team uses  yarn , but if you prefer  npm , just keep using it, everything should just work. Then, write your code into  konnectors.js  and build the application, running  yarn build  or  npm run build .", 
            "title": "Let\u2019s create our first connector"
        }, 
        {
            "location": "/dev/konnector/#collector-structure", 
            "text": "Basically, a connector is just an object passed to baseKonnector.createNew:  fetchOperations : array of methods that will be called sequentially to fetch the data  To create the connector, just call  baseKonnector.createNew()  from the Cozy Collector lib, with an object describing the connector: const {baseKonnector, filterExisting, saveDataAndFile, models} = require( cozy-konnector-libs );\nconst Kitten = models.baseModel.createNew({\n  name:  kitten \n});\n\nmodule.exports = baseKonnector.createNew({\n  name:  kitten ,\n  models: [],\n  fetchOperations: [\n    fetchKittens,\n    customFilterExisting,\n    customSaveDataAndFile\n  ]\n});", 
            "title": "Collector structure"
        }, 
        {
            "location": "/dev/konnector/#fetch-operations", 
            "text": "Every time the connector is run, it will call every method from the  fetchOperations  array. Use this methods to log into the remote site, fetch data and save it. Each function must use the same signature:  functionName(fields, bills, data, next)  where:  fields  are the values of the optional configuration fields entries  is an object to pass data from one function to the next one data  allows to pass raw data from one function to the next one next  is a function to call to execute next function. One may pass an error as first argument. Don\u2019t forget to call it at the end of every step.  A basic connector workflow involves:\n - getting data and storing them into  entries.fetched . You can get the data by calling an API, scraping the remote website\u2026\n - filtering data to remove the ones already present inside the database. The filtered data will be put into  entries.filtered \n - save the filtered data into the database. Many operations are common to most of the connectors, so we created some common functions you can import from the shared library. Most of the time, you\u2019ll just have to take care of fetching data, store them into  entries.fetched  then use the common methods to filter and save them. We\u2019ll have a deeper look at this methods below.", 
            "title": "Fetch operations"
        }, 
        {
            "location": "/dev/konnector/#error-handling", 
            "text": "If your connector hit some issue fetching or saving the data, it can return an error code by passing it to the  next  method. Some error code are defined inside the Cozy Collect application and will display an explicit error to the user:  LOGIN_FAILED : the konnector could not login NOT_EXISTING_DIRECTORY : the folder specified as folder_to_save does not exist (checked by base_konnector) UNKNOWN_ERROR : there was an unexpected error, please take a look at the logs to know what appened", 
            "title": "Error handling"
        }, 
        {
            "location": "/dev/konnector/#konnector-lib", 
            "text": "The Cozy Konnector Lib provide some useful methods for common tasks:  baseKonnector.createNew() : create the connector and fetch data cozyClient  gives an instance of cozy-client-js already initialized according to COZY_URL, and\n   COZY_CREDENTIALS fetcher  is the internal class that run fetching operations in sequence, calling the functions with the right parameters log(type, message)  allows to log messages manifest  extracts informations from the manifest (mainly used internaly at the moment) naming  is a method allowing to build file names according to parameters filterExisting  to filter data linkBankOperation  to link a bill to a bank operation saveDataAndFile  save the data updateOrCreate  create or update documents inside database  There are also some models available in require( cozy-konnector-libs ).models :  baseModel  : which is a model from which your model can extend using it s  createNew  method.\n   It offers the  all ,  create , and  updateAttributes  methods already implemented. bill  : Offers an already implemented model allowing to manipulate  io.cozy.bills  doctype. It is used by many connectors. file  : a helper to manipulate files folder  : a helper to manipulate folders bankOperation  : a helper to manipulate bank operations", 
            "title": "Konnector lib"
        }, 
        {
            "location": "/dev/konnector/#common-methods", 
            "text": "cozyClient()  If you want to access cozy-client-js directly, this method gives you directly an instance of it,\ninitialized according to COZY_URL and COZY_CREDENTIALS environment variable.\nYou can refer to the  cozy-client-js documentation  for more information. const {clientClient} = require('cozy-konnector-libs')\n\ncozyClient.data.defineIndex('my.doctype', ['_id'])   filterExisting(log, model, suffix, vendor)  This method returns a fetch function that filter data fetched from the remote site to only keep the ones that don\u2019t exist in database. The fetched data are expected to be in the  entries.fetched  array. The resulting array will be put into  entries.filtered Parameters:  log : unused (kept for retro-compatibility) model : the model suffix : unused (kept for retro-compatibility) vendor : if a vendor parameter is given, entry should be of given vendor to be added to the hash (useful for bills).  konnector.fetchOperations = [ (\u2026), customFilterExisting, (\u2026) ];\n\nfunction customFilterExisting(requiredFields, entries, data, next) {\n  filterExisting(myKonnector.logger, Bill) (requiredFields, entries, data, next);\n}   saveDataAndFile(logger, model, options, tags)  This method returns a fetch function that creates an object in database for each item in  entries.filtered  array. If item has a  pdfurl  attribute, the remote file will be downloaded and stored on the filesystem.  pdfUrl  can point to any file, not necessarily a PDF file. The name comes from legacy code and has not been updated. Parameters:  log : unused (kept for retro-compatibility) model : the model options : tags : array of tags to apply to created files.   updateOrCreate(logger, model, filter, options)`  This method return a fetch function that creates or updates an object in database for each item in the  entries[model.displayName]  array. The filter parameters specifies the fields used to find the document inside the database. Parameters:  log : unused (kept for retro-compatibility) model : the model filters : an array of fields names tags : array of tags to apply to created files.   linkBankOperation  This method returns a fetch function that will try to link a bill to a bank operation. For each data item from  entries.fetched , it will look for an operation that could match this entry. Once found, it attaches a binary to the bank operation. It\u2019s the same binary that is attached to the corresponding file object. The criteria to find a matching operation are:  Operation label should contain one of the identifiers given in parameter The date should be between (bill date -  dateDelta ) and (bill date +  dateDelta ). Where  dateDelta  is given as a parameter and is in days The amount should be between (bill amount -  amountDelta ) and (bill amount +  amountDelta ). Where  amountDelta  is given as a parameter.  Parameters: You should pass parameters as an object whose keys are:  log : unused (kept for retro-compatibility) model : a model object to check for. identifier : a string or an array of strings to look for in the operation label (case insensitive: the layer will automatically set it to lowercase). dateDelta : the number of days allowed between the bank operation date and the bill date  (15 by default).  amountDelta : the difference between the bank operation amount and the bill amount (useful when the currency is not the same) (0 by default). isRefund : boolean telling if the operation is a refund or not. By default, it is  false . Allows to match only operations with positive amount if set to  true .", 
            "title": "Common methods"
        }, 
        {
            "location": "/dev/konnector/#common-data-models", 
            "text": "The library includes the most used data model, so you can just require them if you need them:  bankOperation bill file folder  The library also provide a  baseModel  class to create your own data model. Each model inherits from the following methods:  all(callback)  fetch all documents create(entry, callback)  creates a new document updateAttributes(id, changes, callback)  update the attributes of a document.  const { models: { baseModel } } = require(\u2019cozy-konnector-libs\u2019)\n\nmodule.exports = baseModel.createNew({\n    displayName:  myModel ,\n    name:  me.cozy.mymodel \n});", 
            "title": "Common data models"
        }, 
        {
            "location": "/dev/konnector/#the-manifest", 
            "text": "Each connector is described by a Manifest. This is a JSON file named  manifest.konnector  at the root of your code folder. It should include the following information:  name : \u2026 slug : the internal name of the application type : for now, the only allowed value is  node . In the future, we may support other types of connectors version :  source : git URL of the source code repository fields : @TODO locales : @TODO permissions : an object describing the permissions the connector requires developer : who are you? name :  url :", 
            "title": "The manifest"
        }, 
        {
            "location": "/dev/konnector/#permissions", 
            "text": "TODO See documentation of the manifest of an application The connector parameters are stored in  io.cozy.accounts  documents, so each connector should get access to this doctype.", 
            "title": "Permissions"
        }, 
        {
            "location": "/dev/konnector/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/dev/konnector/#how-do-i-scrap-a-website", 
            "text": "You will require the  request  and  cheerio  npm packages: yarn add cheerio request # or npm install --save cheerio request  Here\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill: function fetchBill(requiredFields, entries, data, next) {\n  'use strict';\n  next();\n  // Create a request instance that keep cookies between requests and follow redirects\n  let request = require('request').defaults({jar: true, followRedirect: true, followAllRedirects: true}),\n      cheerio = require('cheerio'),\n      moment  = require('moment');\n  // Get the login page to get the CSRF token\n  request( https://login.remote.web , function (err, res, html) {\n    if (err) {\n      return next(err.message);\n    }\n    // Post the form\n    let $ = cheerio.load(html),\n        form = {\n          form: {\n            login: requiredFields.login,\n            password: requiredFields.password,\n            csrf_token: $('[name= csrf_token ]').val(),\n          }\n        };\n    request.post('https://login.remote.web', form, function (err, res, html) {\n      if (err) {\n        return next(err.message);\n      }\n      request( https://admin.remote.web/bills , function (err, res, html) {\n        if (err) {\n          return next(err.message);\n        }\n        entries.fetched = [{date: moment($( bill_date )), value: $( #bill_value )}];\n        next();\n      });\n    });\n  });\n}  The whole connector will be as simple as: const {baseKonnector, filterExisting, saveDataAndFile, models} = require( cozy-konnector-libs ),\n      MyBills = models.baseModel.createNew({\n          name:  me.mycozy.mybill \n      });\n\nfunction fetchBill(requiredFields, entries, data, next) {\n  (\u2026);\n}\n\nmodule.exports = baseKonnector.createNew({\n  name: 'me.mycozy.mybill',\n  fetchOperations: [\n    fetchBill,\n    filterExisting(null, MyBills),\n    saveDataAndFile(null, MyBills, {})\n  ]\n});", 
            "title": "How do I scrap a website"
        }, 
        {
            "location": "/dev/konnector/#testing", 
            "text": "", 
            "title": "Testing"
        }, 
        {
            "location": "/dev/konnector/#running-in-standalone-mode", 
            "text": "To ease the development, you don\u2019t need a running Cozy server to test your code. We provide a standalone mode, that mocks the server. This mode uses a configuration file to define the environment variables that the server will send to your application in production. So, start by copying  data/env_fields.json.template  to  data/env_fields.json  and set the parameters your application requires. Then start it with  yarn standalone  or  npm run standalone . In standalone mode, saving a file will put it into the  data  folder at the root of your repository. If you need to query the database, put your mock data into  data/fixture.json . Also, fetched data will just be outputted to the console instead of being sent to the database.", 
            "title": "Running in standalone mode"
        }, 
        {
            "location": "/dev/cordova/", 
            "text": "How to create a mobile Cozy application\nThe simplest way to create a mobile Cozy application is to use JavaScript as there already are JavaScript libraries to connect to the Cozy server, as known as cozy-stack.\nTherefore we will use the classical stack:\n\n\na JavaScript web application\nand cordova\n\n\n\n\nAt the end of this documentation\n, you will find \n\nhow-tos\n to help you with \n\ncordova configuration\n, \n\nwebpack builds\n and \n\ncordova deployments for Android and iOS\n.\n\n\nTo create \nyour first Cozy application\n, just follow the guide.\nAs you can read there, Cozy applications are served by the Cozy server, this is the way that Cozy applications retrieve a token to query data.\nIn the case of a mobile application, you need to retrieve a token differently. Hopefully we provide everything you need to do it easily.\nYou\nll need two libraries:\n\n\ncozy-client (\nsource\n)\ncozy-bar (\nsource\n)\n\n\n\n\nIn the case of Cozy web applications served by the Cozy server, these two libraries are injected in the html file with variables \n{{.CozyClientJS}}\n and \n\n{{.CozyBar}}\n.\n\n\nSetup index.html\nFirst thing first, add JavaScript libraries files into your \nindex.html\n:\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n  \nhead\n\n    \nmeta charset=\nutf-8\n\n    \ntitle\nmobile Cozy application with Cordova\n/title\n\n    \nscript src=\ncozy-client.js\n/script\n\n    \nscript src=\ncozy-bar.js\n/script\n\n  \n/head\n\n  \nbody\n\n    \n!-- page content --\n\n  \n/body\n\n\n/html\n\n\n\n\nConnect to Cozy server\nWhen an user will start your mobile Cozy application, she/he will need to point to her/his server url to ask for permissions for her/his device.\nThis is done by our library \ncozy-client\n, you just need to add a HTML form:\nform id=\nform\n\n  \nlabel\nWhat is your cozy server url?\n    \ninput name=\nurl\n id=\nurl\n type=\ntext\n /\n\n  \n/label\n\n  \nbutton type=\nsubmit\nSubmit\n/button\n\n\n/form\n\n\n\n\nconst urlInput = document.getElementById(\nurl\n);\nconst form = document.getElementById(\nform\n);\nform.addEventListener(\nsubmit\n, registerClient);\nfunction registerClient (event) {\n  event.preventDefault();\n  const url = urlInput.value;\n  const { client, token } = await cozyClient.register(url);\n  // do whatever you need with client and token like persist\n}\n\n\n\n\nJS Bin on jsbin.com\n\n\nWhen \ncozyClient.register(url)\n is called, \n\nthe cordova inapp browser plugin\n is used to display a password request and a permission acceptation page to let the end-user to register her/his device.\nThat\ns all!\nThen you can use the cozy-client library as \nyou would within a classic Cozy application\n.\nInitialize the Cozy bar\nThe Cozy bar needs some information to be initialized and its initialization must be done in your front-end code:\ncozy.bar.init({\n  appName: \nApp Name\n,\n  appEditor: \nEditor Name\n,\n  iconPath: require(\n./assets/app-icon.svg\n),\n  lang: \nen-US\n,\n  replaceTitleOnMobile: true\n})\n\n\n\n\nUse Cordova\nInstall and setup cordova\nCordova is a tool\n to build Android and iOS applications from a web app.\nIt works with a CLI that needs \nnode\n.\nLook at the \n\ncordova documentation to install everything needed\n.\nOnce cordova is installed, just run \ncordova create cozy-app com.example.cozyapp CozyApp\n and you get the following structure: \n./\n\u251c\u2500\u2500 config.xml\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 platforms\n\u251c\u2500\u2500 plugins\n\u2514\u2500\u2500 www\n    \u251c\u2500\u2500 css\n    \u2502   \u2514\u2500\u2500 index.css\n    \u251c\u2500\u2500 img\n    \u2502   \u2514\u2500\u2500 logo.png\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 js\n        \u2514\u2500\u2500 index.js\n\n7 directories, 6 files\n\n\n\n\nNote:\n everything you put in \n\nwww/\n will be served as your application content.\nConfigure your build tool\nIf you use a build tool to transpile your JavaScript code, you need to configure your tool to output the build into \nwww/\n.\nwebpack configuration\nAs \nWebpack is the most used build tool\n we will show you how to configure it with cordova:\nCreate a \nwebpack.config.js\n on the root folder of your project with:\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    filename: 'bundle.js',\n    path.resolve(__dirname, 'www')\n  }\n}\n\n\n\n\nAnd add the output bundle in the \nwww/index.html\n file:\nhtml\n\n  \nhead\n\n    ...\n  \n/head\n\n  \nbody\n\n    ...\n    \nscript src=\nbundle.js\n/script\n\n  \n/body\n\n\n/html\n\n\n\n\nSee \nthe official webpack documentation\n for more details.\nCordova\nAndroid Platform\nUse \ncordova platform add android\n and check your environment with \n\ncordova requirements\n:\nA bad requirements check:\nRequirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: not installed\nAndroid SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME environment variable.\nGradle: installed\nError: Some of requirements check failed\n\n\n\n\nA good requirements check:\nRequirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23\nGradle: installed\n\n\n\n\nSee cordova, android and ios documentation to customize your development environment for your special needs.\nOnce everything is right, you could run \ncordova build\n and \n\ncordova run android\n to create an APK and push the APK on a device.\nNote:\n The device should be connected with usb.\nSee \n\nofficial android documentation for more details\n.\niOS development\nFor building an iOS app, you need \nxcode\n.\n[[more to come]]\nSee further details on \nthe cordova official documentation about iOS\n.", 
            "title": "Create a mobile app with cordova"
        }, 
        {
            "location": "/dev/cordova/#how-to-create-a-mobile-cozy-application", 
            "text": "The simplest way to create a mobile Cozy application is to use JavaScript as there already are JavaScript libraries to connect to the Cozy server, as known as cozy-stack. Therefore we will use the classical stack:  a JavaScript web application and cordova   At the end of this documentation , you will find  how-tos  to help you with  cordova configuration ,  webpack builds  and  cordova deployments for Android and iOS .  To create  your first Cozy application , just follow the guide.\nAs you can read there, Cozy applications are served by the Cozy server, this is the way that Cozy applications retrieve a token to query data. In the case of a mobile application, you need to retrieve a token differently. Hopefully we provide everything you need to do it easily. You ll need two libraries:  cozy-client ( source ) cozy-bar ( source )   In the case of Cozy web applications served by the Cozy server, these two libraries are injected in the html file with variables  {{.CozyClientJS}}  and  {{.CozyBar}} .", 
            "title": "How to create a mobile Cozy application"
        }, 
        {
            "location": "/dev/cordova/#setup-indexhtml", 
            "text": "First thing first, add JavaScript libraries files into your  index.html : !DOCTYPE html  html lang= en \n   head \n     meta charset= utf-8 \n     title mobile Cozy application with Cordova /title \n     script src= cozy-client.js /script \n     script src= cozy-bar.js /script \n   /head \n   body \n     !-- page content -- \n   /body  /html", 
            "title": "Setup index.html"
        }, 
        {
            "location": "/dev/cordova/#connect-to-cozy-server", 
            "text": "When an user will start your mobile Cozy application, she/he will need to point to her/his server url to ask for permissions for her/his device. This is done by our library  cozy-client , you just need to add a HTML form: form id= form \n   label What is your cozy server url?\n     input name= url  id= url  type= text  / \n   /label \n   button type= submit Submit /button  /form  const urlInput = document.getElementById( url );\nconst form = document.getElementById( form );\nform.addEventListener( submit , registerClient);\nfunction registerClient (event) {\n  event.preventDefault();\n  const url = urlInput.value;\n  const { client, token } = await cozyClient.register(url);\n  // do whatever you need with client and token like persist\n}  JS Bin on jsbin.com  When  cozyClient.register(url)  is called,  the cordova inapp browser plugin  is used to display a password request and a permission acceptation page to let the end-user to register her/his device. That s all! Then you can use the cozy-client library as  you would within a classic Cozy application .", 
            "title": "Connect to Cozy server"
        }, 
        {
            "location": "/dev/cordova/#initialize-the-cozy-bar", 
            "text": "The Cozy bar needs some information to be initialized and its initialization must be done in your front-end code: cozy.bar.init({\n  appName:  App Name ,\n  appEditor:  Editor Name ,\n  iconPath: require( ./assets/app-icon.svg ),\n  lang:  en-US ,\n  replaceTitleOnMobile: true\n})", 
            "title": "Initialize the Cozy bar"
        }, 
        {
            "location": "/dev/cordova/#use-cordova", 
            "text": "", 
            "title": "Use Cordova"
        }, 
        {
            "location": "/dev/cordova/#install-and-setup-cordova", 
            "text": "Cordova is a tool  to build Android and iOS applications from a web app. It works with a CLI that needs  node .\nLook at the  cordova documentation to install everything needed . Once cordova is installed, just run  cordova create cozy-app com.example.cozyapp CozyApp  and you get the following structure:  ./\n\u251c\u2500\u2500 config.xml\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 platforms\n\u251c\u2500\u2500 plugins\n\u2514\u2500\u2500 www\n    \u251c\u2500\u2500 css\n    \u2502   \u2514\u2500\u2500 index.css\n    \u251c\u2500\u2500 img\n    \u2502   \u2514\u2500\u2500 logo.png\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 js\n        \u2514\u2500\u2500 index.js\n\n7 directories, 6 files  Note:  everything you put in  www/  will be served as your application content.", 
            "title": "Install and setup cordova"
        }, 
        {
            "location": "/dev/cordova/#configure-your-build-tool", 
            "text": "If you use a build tool to transpile your JavaScript code, you need to configure your tool to output the build into  www/ .", 
            "title": "Configure your build tool"
        }, 
        {
            "location": "/dev/cordova/#webpack-configuration", 
            "text": "As  Webpack is the most used build tool  we will show you how to configure it with cordova: Create a  webpack.config.js  on the root folder of your project with: const path = require('path');\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    filename: 'bundle.js',\n    path.resolve(__dirname, 'www')\n  }\n}  And add the output bundle in the  www/index.html  file: html \n   head \n    ...\n   /head \n   body \n    ...\n     script src= bundle.js /script \n   /body  /html  See  the official webpack documentation  for more details.", 
            "title": "webpack configuration"
        }, 
        {
            "location": "/dev/cordova/#cordova", 
            "text": "", 
            "title": "Cordova"
        }, 
        {
            "location": "/dev/cordova/#android-platform", 
            "text": "Use  cordova platform add android  and check your environment with  cordova requirements : A bad requirements check: Requirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: not installed\nAndroid SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME environment variable.\nGradle: installed\nError: Some of requirements check failed  A good requirements check: Requirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23\nGradle: installed  See cordova, android and ios documentation to customize your development environment for your special needs. Once everything is right, you could run  cordova build  and  cordova run android  to create an APK and push the APK on a device. Note:  The device should be connected with usb.\nSee  official android documentation for more details .", 
            "title": "Android Platform"
        }, 
        {
            "location": "/dev/cordova/#ios-development", 
            "text": "For building an iOS app, you need  xcode . [[more to come]] See further details on  the cordova official documentation about iOS .", 
            "title": "iOS development"
        }
    ]
}