{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"/index_fr/","text":"Documentation Cozy Tout ce qu il faut savoir pour utiliser et configurer Cozy D\u00e9couverte de votre nouveau domicile num\u00e9rique Synchronisez toutes vos donn\u00e9es Installez votre propre serveur D\u00e9veloppez ! Apprenez \u00e0 d\u00e9velopper des applications et des connecteurs. Restons en contact Si vous avez des questions, 3 options s offrent \u00e0 vous : write an email to our Support team: contact at cozy.io post on the forum chat with us on IRC","title":"Accueil"},{"location":"/index_fr/#documentation-cozy","text":"Tout ce qu il faut savoir pour utiliser et configurer Cozy D\u00e9couverte de votre nouveau domicile num\u00e9rique Synchronisez toutes vos donn\u00e9es Installez votre propre serveur D\u00e9veloppez ! Apprenez \u00e0 d\u00e9velopper des applications et des connecteurs.","title":"Documentation Cozy"},{"location":"/index_fr/#restons-en-contact","text":"Si vous avez des questions, 3 options s offrent \u00e0 vous : write an email to our Support team: contact at cozy.io post on the forum chat with us on IRC","title":"Restons en contact"},{"location":"/use/index_fr/","text":"Bienvenue chez vous ! Voil\u00e0 c\u2019est parti, votre Cozy est sur le point de changer votre vie quotidienne ! Pour y parvenir et afin de vous faciliter au mieux cette installation, nous avons imagin\u00e9 pour vous un mini-guide avec tous les indispensables pour d\u00e9marrer votre Cozy. Claude, notre expert de l\u2019\u00e9quipe Support qui connait Cozy comme sa maison, est l\u2019auteur de cette documentation et vous livrera ses astuces. Pr\u00eat (e) \u00e0 adopter Cozy ? Nous vous accompagnons dans vos premiers pas ! Introduction Notre charte d\u2019engagement : vous redonner vos donn\u00e9es personnelles dans un endroit s\u00fbr et accessible par vous seul est notre priorit\u00e9 Comment vos donn\u00e9es personnelles sont-elles prot\u00e9g\u00e9es ? Dans votre cloud personnel, vous \u00eates chez vous Vous \u00eates la seule personne \u00e0 avoir acc\u00e8s \u00e0 vos donn\u00e9es, lesquelles ne sont partag\u00e9es avec aucun prestataire, sauf accord explicite et pr\u00e9alable de votre part donn\u00e9 au prestataire concern\u00e9. Vos donn\u00e9es vous appartiennent et nous n\u2019y toucherons pas Vos photos, vos donn\u00e9es bancaires ou l\u2019historique de votre poids, vous seul choisissez les donn\u00e9es que vous souhaitez r\u00e9cup\u00e9rer aupr\u00e8s des tiers qui aujourd\u2019hui les d\u00e9tiennent. Vous \u00eates l\u2019unique propri\u00e9taire des donn\u00e9es de votre service Cozy et des sauvegardes que Cozy Cloud r\u00e9alise automatiquement. Toute utilisation de vos donn\u00e9es par un tiers suppose votre accord explicite et pr\u00e9alable. Vous \u00eates libre de supprimer, modifier, copier, partager vos donn\u00e9es gr\u00e2ce au service Cozy, et ce aussi longtemps que vous \u00eates utilisateur du service. Nous ne regardons pas vos donn\u00e9es personnelles comme nous ne vous espionnons pas quand vous prenez votre douche. Nous garantissons la transparence de notre plateforme. Cozy est et restera un service reposant sur un logiciel libre : vous pouvez utiliser, copier, modifier (et am\u00e9liorer !) le code source. Le choix de l\u2019approche logiciel libre garantit la transparence du service Cozy, qui est auditable en toute circonstance, conform\u00e9ment \u00e0 la licence libre du logiciel utilis\u00e9 par Cozy Cloud. Vous d\u00e9cidez de l\u2019utilisation de vos donn\u00e9es La plateforme Cozy est con\u00e7ue pour vous permettre de contr\u00f4ler les donn\u00e9es sortantes de votre Cozy. Ce contr\u00f4le des applications tierces est partag\u00e9 par les utilisateurs de la communaut\u00e9 des Cozynautes, et Cozy Cloud s\u2019engage \u00e0 faciliter pour tous les utilisateurs de Cozy le signalement d\u2019applications malicieuses. Notre objectif : ce qui est dans votre Cozy reste dans votre Cozy. Bien d\u00e9marrer avec Cozy Cr\u00e9ez votre adresse Cozy Avant d\u2019arriver \u00e0 la maison, vous devez rentrer votre adresse dans un GPS ou la connaitre par c\u0153ur. C\u2019est exactement la m\u00eame chose pour votre Cozy mais sans la boussole ! L\u2019adresse de votre Cozy, c\u2019est la v\u00f4tre et \u00e0 la diff\u00e9rence de votre maison, elle ne figure pas dans les pages blanches visibles par tous. Vous manquez d\u2019imagination pour la cr\u00e9er ? Pas de panique ! Nous vous avons pr\u00e9par\u00e9 quelques exemples pour vous aider \u2013 attention, il ne suffit pas de les recopier mais bien d\u2019imaginer votre adresse personnalis\u00e9e : isabelledurand73.mycozy.cloud bernardlhermite.mycozy.cloud zazadurand.mycozy.cloud L\u2019astuce de Claude Ajoutez votre adresse Cozy \u00e0 vos favoris pour y acc\u00e9der en un seul clic Cr\u00e9er votre mot de passe L\u2019astuce de Claude Pour cr\u00e9er un mot de passe complexe mais facile \u00e0 retenir, imaginez une phrase absurde et cr\u00e9ez le mot de passe \u00e0 partir des initiales des mots et de la ponctuation. Ainsi, \u00ab Ma\u00eetre renard, sur un nuage perch\u00e9, tenait en son bec de la pluie \u00bb deviendra \u00ab Mr,s1np,tesb2lp \u00bb Bien utiliser votre Cozy Nous avons \u00e9labor\u00e9 une bo\u00eete \u00e0 outils pour param\u00e9trer votre Cozy et d\u00e9cupler ses capacit\u00e9s. Sauvegardez vos fichiers et documents en un seul clic Cozy vous permet d\u2019enregistrer tous vos fichiers (photos, vid\u00e9os, documents administratifs, factures etc.) au m\u00eame endroit et de les sauvegarder automatiquement. Ainsi, m\u00eame si votre ordinateur tombe en panne ou si vous oubliez votre t\u00e9l\u00e9phone dans le train, tous vos fichiers restent prot\u00e9g\u00e9s. Plus besoin d\u2019un disque externe pour sauvegarder vos documents ! Ajout de fichiers \u00e0 votre Cozy sur un ordinateur Windows ou Mac V\u00e9rifiez que l\u2019application de bureau est install\u00e9e sur votre ordinateur. Si vous n\u2019avez pas rencontr\u00e9 de soucis en suivants nos conseils, vous devriez passer cette \u00e9tape sans difficult\u00e9s. Faites glisser et d\u00e9posez les fichiers souhait\u00e9s dans le dossier Cozy Drive. Simple comme dire bonjour n\u2019est-ce pas ? Votre Cozy garde vos fichiers bien au chaud \u00e0 l\u2019abri de tous ! Sur votre Cozy depuis un navigateur Connectez-vous \u00e0 votre Cozy en suivant l\u2019adresse Internet que vous avez cr\u00e9\u00e9 au d\u00e9but (Par exemple : isabelledurand.mycozy.cloud) Ouvrez votre application Drive dans le menu Applications si ce n\u2019est pas d\u00e9j\u00e0 fait Cliquez sur le bouton bleu Transf\u00e9rer des fichiers en haut \u00e0 droite de la fen\u00eatre. Choisissez le fichier \u00e0 ajouter, puis cliquez sur Ouvrir. Acc\u00e9dez \u00e0 vos fichiers ou que vous soyez et quand vous voulez Enregistrez vos photos et vos documents dans Cozy, puis consultez-les \u00e0 partir de l\u2019application Cozy sur un ordinateur, un t\u00e9l\u00e9phone ou une tablette. Tous les fichiers que vous enregistrez dans Cozy sont automatiquement synchronis\u00e9s sur l\u2019ensemble de vos appareils, et restent ainsi toujours \u00e0 port\u00e9e de main. Pour retrouver vos fichiers sur tous vos appareils (PC, mobile et tablette) et synchroniser vos photos avec votre Cozy, t\u00e9l\u00e9chargez l\u2019application de Cozy pour iOS et l\u2019 application pour Android . Connectez-vous pour enfin d\u00e9connecter ! Cliquez sur Applications en haut \u00e0 droite de votre \u00e9cran et cliquez sur Cozy Collect, votre application regroupant les collecteurs disponibles dans votre Cozy. En s\u00e9lectionnant les connecteurs de vos fournisseurs, vous allez automatiser la r\u00e9cup\u00e9ration de vos donn\u00e9es li\u00e9es \u00e0 vos diff\u00e9rents comptes client. C\u2019est tr\u00e8s simple : s\u00e9lectionnez le fournisseur, entrez vos identifiant et mot de passe \u2013 ce sont ceux qui vous permettent de rentrer sur votre espace client. En un seul clic, votre connecteur est op\u00e9rationnel et actif. Un macaron vert apparaitra sur le connecteur ainsi actif. Vous pouvez renouveler l\u2019op\u00e9ration avec autant de connecteurs que vous le souhaitez (dans la mesure ou vous avez un compte client associ\u00e9). Avez-vous pens\u00e9 \u00e0 tout ? Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy Drive sur votre iPhone ou votre Android ? Si oui, bravo ! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9 ! Si non, voici la marche \u00e0 suivre : Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab T\u00e9l\u00e9charger l\u2019app mobile \u00bb Vous \u00eates d\u00e9sormais sur la page : https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre appareil. O\u00f9 alors cliquez sur les ic\u00f4nes ci-dessous : Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy de bureau ? Si oui, bravo ! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9 ! Si ce n\u2019est pas d\u00e9j\u00e0 fait, cela vous prendra moins de deux minutes pour l\u2019installer : Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab T\u00e9l\u00e9charger l\u2019app PC\u00bb Vous \u00eates d\u00e9sormais sur la page : https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre PC : MacOS ou Microsoft Windows . F\u00e9licitations ! Votre Cozy n\u2019a d\u00e9sormais plus de secret pour vous. Encore des questions ? Notre \u00e9quipe support se tient \u00e0 votre disposition pour toute autre question. Visitez notre page Aide en ligne sur le site cozy.io. Venez \u00e9galement nous dire bonjour sur Twitter et Facebook .","title":"Utiliser Cozy"},{"location":"/use/index_fr/#bienvenue-chez-vous","text":"Voil\u00e0 c\u2019est parti, votre Cozy est sur le point de changer votre vie quotidienne ! Pour y parvenir et afin de vous faciliter au mieux cette installation, nous avons imagin\u00e9 pour vous un mini-guide avec tous les indispensables pour d\u00e9marrer votre Cozy. Claude, notre expert de l\u2019\u00e9quipe Support qui connait Cozy comme sa maison, est l\u2019auteur de cette documentation et vous livrera ses astuces. Pr\u00eat (e) \u00e0 adopter Cozy ? Nous vous accompagnons dans vos premiers pas !","title":"Bienvenue chez vous\u00a0!"},{"location":"/use/index_fr/#introduction","text":"","title":"Introduction"},{"location":"/use/index_fr/#notre-charte-dengagement-vous-redonner-vos-donnees-personnelles-dans-un-endroit-sur-et-accessible-par-vous-seul-est-notre-priorite","text":"","title":"Notre charte d\u2019engagement\u00a0: vous redonner vos donn\u00e9es personnelles dans un endroit s\u00fbr et accessible par vous seul est notre priorit\u00e9"},{"location":"/use/index_fr/#comment-vos-donnees-personnelles-sont-elles-protegees","text":"","title":"Comment vos donn\u00e9es personnelles sont-elles prot\u00e9g\u00e9es\u00a0?"},{"location":"/use/index_fr/#dans-votre-cloud-personnel-vous-etes-chez-vous","text":"Vous \u00eates la seule personne \u00e0 avoir acc\u00e8s \u00e0 vos donn\u00e9es, lesquelles ne sont partag\u00e9es avec aucun prestataire, sauf accord explicite et pr\u00e9alable de votre part donn\u00e9 au prestataire concern\u00e9.","title":"Dans votre cloud personnel, vous \u00eates chez vous"},{"location":"/use/index_fr/#vos-donnees-vous-appartiennent-et-nous-ny-toucherons-pas","text":"Vos photos, vos donn\u00e9es bancaires ou l\u2019historique de votre poids, vous seul choisissez les donn\u00e9es que vous souhaitez r\u00e9cup\u00e9rer aupr\u00e8s des tiers qui aujourd\u2019hui les d\u00e9tiennent. Vous \u00eates l\u2019unique propri\u00e9taire des donn\u00e9es de votre service Cozy et des sauvegardes que Cozy Cloud r\u00e9alise automatiquement. Toute utilisation de vos donn\u00e9es par un tiers suppose votre accord explicite et pr\u00e9alable. Vous \u00eates libre de supprimer, modifier, copier, partager vos donn\u00e9es gr\u00e2ce au service Cozy, et ce aussi longtemps que vous \u00eates utilisateur du service. Nous ne regardons pas vos donn\u00e9es personnelles comme nous ne vous espionnons pas quand vous prenez votre douche.","title":"Vos donn\u00e9es vous appartiennent et nous n\u2019y toucherons pas"},{"location":"/use/index_fr/#nous-garantissons-la-transparence-de-notre-plateforme","text":"Cozy est et restera un service reposant sur un logiciel libre : vous pouvez utiliser, copier, modifier (et am\u00e9liorer !) le code source. Le choix de l\u2019approche logiciel libre garantit la transparence du service Cozy, qui est auditable en toute circonstance, conform\u00e9ment \u00e0 la licence libre du logiciel utilis\u00e9 par Cozy Cloud.","title":"Nous garantissons la transparence de notre plateforme."},{"location":"/use/index_fr/#vous-decidez-de-lutilisation-de-vos-donnees","text":"La plateforme Cozy est con\u00e7ue pour vous permettre de contr\u00f4ler les donn\u00e9es sortantes de votre Cozy. Ce contr\u00f4le des applications tierces est partag\u00e9 par les utilisateurs de la communaut\u00e9 des Cozynautes, et Cozy Cloud s\u2019engage \u00e0 faciliter pour tous les utilisateurs de Cozy le signalement d\u2019applications malicieuses. Notre objectif : ce qui est dans votre Cozy reste dans votre Cozy.","title":"Vous d\u00e9cidez de l\u2019utilisation de vos donn\u00e9es"},{"location":"/use/index_fr/#bien-demarrer-avec-cozy","text":"","title":"Bien d\u00e9marrer avec Cozy"},{"location":"/use/index_fr/#creez-votre-adresse-cozy","text":"Avant d\u2019arriver \u00e0 la maison, vous devez rentrer votre adresse dans un GPS ou la connaitre par c\u0153ur. C\u2019est exactement la m\u00eame chose pour votre Cozy mais sans la boussole ! L\u2019adresse de votre Cozy, c\u2019est la v\u00f4tre et \u00e0 la diff\u00e9rence de votre maison, elle ne figure pas dans les pages blanches visibles par tous. Vous manquez d\u2019imagination pour la cr\u00e9er ? Pas de panique ! Nous vous avons pr\u00e9par\u00e9 quelques exemples pour vous aider \u2013 attention, il ne suffit pas de les recopier mais bien d\u2019imaginer votre adresse personnalis\u00e9e : isabelledurand73.mycozy.cloud bernardlhermite.mycozy.cloud zazadurand.mycozy.cloud L\u2019astuce de Claude Ajoutez votre adresse Cozy \u00e0 vos favoris pour y acc\u00e9der en un seul clic","title":"Cr\u00e9ez votre adresse Cozy"},{"location":"/use/index_fr/#creer-votre-mot-de-passe","text":"L\u2019astuce de Claude Pour cr\u00e9er un mot de passe complexe mais facile \u00e0 retenir, imaginez une phrase absurde et cr\u00e9ez le mot de passe \u00e0 partir des initiales des mots et de la ponctuation. Ainsi, \u00ab Ma\u00eetre renard, sur un nuage perch\u00e9, tenait en son bec de la pluie \u00bb deviendra \u00ab Mr,s1np,tesb2lp \u00bb","title":"Cr\u00e9er votre mot de passe"},{"location":"/use/index_fr/#bien-utiliser-votre-cozy","text":"Nous avons \u00e9labor\u00e9 une bo\u00eete \u00e0 outils pour param\u00e9trer votre Cozy et d\u00e9cupler ses capacit\u00e9s.","title":"Bien utiliser votre Cozy"},{"location":"/use/index_fr/#sauvegardez-vos-fichiers-et-documents-en-un-seul-clic","text":"Cozy vous permet d\u2019enregistrer tous vos fichiers (photos, vid\u00e9os, documents administratifs, factures etc.) au m\u00eame endroit et de les sauvegarder automatiquement. Ainsi, m\u00eame si votre ordinateur tombe en panne ou si vous oubliez votre t\u00e9l\u00e9phone dans le train, tous vos fichiers restent prot\u00e9g\u00e9s. Plus besoin d\u2019un disque externe pour sauvegarder vos documents !","title":"Sauvegardez vos fichiers et documents en un seul clic"},{"location":"/use/index_fr/#ajout-de-fichiers-a-votre-cozy-sur-un-ordinateur-windows-ou-mac","text":"V\u00e9rifiez que l\u2019application de bureau est install\u00e9e sur votre ordinateur. Si vous n\u2019avez pas rencontr\u00e9 de soucis en suivants nos conseils, vous devriez passer cette \u00e9tape sans difficult\u00e9s. Faites glisser et d\u00e9posez les fichiers souhait\u00e9s dans le dossier Cozy Drive. Simple comme dire bonjour n\u2019est-ce pas ? Votre Cozy garde vos fichiers bien au chaud \u00e0 l\u2019abri de tous !","title":"Ajout de fichiers \u00e0 votre Cozy sur un ordinateur Windows ou Mac"},{"location":"/use/index_fr/#sur-votre-cozy-depuis-un-navigateur","text":"Connectez-vous \u00e0 votre Cozy en suivant l\u2019adresse Internet que vous avez cr\u00e9\u00e9 au d\u00e9but (Par exemple : isabelledurand.mycozy.cloud) Ouvrez votre application Drive dans le menu Applications si ce n\u2019est pas d\u00e9j\u00e0 fait Cliquez sur le bouton bleu Transf\u00e9rer des fichiers en haut \u00e0 droite de la fen\u00eatre. Choisissez le fichier \u00e0 ajouter, puis cliquez sur Ouvrir.","title":"Sur votre Cozy depuis un navigateur"},{"location":"/use/index_fr/#accedez-a-vos-fichiers-ou-que-vous-soyez-et-quand-vous-voulez","text":"Enregistrez vos photos et vos documents dans Cozy, puis consultez-les \u00e0 partir de l\u2019application Cozy sur un ordinateur, un t\u00e9l\u00e9phone ou une tablette. Tous les fichiers que vous enregistrez dans Cozy sont automatiquement synchronis\u00e9s sur l\u2019ensemble de vos appareils, et restent ainsi toujours \u00e0 port\u00e9e de main. Pour retrouver vos fichiers sur tous vos appareils (PC, mobile et tablette) et synchroniser vos photos avec votre Cozy, t\u00e9l\u00e9chargez l\u2019application de Cozy pour iOS et l\u2019 application pour Android .","title":"Acc\u00e9dez \u00e0 vos fichiers ou que vous soyez et quand vous voulez"},{"location":"/use/index_fr/#connectez-vous-pour-enfin-deconnecter","text":"Cliquez sur Applications en haut \u00e0 droite de votre \u00e9cran et cliquez sur Cozy Collect, votre application regroupant les collecteurs disponibles dans votre Cozy. En s\u00e9lectionnant les connecteurs de vos fournisseurs, vous allez automatiser la r\u00e9cup\u00e9ration de vos donn\u00e9es li\u00e9es \u00e0 vos diff\u00e9rents comptes client. C\u2019est tr\u00e8s simple : s\u00e9lectionnez le fournisseur, entrez vos identifiant et mot de passe \u2013 ce sont ceux qui vous permettent de rentrer sur votre espace client. En un seul clic, votre connecteur est op\u00e9rationnel et actif. Un macaron vert apparaitra sur le connecteur ainsi actif. Vous pouvez renouveler l\u2019op\u00e9ration avec autant de connecteurs que vous le souhaitez (dans la mesure ou vous avez un compte client associ\u00e9).","title":"Connectez-vous pour enfin d\u00e9connecter\u00a0!"},{"location":"/use/index_fr/#avez-vous-pense-a-tout","text":"","title":"Avez-vous pens\u00e9 \u00e0 tout\u00a0?"},{"location":"/use/index_fr/#avez-vous-telecharge-lapplication-cozy-drive-sur-votre-iphone-ou-votre-android","text":"Si oui, bravo ! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9 ! Si non, voici la marche \u00e0 suivre : Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab T\u00e9l\u00e9charger l\u2019app mobile \u00bb Vous \u00eates d\u00e9sormais sur la page : https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre appareil. O\u00f9 alors cliquez sur les ic\u00f4nes ci-dessous :","title":"Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy Drive sur votre iPhone ou votre Android\u00a0?"},{"location":"/use/index_fr/#avez-vous-telecharge-lapplication-cozy-de-bureau","text":"Si oui, bravo ! Vous \u00eates d\u00e9j\u00e0 un Cozynaute confirm\u00e9 ! Si ce n\u2019est pas d\u00e9j\u00e0 fait, cela vous prendra moins de deux minutes pour l\u2019installer : Connectez-vous \u00e0 l\u2019adresse de notre site cozy.io Allez au bas de la page et cliquez sur le lien \u00ab T\u00e9l\u00e9charger l\u2019app PC\u00bb Vous \u00eates d\u00e9sormais sur la page : https://docs.cozy.io/fr/download/ , vous pouvez cliquer sur le lien de votre choix en fonction de l\u2019OS de votre PC : MacOS ou Microsoft Windows . F\u00e9licitations ! Votre Cozy n\u2019a d\u00e9sormais plus de secret pour vous.","title":"Avez-vous t\u00e9l\u00e9charg\u00e9 l\u2019application Cozy de bureau\u00a0?"},{"location":"/use/index_fr/#encore-des-questions","text":"Notre \u00e9quipe support se tient \u00e0 votre disposition pour toute autre question. Visitez notre page Aide en ligne sur le site cozy.io. Venez \u00e9galement nous dire bonjour sur Twitter et Facebook .","title":"Encore des questions\u00a0?"},{"location":"/sync/","text":"Synchronisez tous vos terminaux avec votre Cozy synchronize your phone synchronize your desktop computer","title":"Restez synchro"},{"location":"/sync/#synchronisez-tous-vos-terminaux-avec-votre-cozy","text":"synchronize your phone synchronize your desktop computer","title":"Synchronisez tous vos terminaux avec votre Cozy"},{"location":"/sync/phone/","text":"Synchronisez votre t\u00e9l\u00e9phone avec votre Cozy Cette documentation sera bient\u00f4t disponible.","title":"Synchronisez vos t\u00e9l\u00e9phones"},{"location":"/sync/phone/#synchronisez-votre-telephone-avec-votre-cozy","text":"Cette documentation sera bient\u00f4t disponible.","title":"Synchronisez votre t\u00e9l\u00e9phone avec votre Cozy"},{"location":"/sync/desktop/","text":"Synchronisation avec votre ordinateur Le logiciel Cozy Drive pour ordinateur vous permet de synchroniser vos fichiers et vos dossiers entre votre Cozy et votre ordinateur. Vous pouvez ainsi travailler sur vos fichiers hors ligne. Les modifications seront alors synchronis\u00e9es d\u00e8s que vous retrouverez du r\u00e9seau. Installation Avant de commencer l installation de Cozy Drive pour ordinateur, assurez-vous d avoir un Cozy dans sa toute derni\u00e8re version. Windows Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour Windows sur cette page . List of known to work versions MacOS Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour MacOS sur cette page . List of known to work versions Linux D\u00e9couvrez comment installer et lancer Cozy Drive sous GNU/Linux Configuration \u00c0 la fin de l\u2019installation, l\u2019application va d\u00e9marrer et vous demander quelques informations : l\u2019URL de votre Cozy, c\u2019est \u00e0 dire l\u2019adresse de votre serveur ; le mot de passe de votre serveur. L\u2019application n\u2019enregistre pas ce mot de passe, mais elle en a besoin lors de la premi\u00e8re utilisation pour obtenir l\u2019autorisation de synchroniser vos fichiers ; le dossier dans lequel vous souhaitez synchroniser vos fichiers. Une fois ces quatre \u00e9crans pass\u00e9s, le logiciel va vous rediriger vers le tableau de bord et la premi\u00e8re synchronisation peut d\u00e9marrer. Le tableau de bord est compos\u00e9 : d\u2019un panneau d\u2019information sur les synchronisations en cours et l\u2019espace disque disponible de votre Cozy ; d\u2019une section de pr\u00e9f\u00e9rences vous permettant de d\u00e9marrer votre logiciel au d\u00e9marrage de votre ordinateur et vous indiquant sa version ; d\u2019une page vous donnant des informations sur le serveur auquel l\u2019application est connect\u00e9e et permettant de la d\u00e9connecter ; d\u2019une page d\u2019aide en cas de souci avec l\u2019application. En cas de soucis Si vous rencontrez un souci avec le logiciel de synchronisation Cozy Drive, vous pouvez nous le signaler et nous envoyer le journal d activit\u00e9s depuis l interface. Ouvrez l\u2019\u00e9cran d\u2019aide et cliquez sur Envoyez-nous un message dans la partie Support . N\u2019oubliez pas de d\u00e9crire votre souci dans le contenu du message, cela nous aide pour am\u00e9liorer encore notre logiciel.","title":"Synchronisez vos ordinateurs"},{"location":"/sync/desktop/#synchronisation-avec-votre-ordinateur","text":"Le logiciel Cozy Drive pour ordinateur vous permet de synchroniser vos fichiers et vos dossiers entre votre Cozy et votre ordinateur. Vous pouvez ainsi travailler sur vos fichiers hors ligne. Les modifications seront alors synchronis\u00e9es d\u00e8s que vous retrouverez du r\u00e9seau.","title":"Synchronisation avec votre ordinateur"},{"location":"/sync/desktop/#installation","text":"Avant de commencer l installation de Cozy Drive pour ordinateur, assurez-vous d avoir un Cozy dans sa toute derni\u00e8re version.","title":"Installation"},{"location":"/sync/desktop/#windows","text":"Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour Windows sur cette page . List of known to work versions","title":"Windows"},{"location":"/sync/desktop/#macos","text":"Vous pouvez t\u00e9l\u00e9charger Cozy Drive pour MacOS sur cette page . List of known to work versions","title":"MacOS"},{"location":"/sync/desktop/#linux","text":"D\u00e9couvrez comment installer et lancer Cozy Drive sous GNU/Linux","title":"Linux"},{"location":"/sync/desktop/#configuration","text":"\u00c0 la fin de l\u2019installation, l\u2019application va d\u00e9marrer et vous demander quelques informations : l\u2019URL de votre Cozy, c\u2019est \u00e0 dire l\u2019adresse de votre serveur ; le mot de passe de votre serveur. L\u2019application n\u2019enregistre pas ce mot de passe, mais elle en a besoin lors de la premi\u00e8re utilisation pour obtenir l\u2019autorisation de synchroniser vos fichiers ; le dossier dans lequel vous souhaitez synchroniser vos fichiers. Une fois ces quatre \u00e9crans pass\u00e9s, le logiciel va vous rediriger vers le tableau de bord et la premi\u00e8re synchronisation peut d\u00e9marrer. Le tableau de bord est compos\u00e9 : d\u2019un panneau d\u2019information sur les synchronisations en cours et l\u2019espace disque disponible de votre Cozy ; d\u2019une section de pr\u00e9f\u00e9rences vous permettant de d\u00e9marrer votre logiciel au d\u00e9marrage de votre ordinateur et vous indiquant sa version ; d\u2019une page vous donnant des informations sur le serveur auquel l\u2019application est connect\u00e9e et permettant de la d\u00e9connecter ; d\u2019une page d\u2019aide en cas de souci avec l\u2019application.","title":"Configuration"},{"location":"/sync/desktop/#en-cas-de-soucis","text":"Si vous rencontrez un souci avec le logiciel de synchronisation Cozy Drive, vous pouvez nous le signaler et nous envoyer le journal d activit\u00e9s depuis l interface. Ouvrez l\u2019\u00e9cran d\u2019aide et cliquez sur Envoyez-nous un message dans la partie Support . N\u2019oubliez pas de d\u00e9crire votre souci dans le contenu du message, cela nous aide pour am\u00e9liorer encore notre logiciel.","title":"En cas de soucis"},{"location":"/sync/linux/","text":"Installez le client de synchronisation sous GNU/Linux Pour faciliter l\u2019utilisation de Cozy Drive sur toutes les distributions GNU/Linux, nous utilisons le format AppImage qui permet d ex\u00e9cuter l\u2019application sans devoir l\u2019installer. Il suffit de la t\u00e9l\u00e9charger et de l\u2019ex\u00e9cuter L application est disponible pour les architectures 32 bits et 64 bits . Il suffit de la t\u00e9l\u00e9charger, copier le fichier dans un dossier, le rendre ex\u00e9cutable et de le lancer. \u00c9tat du support des diff\u00e9rentes distributions Instructions d\u00e9taill\u00e9es pour installer sous Gnome Click on one of these links to download Cozy Drive for your OS: Cozy Drive for GNU/Linux 32 bits ; Cozy Drive for GNU/Linux 64 bits ; Une fois le fichier t\u00e9l\u00e9charg\u00e9, rendez\u2013vous dans le dossier o\u00f9 votre navigateur l\u2019a stock\u00e9. Par exemple, si vous utilisez Firefox, cliquez sur l\u2019ic\u00f4ne de dossier dans la liste des t\u00e9l\u00e9chargements. Pour pouvoir lancer l\u2019application, vous devez d\u2019abord \u00e9diter ses propri\u00e9t\u00e9s pour la rendre ex\u00e9cutable. Faites un clic droit sur le fichier et choisissez Propri\u00e9t\u00e9s dans le menu contextuel : Then go to the Permissions tab and check the box to make the application executable: Il n\u2019est pas n\u00e9cessaire d\u2019installer l\u2019application, vous pouvez l\u2019ex\u00e9cuter depuis le dossier o\u00f9 vous l\u2019avez t\u00e9l\u00e9charg\u00e9e. Mais nous vous recommandons de la d\u00e9placer dans un dossier d\u00e9di\u00e9, afin de la retrouver plus facilement. Vous pouvez par exemple cr\u00e9er un dossier Applications dans votre dossier personnel et y d\u00e9placer l\u2019application. Astuce : pour retrouver plus facilement ce dossier, vous pouvez l ajouter aux signets de votre gestionnaire de fichiers. Une fois lanc\u00e9, Cozy ajoute une ic\u00f4ne dans votre barre d\u2019ic\u00f4ne. Vous pouvez interagir avec l\u2019application en cliquant sur cette ic\u00f4ne. Si vous utilisez Gnome, les versions sup\u00e9rieures \u00e0 3.26 ne proposent plus par d\u00e9faut de barre d\u2019ic\u00f4nes. Pour acc\u00e9der \u00e0 Cozy Drive, il faut donc installer une extension Gnome restaurant cette barre d\u2019ic\u00f4ne, par exemple TopIcons Voil\u00e0 ! Il ne vous reste plus qu\u2019\u00e0 double-cliquer sur l application pour la lancer et la connecter \u00e0 votre serveur. En savoir plus More in deep insights on the GNU/Linux client . Si votre distribution n\u2019est pas support\u00e9e, vous pouvez essayer de compiler vous-m\u00eame le client .","title":"Installer sur GNU/Linux"},{"location":"/sync/linux/#installez-le-client-de-synchronisation-sous-gnulinux","text":"Pour faciliter l\u2019utilisation de Cozy Drive sur toutes les distributions GNU/Linux, nous utilisons le format AppImage qui permet d ex\u00e9cuter l\u2019application sans devoir l\u2019installer. Il suffit de la t\u00e9l\u00e9charger et de l\u2019ex\u00e9cuter L application est disponible pour les architectures 32 bits et 64 bits . Il suffit de la t\u00e9l\u00e9charger, copier le fichier dans un dossier, le rendre ex\u00e9cutable et de le lancer. \u00c9tat du support des diff\u00e9rentes distributions","title":"Installez le client de synchronisation sous GNU/Linux"},{"location":"/sync/linux/#instructions-detaillees-pour-installer-sous-gnome","text":"Click on one of these links to download Cozy Drive for your OS: Cozy Drive for GNU/Linux 32 bits ; Cozy Drive for GNU/Linux 64 bits ; Une fois le fichier t\u00e9l\u00e9charg\u00e9, rendez\u2013vous dans le dossier o\u00f9 votre navigateur l\u2019a stock\u00e9. Par exemple, si vous utilisez Firefox, cliquez sur l\u2019ic\u00f4ne de dossier dans la liste des t\u00e9l\u00e9chargements. Pour pouvoir lancer l\u2019application, vous devez d\u2019abord \u00e9diter ses propri\u00e9t\u00e9s pour la rendre ex\u00e9cutable. Faites un clic droit sur le fichier et choisissez Propri\u00e9t\u00e9s dans le menu contextuel : Then go to the Permissions tab and check the box to make the application executable: Il n\u2019est pas n\u00e9cessaire d\u2019installer l\u2019application, vous pouvez l\u2019ex\u00e9cuter depuis le dossier o\u00f9 vous l\u2019avez t\u00e9l\u00e9charg\u00e9e. Mais nous vous recommandons de la d\u00e9placer dans un dossier d\u00e9di\u00e9, afin de la retrouver plus facilement. Vous pouvez par exemple cr\u00e9er un dossier Applications dans votre dossier personnel et y d\u00e9placer l\u2019application. Astuce : pour retrouver plus facilement ce dossier, vous pouvez l ajouter aux signets de votre gestionnaire de fichiers. Une fois lanc\u00e9, Cozy ajoute une ic\u00f4ne dans votre barre d\u2019ic\u00f4ne. Vous pouvez interagir avec l\u2019application en cliquant sur cette ic\u00f4ne. Si vous utilisez Gnome, les versions sup\u00e9rieures \u00e0 3.26 ne proposent plus par d\u00e9faut de barre d\u2019ic\u00f4nes. Pour acc\u00e9der \u00e0 Cozy Drive, il faut donc installer une extension Gnome restaurant cette barre d\u2019ic\u00f4ne, par exemple TopIcons Voil\u00e0 ! Il ne vous reste plus qu\u2019\u00e0 double-cliquer sur l application pour la lancer et la connecter \u00e0 votre serveur.","title":"Instructions d\u00e9taill\u00e9es pour installer sous Gnome"},{"location":"/sync/linux/#en-savoir-plus","text":"More in deep insights on the GNU/Linux client . Si votre distribution n\u2019est pas support\u00e9e, vous pouvez essayer de compiler vous-m\u00eame le client .","title":"En savoir plus"},{"location":"/download/","text":"T\u00e9l\u00e9chargez Cozy Drive pour tous vos terminaux Cozy Drive sur votre t\u00e9l\u00e9phone Cozy Drive pour iOS N\u00e9cessite iOS 10 ou sup\u00e9rieur Cozy Drive pour Android N\u00e9cessite Android 5.0.0 ou sup\u00e9rieur (Si vous ne souhaitez pas vous connecter \u00e0 Google Play, vous pouvez \u00e9galement utiliser directement le fichier APK ) Cozy Drive pour votre ordinateur Cozy Drive pour Mac OS Download for MacOS L application est optimis\u00e9e pour MacOS 10.12.X Sierra et les versions plus r\u00e9centes, mais devrait fonctionner sur des versions plus anciennes. Cozy Drive pour Windows Download for Microsoft Windows L application est optimis\u00e9e pour Windows 10, mais devrait fonctionner pour des versions plus anciennes. Cozy Drive for GNU/Linux Consultez la documentation compl\u00e8te sur l\u2019installation de Cozy Drive pour GNU/Linux. \u00c9tat du support des diff\u00e9rentes distributions","title":"T\u00e9l\u00e9charger"},{"location":"/download/#telechargez-cozy-drive-pour-tous-vos-terminaux","text":"","title":"T\u00e9l\u00e9chargez Cozy Drive pour tous vos terminaux"},{"location":"/download/#cozy-drive-sur-votre-telephone","text":"","title":"Cozy Drive sur votre t\u00e9l\u00e9phone"},{"location":"/download/#cozy-drive-pour-ios","text":"N\u00e9cessite iOS 10 ou sup\u00e9rieur","title":"Cozy Drive pour iOS"},{"location":"/download/#cozy-drive-pour-android","text":"N\u00e9cessite Android 5.0.0 ou sup\u00e9rieur (Si vous ne souhaitez pas vous connecter \u00e0 Google Play, vous pouvez \u00e9galement utiliser directement le fichier APK )","title":"Cozy Drive pour Android"},{"location":"/download/#cozy-drive-pour-votre-ordinateur","text":"","title":"Cozy Drive pour votre ordinateur"},{"location":"/download/#cozy-drive-pour-mac-os","text":"Download for MacOS L application est optimis\u00e9e pour MacOS 10.12.X Sierra et les versions plus r\u00e9centes, mais devrait fonctionner sur des versions plus anciennes.","title":"Cozy Drive pour Mac OS"},{"location":"/download/#cozy-drive-pour-windows","text":"Download for Microsoft Windows L application est optimis\u00e9e pour Windows 10, mais devrait fonctionner pour des versions plus anciennes.","title":"Cozy Drive pour Windows"},{"location":"/download/#cozy-drive-for-gnulinux","text":"Consultez la documentation compl\u00e8te sur l\u2019installation de Cozy Drive pour GNU/Linux. \u00c9tat du support des diff\u00e9rentes distributions","title":"Cozy Drive for GNU/Linux"},{"location":"/install/","text":"Install Cozy on your own server Learn how to install Cozy on Debian Stretch, Ubuntu Xenial or Raspbian Stretch ;","title":"Install Cozy on your own server"},{"location":"/install/#install-cozy-on-your-own-server","text":"Learn how to install Cozy on Debian Stretch, Ubuntu Xenial or Raspbian Stretch ;","title":"Install Cozy on your own server"},{"location":"/install/debian/","text":"Install Cozy on a Debian server A Debian repository serves packages to setup a Cozy self-hosted environment. It provides: cozy-couchdb : CouchDB database engine used by cozy cozy-nsjail : NSJail isolation tool used by konnectors cozy-stack : Cozy core cozy-coclyco : CLI to manage vhosts and certificates cozy : metapackage installing everything to setup a self-hosted environment This repository currently supports: Debian Stretch (9.x): amd64 Ubuntu Xenial (16.04 LTS): amd64 Raspbian Stretch (9.x): armhf Available channels are: stable : official and supported releases testing : future official releases, for testing purposes. Updated \u00b1 twice a month. unstable : nightly builds, to be use with caution cozy-couchdb and cozy-nsjail are temporary packages. They will be removed when official couchdb and nsjail will be available You can choose to install cozy-couchdb on the same host as cozy-stack , or use a remote CouchDB server. Cozy only needs a 2.x CouchDB (1.x not supported). Like CouchDB, you can choose to install your reverse proxy on the same host, or use a remote one. Right now cozy-coclyco supports only local nginx . If you want to use apache2 or remote reverse proxy, you need to manually configure it for vhost or TLS certificate issuances. Prerequisites Third party repositories Let s Encrypt official packages require to use unofficial/third party repositories to have recent and supported version of ACME libraries. Packages provided by standard Debian or Ubuntu repositories are quite old and not compatible with cozy-coclyco . For Debian/Raspbian, you need to enable backports repository . For Ubuntu, you need to activate a third party ppa repository . Refer to the certbot documentation to activate needed repositories. (You don t need to install packages like certbot or python-certbot-xxx , only to activate repositories.) You may change your APT preferences to allow APT to install from backports/ppa by default instead of from official repositories. For example: /etc/apt/preferences.d/cozy Package: python3-acme Pin: release n=stretch-backports Pin-Priority: 510 EOF Cozy repositories First, install the packages required to install cozy apt install ca-certificates apt-transport-https curl Then, fetch the GPG Cozy signing key: curl https://apt.cozy.io/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add - curl https://apt.cozy.io/nightly/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add - Finally, setup your repository. Select the channel that best fit your needs: For now, we recommend to use testing repositories, or nightly/unstable channels. stable packages are quite old and currently provide deprecated and unsecured CouchDB version (2.0.x). Adapt your sources.list accordingly. Supported repositories are: Debian Stretch (9.x) deb https://apt.cozy.io/debian/ stretch stable deb https://apt.cozy.io/debian/ stretch testing deb https://apt.cozy.io/nightly/debian/ stretch unstable Ubuntu Xenial (16.04 LTS) deb https://apt.cozy.io/ubuntu/ xenial stable deb https://apt.cozy.io/ubuntu/ xenial testing deb https://apt.cozy.io/nightly/ubuntu/ xenial unstable Raspbian Stretch (9.x) deb https://apt.cozy.io/raspbian/ stretch stable deb https://apt.cozy.io/raspbian/ stretch testing deb https://apt.cozy.io/nightly/raspbian/ stretch unstable echo deb https://apt.cozy.io/debian/ stretch testing /etc/apt/sources.list.d/cozy.list apt update If you want to use unstable/nightly builds, you have to accept another key (weaker and passwordless on our side because of unattended automated builds) curl https://apt.cozy.io/nightly/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add - Setup For the rest of this document, we assume you install components one by one to allow intermediate verification For a full local environment ( couchdb + nginx + cozy ), just install the cozy package which can install all needed packages in one shot. CouchDB apt install cozy-couchdb Install CouchDB in standalone mode Configure CouchDB to listen on 127.0.0.1 Pick an administrator password (This password is used by shell scripts, so currently avoid to use one with simple or double quotes or others shell meaningfull symbols. We advice you to choose one with only alphanumeric digits to avoid troubles.) At this point, you must have a working CouchDB instance curl http://localhost:5984/ { couchdb : Welcome , version : 2.1.0 , features :[ scheduler ], vendor :{ name : The Apache Software Foundation }} If you want to use unstable/nightly builds, you might get another version of the database. Cozy stack apt install cozy-stack Cozy need to create a CouchDB administrator and so to connect as admin to the CouchDB. Fill those mandatory parameters to allow this creation: Address: by default, it s localhost:5984 Node name: by default, it s couchdb@localhost Admin user: by default, it s admin Admin password: put the one you choose during CouchDB setup Cozy user: by default, it s cozy Cozy password: pick a password (Those passwords are used by shell scripts, so currently avoid to use ones with simple or double quotes or others shell meaningfull symbols. We advice you to choose ones with only alphanumeric digits to avoid troubles.) For stack management (create instances, install applications ), Cozy need an administrator password . So pick a new one. When invoking cozy-stack (or cozy-coclyco which use it under the hood), you need to set the COZY_ADMIN_PASSWORD environment variable with this password. You can put it on your .bashrc for simplier life if you want. If you don t, cozy-stack will simply ask for it. At this point, you must have a working Cozy stack, depending on the branch you ve chosen you can get a different version displayed. curl http://localhost:8080/version { build_mode : production , build_time : 2017-09-28T10:26:03Z , runtime_version : go1.8.1 , version : 0.1.0 }# If you want to use konnectors, you need to initialize the NodeJS chroot (Currently this script only works for Debian and will be adapted for Ubuntu and Raspbian soon) /usr/share/cozy/konnector-create-chroot.sh If you use a self-signed certificate or a not official certificate authority, you need to deploy the corresponding root certificate in /usr/share/cozy/chroot/etc/ssl/certs/custom.crt . For example, if you use Let s Encrypt staging environment for testing purpose : wget -q https://letsencrypt.org/certs/fakelerootx1.pem \\ -O /usr/share/cozy/chroot/etc/ssl/certs/custom.crt Finally apt install cozy Cozy instance setup DNS Cozy relies on sub-domains for each applications you installed on your instance. For an instance cozy.example.org , app .cozy.example.org must be available too. Currently, you need at least: onboarding.cozy.example.org settings.cozy.example.org drive.cozy.example.org photos.cozy.example.org collect.cozy.example.org store.cozy.example.org app .cozy.example.org for each application you use Follow your usual way to create those entries on your domain zone. The simpliest way to handle this is to use a wildcard entry if supported by your domain hosting. cozy 1h IN A x.x.x.x *.cozy 1h IN CNAME cozy ACME (Let s Encrypt) Like DNS, each application will use a different sub-domain and so request a certificate which include all needed domains. cozy-coclyco use Let s Encrypt and it ACME protocol to prove your ownership over the domain you try to issue a certificate. This protocol requires your reverse proxy to be able to serve http:// app .cozy.example.org/.well-known/acme-challenge/ requests correctly. The simplest way to achieve this is to configure your reverse proxy with a generic rule to forward any /.well-known/acme-challenge/ request to the corresponding /etc /ssl/private/acme-challenge/ folder. For nginx , this can be done with /etc/nginx/sites-available/default server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; server_name _; location /.well-known/acme-challenge/ { alias /etc/ssl/private/acme-challenge/; } location / { return 301 https://$host$request_uri; } } apt install ssl-cert adduser www-data ssl-cert systemctl restart nginx Create instances Once you ve got a stack, your DNS and your reverse proxy correctly configured, you can create instances on your Cozy stack. Remember to set the COZY_ADMIN_PASSWORD environment variable. export COZY_ADMIN_PASSWORD= your-admin-password cozy-coclyco create cozy.example.org me@example.org For complete reference of Coclyco, refer to the documentation of cozy-coclyco .","title":"Debian"},{"location":"/install/debian/#install-cozy-on-a-debian-server","text":"A Debian repository serves packages to setup a Cozy self-hosted environment. It provides: cozy-couchdb : CouchDB database engine used by cozy cozy-nsjail : NSJail isolation tool used by konnectors cozy-stack : Cozy core cozy-coclyco : CLI to manage vhosts and certificates cozy : metapackage installing everything to setup a self-hosted environment This repository currently supports: Debian Stretch (9.x): amd64 Ubuntu Xenial (16.04 LTS): amd64 Raspbian Stretch (9.x): armhf Available channels are: stable : official and supported releases testing : future official releases, for testing purposes. Updated \u00b1 twice a month. unstable : nightly builds, to be use with caution cozy-couchdb and cozy-nsjail are temporary packages. They will be removed when official couchdb and nsjail will be available You can choose to install cozy-couchdb on the same host as cozy-stack , or use a remote CouchDB server. Cozy only needs a 2.x CouchDB (1.x not supported). Like CouchDB, you can choose to install your reverse proxy on the same host, or use a remote one. Right now cozy-coclyco supports only local nginx . If you want to use apache2 or remote reverse proxy, you need to manually configure it for vhost or TLS certificate issuances.","title":"Install Cozy on a Debian server"},{"location":"/install/debian/#prerequisites","text":"","title":"Prerequisites"},{"location":"/install/debian/#third-party-repositories","text":"Let s Encrypt official packages require to use unofficial/third party repositories to have recent and supported version of ACME libraries. Packages provided by standard Debian or Ubuntu repositories are quite old and not compatible with cozy-coclyco . For Debian/Raspbian, you need to enable backports repository . For Ubuntu, you need to activate a third party ppa repository . Refer to the certbot documentation to activate needed repositories. (You don t need to install packages like certbot or python-certbot-xxx , only to activate repositories.) You may change your APT preferences to allow APT to install from backports/ppa by default instead of from official repositories. For example: /etc/apt/preferences.d/cozy Package: python3-acme Pin: release n=stretch-backports Pin-Priority: 510 EOF","title":"Third party repositories"},{"location":"/install/debian/#cozy-repositories","text":"First, install the packages required to install cozy apt install ca-certificates apt-transport-https curl Then, fetch the GPG Cozy signing key: curl https://apt.cozy.io/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add - curl https://apt.cozy.io/nightly/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add - Finally, setup your repository. Select the channel that best fit your needs: For now, we recommend to use testing repositories, or nightly/unstable channels. stable packages are quite old and currently provide deprecated and unsecured CouchDB version (2.0.x). Adapt your sources.list accordingly. Supported repositories are: Debian Stretch (9.x) deb https://apt.cozy.io/debian/ stretch stable deb https://apt.cozy.io/debian/ stretch testing deb https://apt.cozy.io/nightly/debian/ stretch unstable Ubuntu Xenial (16.04 LTS) deb https://apt.cozy.io/ubuntu/ xenial stable deb https://apt.cozy.io/ubuntu/ xenial testing deb https://apt.cozy.io/nightly/ubuntu/ xenial unstable Raspbian Stretch (9.x) deb https://apt.cozy.io/raspbian/ stretch stable deb https://apt.cozy.io/raspbian/ stretch testing deb https://apt.cozy.io/nightly/raspbian/ stretch unstable echo deb https://apt.cozy.io/debian/ stretch testing /etc/apt/sources.list.d/cozy.list apt update If you want to use unstable/nightly builds, you have to accept another key (weaker and passwordless on our side because of unattended automated builds) curl https://apt.cozy.io/nightly/cozy.gpg | \\ apt-key --keyring /etc/apt/trusted.gpg.d/cozy.gpg add -","title":"Cozy repositories"},{"location":"/install/debian/#setup","text":"For the rest of this document, we assume you install components one by one to allow intermediate verification For a full local environment ( couchdb + nginx + cozy ), just install the cozy package which can install all needed packages in one shot.","title":"Setup"},{"location":"/install/debian/#couchdb","text":"apt install cozy-couchdb Install CouchDB in standalone mode Configure CouchDB to listen on 127.0.0.1 Pick an administrator password (This password is used by shell scripts, so currently avoid to use one with simple or double quotes or others shell meaningfull symbols. We advice you to choose one with only alphanumeric digits to avoid troubles.) At this point, you must have a working CouchDB instance curl http://localhost:5984/ { couchdb : Welcome , version : 2.1.0 , features :[ scheduler ], vendor :{ name : The Apache Software Foundation }} If you want to use unstable/nightly builds, you might get another version of the database.","title":"CouchDB"},{"location":"/install/debian/#cozy-stack","text":"apt install cozy-stack Cozy need to create a CouchDB administrator and so to connect as admin to the CouchDB. Fill those mandatory parameters to allow this creation: Address: by default, it s localhost:5984 Node name: by default, it s couchdb@localhost Admin user: by default, it s admin Admin password: put the one you choose during CouchDB setup Cozy user: by default, it s cozy Cozy password: pick a password (Those passwords are used by shell scripts, so currently avoid to use ones with simple or double quotes or others shell meaningfull symbols. We advice you to choose ones with only alphanumeric digits to avoid troubles.) For stack management (create instances, install applications ), Cozy need an administrator password . So pick a new one. When invoking cozy-stack (or cozy-coclyco which use it under the hood), you need to set the COZY_ADMIN_PASSWORD environment variable with this password. You can put it on your .bashrc for simplier life if you want. If you don t, cozy-stack will simply ask for it. At this point, you must have a working Cozy stack, depending on the branch you ve chosen you can get a different version displayed. curl http://localhost:8080/version { build_mode : production , build_time : 2017-09-28T10:26:03Z , runtime_version : go1.8.1 , version : 0.1.0 }# If you want to use konnectors, you need to initialize the NodeJS chroot (Currently this script only works for Debian and will be adapted for Ubuntu and Raspbian soon) /usr/share/cozy/konnector-create-chroot.sh If you use a self-signed certificate or a not official certificate authority, you need to deploy the corresponding root certificate in /usr/share/cozy/chroot/etc/ssl/certs/custom.crt . For example, if you use Let s Encrypt staging environment for testing purpose : wget -q https://letsencrypt.org/certs/fakelerootx1.pem \\ -O /usr/share/cozy/chroot/etc/ssl/certs/custom.crt","title":"Cozy stack"},{"location":"/install/debian/#finally","text":"apt install cozy","title":"Finally"},{"location":"/install/debian/#cozy-instance-setup","text":"","title":"Cozy instance setup"},{"location":"/install/debian/#dns","text":"Cozy relies on sub-domains for each applications you installed on your instance. For an instance cozy.example.org , app .cozy.example.org must be available too. Currently, you need at least: onboarding.cozy.example.org settings.cozy.example.org drive.cozy.example.org photos.cozy.example.org collect.cozy.example.org store.cozy.example.org app .cozy.example.org for each application you use Follow your usual way to create those entries on your domain zone. The simpliest way to handle this is to use a wildcard entry if supported by your domain hosting. cozy 1h IN A x.x.x.x *.cozy 1h IN CNAME cozy","title":"DNS"},{"location":"/install/debian/#acme-lets-encrypt","text":"Like DNS, each application will use a different sub-domain and so request a certificate which include all needed domains. cozy-coclyco use Let s Encrypt and it ACME protocol to prove your ownership over the domain you try to issue a certificate. This protocol requires your reverse proxy to be able to serve http:// app .cozy.example.org/.well-known/acme-challenge/ requests correctly. The simplest way to achieve this is to configure your reverse proxy with a generic rule to forward any /.well-known/acme-challenge/ request to the corresponding /etc /ssl/private/acme-challenge/ folder. For nginx , this can be done with /etc/nginx/sites-available/default server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; server_name _; location /.well-known/acme-challenge/ { alias /etc/ssl/private/acme-challenge/; } location / { return 301 https://$host$request_uri; } } apt install ssl-cert adduser www-data ssl-cert systemctl restart nginx","title":"ACME (Let's Encrypt)"},{"location":"/install/debian/#create-instances","text":"Once you ve got a stack, your DNS and your reverse proxy correctly configured, you can create instances on your Cozy stack. Remember to set the COZY_ADMIN_PASSWORD environment variable. export COZY_ADMIN_PASSWORD= your-admin-password cozy-coclyco create cozy.example.org me@example.org For complete reference of Coclyco, refer to the documentation of cozy-coclyco .","title":"Create instances"},{"location":"/install/manual/","text":"How to install Cozy on Debian Stable \u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images. For now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors. Most of the following commands require root privileges. You can either open a root shell or use sudo when needed; Pre-requisites Cozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice. You ll also need a domain name and know how to associate all of its subdomains to the IP address of your server. Install dependencies On a fresh new Debian Stretch, here are the packages that may be useful to install and manage your server: apt-get update apt-get --no-install-recommends -y install \\ ca-certificates \\ curl \\ net-tools \\ nginx \\ sudo \\ vim-tiny \\ build-essential \\ pkg-config \\ erlang \\ libicu-dev \\ libmozjs185-dev \\ libcurl4-openssl-dev Install CouchDB T\u00e9l\u00e9chargez le code source de CouchDB 2 et installez-le . cd /tmp curl -LO https://dist.apache.org/repos/dist/release/couchdb/source/2.1.1/apache-couchdb-2.1.1.tar.gz tar xf apache-couchdb-2.1.1.tar.gz cd apache-couchdb-2.1.1 ./configure make release adduser --system \\ --no-create-home \\ --shell /bin/bash \\ --group --gecos \\ CouchDB Administrator couchdb We\u2019ll install CouchDB inside /home/couchdb : cp -R rel/couchdb /home/couchdb chown -R couchdb:couchdb /home/couchdb find /home/couchdb -type d -exec chmod 0770 {} \\; chmod -R 0644 /home/couchdb/etc/* mkdir /var/log/couchdb chown couchdb: /var/log/couchdb For now, we\u2019ll just run the database as a background job, but it is highly recommended to use some supervisor software. sudo -b -i -u couchdb sh -c '/home/couchdb/bin/couchdb /var/log/couchdb/couch.log 2 /var/log/couchdb/couch-err.log' Alternatively, you can setup a service script, and use systemd to run couchdb as a service : cat EOT /etc/systemd/system/couchdb.service [Unit] Description=Couchdb service After=network.target [Service] Type=simple User=couchdb ExecStart=/home/couchdb/bin/couchdb -o /dev/stdout -e /dev/stderr Restart=always [Install] WantedBy=multi-user.target EOT Then to start and enable (start at boot) the service : systemctl daemon-reload systemctl start couchdb.service systemctl enable couchdb.service Last but not least, let\u2019s create the default databases: curl -X PUT http://127.0.0.1:5984/_users curl -X PUT http://127.0.0.1:5984/_replicator curl -X PUT http://127.0.0.1:5984/_global_changes \u26a0\ufe0f The default CouchDB installation has no admin user. Everybody can query the server. So, in production environment, make sure to create en admin user and update the CouchDB connexion URL inside the configuration file of Cozy. Install the Cozy Stack The Cozy server is just a single binary. You can fetch one of its releases from Github: curl -o /usr/local/bin/cozy-stack \\ -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha chmod +x /usr/local/bin/cozy-stack adduser --system \\ --no-create-home \\ --shell /bin/bash \\ --group --gecos \\ Cozy cozy mkdir /var/log/cozy chown cozy: /var/log/cozy mkdir /var/lib/cozy chown -R cozy: /var/lib/cozy You can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file: mkdir /etc/cozy curl -o /etc/cozy/cozy.yaml \\ https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml chown -R cozy: /etc/cozy Edit this file to adapt it to your configuration. You should setup a directory to store the files. For example: fs: url: file://localhost/var/lib/cozy Don\u2019t forget to allow Cozy user to write inside this folder. Compile a recent stack The released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them: apt-get --no-install-recommends -y install \\ ca-certificates \\ curl \\ net-tools \\ nginx \\ sudo \\ vim-tiny \\ build-essential \\ pkg-config \\ erlang \\ libicu-dev \\ libmozjs185-dev \\ libcurl4-openssl-dev \\ git cd /tmp curl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz PATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack cp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack chmod +x /usr/local/bin/cozy-stack Configuration NGinx Let\u2019s assume you want to host a server on mycozy.tld with a self-signed certificate. Generate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain: sudo openssl req -x509 -nodes -newkey rsa:4096 \\ -keyout /etc/cozy/mycozy.tld.key \\ -out /etc/cozy/mycozy.tld.crt \\ -days 365 -subj /CN={*.mycozy.tld} Then create a virtual host for your server by creating a file at /etc/cozy/sites-available/mycozy.tld.conf with the following configuration template . And enable it by creating a symbolic link: sudo ln -s /etc/nginx/sites-available/mycozy.tld.conf \\ /etc/nginx/sites-enabled/ You can check that your configuration is valid by running sudo nginx -t -c /etc/nginx/nginx.conf And start NGinx: sudo service nginx start Or, if you use systemd: sudo systemctl start nginx sudo systemctl enable nginx # enable the nginx service at startup, if need to Cozy The Cozy server requires a main password: sudo /usr/local/bin/cozy-stack config passwd /etc/cozy/ This password will be asked every time you use the cozy-stack command line. To prevent this, you can set the COZY_ADMIN_PASSWORD environment variable. DNS Make sure to associate *.mycozy.tld with the IP address of your server. For example, add the following records to your DNS (replacing mycozy.tld with your domain of choice): mycozy.tld A your IP *.mycozy.tld CNAME mycozy.tld Running For now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software. First, start the server: sudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\ --log-level info \\ --host 0.0.0.0 /var/log/cozy/cozy.log 2 /var/log/cozy/cozy-err.log' Then, create your instance and install the applications: cozy-stack instances add \\ --host 0.0.0.0 \\ --apps drive,photos,collect,settings \\ --passphrase XXX \\ mycozy.tld passphrase XXX allows to set the initial password of the instance. You can add other instances by just running this commands again. The url of your cozy determines the name of your instance. If you choose another public port than the default public port for SSL (443), say 1443 , then you should reflect this when creating your cozy instance with the ${instance_domain} as mycozy.tld:1443 . Sample configuration files Nginx Put this file into /etc/nginx/sites-available and enable it by creating a symlink in /etc/nginx/sites-enabled . In this template, you need to replace the following placeholders: %PORT% with the public port nginx will listen to (default should be 443) %SERVER_PORT% with the private port cozy will listen to (default should be 8080) %DOMAIN% with your domain of choice: mycozy.tld in this example server { listen %PORT%; server_name *.%DOMAIN%; ssl_certificate /etc/cozy/%DOMAIN%.crt; ssl_certificate_key /etc/cozy/%DOMAIN%.key; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers EECDH+AES; ssl_prefer_server_ciphers on; ssl on; gzip_vary on; client_max_body_size 1024M; add_header Strict-Transport-Security max-age=31536000; location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect http:// https://; proxy_pass http://127.0.0.1:8080; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection upgrade ; } access_log /var/log/nginx/cozy.log; } TODO Cozy also requires a SMTP server (or relay).","title":"Installation manuelle"},{"location":"/install/manual/#how-to-install-cozy-on-debian-stable","text":"\u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images. For now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors. Most of the following commands require root privileges. You can either open a root shell or use sudo when needed;","title":"How to install Cozy on Debian Stable"},{"location":"/install/manual/#pre-requisites","text":"Cozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice. You ll also need a domain name and know how to associate all of its subdomains to the IP address of your server.","title":"Pre-requisites"},{"location":"/install/manual/#install-dependencies","text":"On a fresh new Debian Stretch, here are the packages that may be useful to install and manage your server: apt-get update apt-get --no-install-recommends -y install \\ ca-certificates \\ curl \\ net-tools \\ nginx \\ sudo \\ vim-tiny \\ build-essential \\ pkg-config \\ erlang \\ libicu-dev \\ libmozjs185-dev \\ libcurl4-openssl-dev","title":"Install dependencies"},{"location":"/install/manual/#install-couchdb","text":"T\u00e9l\u00e9chargez le code source de CouchDB 2 et installez-le . cd /tmp curl -LO https://dist.apache.org/repos/dist/release/couchdb/source/2.1.1/apache-couchdb-2.1.1.tar.gz tar xf apache-couchdb-2.1.1.tar.gz cd apache-couchdb-2.1.1 ./configure make release adduser --system \\ --no-create-home \\ --shell /bin/bash \\ --group --gecos \\ CouchDB Administrator couchdb We\u2019ll install CouchDB inside /home/couchdb : cp -R rel/couchdb /home/couchdb chown -R couchdb:couchdb /home/couchdb find /home/couchdb -type d -exec chmod 0770 {} \\; chmod -R 0644 /home/couchdb/etc/* mkdir /var/log/couchdb chown couchdb: /var/log/couchdb For now, we\u2019ll just run the database as a background job, but it is highly recommended to use some supervisor software. sudo -b -i -u couchdb sh -c '/home/couchdb/bin/couchdb /var/log/couchdb/couch.log 2 /var/log/couchdb/couch-err.log' Alternatively, you can setup a service script, and use systemd to run couchdb as a service : cat EOT /etc/systemd/system/couchdb.service [Unit] Description=Couchdb service After=network.target [Service] Type=simple User=couchdb ExecStart=/home/couchdb/bin/couchdb -o /dev/stdout -e /dev/stderr Restart=always [Install] WantedBy=multi-user.target EOT Then to start and enable (start at boot) the service : systemctl daemon-reload systemctl start couchdb.service systemctl enable couchdb.service Last but not least, let\u2019s create the default databases: curl -X PUT http://127.0.0.1:5984/_users curl -X PUT http://127.0.0.1:5984/_replicator curl -X PUT http://127.0.0.1:5984/_global_changes \u26a0\ufe0f The default CouchDB installation has no admin user. Everybody can query the server. So, in production environment, make sure to create en admin user and update the CouchDB connexion URL inside the configuration file of Cozy.","title":"Install CouchDB"},{"location":"/install/manual/#install-the-cozy-stack","text":"The Cozy server is just a single binary. You can fetch one of its releases from Github: curl -o /usr/local/bin/cozy-stack \\ -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha chmod +x /usr/local/bin/cozy-stack adduser --system \\ --no-create-home \\ --shell /bin/bash \\ --group --gecos \\ Cozy cozy mkdir /var/log/cozy chown cozy: /var/log/cozy mkdir /var/lib/cozy chown -R cozy: /var/lib/cozy You can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file: mkdir /etc/cozy curl -o /etc/cozy/cozy.yaml \\ https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml chown -R cozy: /etc/cozy Edit this file to adapt it to your configuration. You should setup a directory to store the files. For example: fs: url: file://localhost/var/lib/cozy Don\u2019t forget to allow Cozy user to write inside this folder.","title":"Install the Cozy Stack"},{"location":"/install/manual/#compile-a-recent-stack","text":"The released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them: apt-get --no-install-recommends -y install \\ ca-certificates \\ curl \\ net-tools \\ nginx \\ sudo \\ vim-tiny \\ build-essential \\ pkg-config \\ erlang \\ libicu-dev \\ libmozjs185-dev \\ libcurl4-openssl-dev \\ git cd /tmp curl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz PATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack cp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack chmod +x /usr/local/bin/cozy-stack","title":"Compile a recent stack"},{"location":"/install/manual/#configuration","text":"","title":"Configuration"},{"location":"/install/manual/#nginx","text":"Let\u2019s assume you want to host a server on mycozy.tld with a self-signed certificate. Generate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain: sudo openssl req -x509 -nodes -newkey rsa:4096 \\ -keyout /etc/cozy/mycozy.tld.key \\ -out /etc/cozy/mycozy.tld.crt \\ -days 365 -subj /CN={*.mycozy.tld} Then create a virtual host for your server by creating a file at /etc/cozy/sites-available/mycozy.tld.conf with the following configuration template . And enable it by creating a symbolic link: sudo ln -s /etc/nginx/sites-available/mycozy.tld.conf \\ /etc/nginx/sites-enabled/ You can check that your configuration is valid by running sudo nginx -t -c /etc/nginx/nginx.conf And start NGinx: sudo service nginx start Or, if you use systemd: sudo systemctl start nginx sudo systemctl enable nginx # enable the nginx service at startup, if need to","title":"NGinx"},{"location":"/install/manual/#cozy","text":"The Cozy server requires a main password: sudo /usr/local/bin/cozy-stack config passwd /etc/cozy/ This password will be asked every time you use the cozy-stack command line. To prevent this, you can set the COZY_ADMIN_PASSWORD environment variable.","title":"Cozy"},{"location":"/install/manual/#dns","text":"Make sure to associate *.mycozy.tld with the IP address of your server. For example, add the following records to your DNS (replacing mycozy.tld with your domain of choice): mycozy.tld A your IP *.mycozy.tld CNAME mycozy.tld","title":"DNS"},{"location":"/install/manual/#running","text":"For now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software. First, start the server: sudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\ --log-level info \\ --host 0.0.0.0 /var/log/cozy/cozy.log 2 /var/log/cozy/cozy-err.log' Then, create your instance and install the applications: cozy-stack instances add \\ --host 0.0.0.0 \\ --apps drive,photos,collect,settings \\ --passphrase XXX \\ mycozy.tld passphrase XXX allows to set the initial password of the instance. You can add other instances by just running this commands again. The url of your cozy determines the name of your instance. If you choose another public port than the default public port for SSL (443), say 1443 , then you should reflect this when creating your cozy instance with the ${instance_domain} as mycozy.tld:1443 .","title":"Running"},{"location":"/install/manual/#sample-configuration-files","text":"","title":"Sample configuration files"},{"location":"/install/manual/#nginx_1","text":"Put this file into /etc/nginx/sites-available and enable it by creating a symlink in /etc/nginx/sites-enabled . In this template, you need to replace the following placeholders: %PORT% with the public port nginx will listen to (default should be 443) %SERVER_PORT% with the private port cozy will listen to (default should be 8080) %DOMAIN% with your domain of choice: mycozy.tld in this example server { listen %PORT%; server_name *.%DOMAIN%; ssl_certificate /etc/cozy/%DOMAIN%.crt; ssl_certificate_key /etc/cozy/%DOMAIN%.key; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers EECDH+AES; ssl_prefer_server_ciphers on; ssl on; gzip_vary on; client_max_body_size 1024M; add_header Strict-Transport-Security max-age=31536000; location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect http:// https://; proxy_pass http://127.0.0.1:8080; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection upgrade ; } access_log /var/log/nginx/cozy.log; }","title":"Nginx"},{"location":"/install/manual/#todo","text":"Cozy also requires a SMTP server (or relay).","title":"TODO"},{"location":"/dev/","text":"Let s hack some code Tutorials introduction \u00e0 l\u2019architecture de Cozy apprenez \u00e0 d\u00e9velopper votre premi\u00e8re application how to develop a connector how to create a mobile application with cordova how to send mail in development How to Cette documentation sera bient\u00f4t disponible. API References Browse the full API reference inside our repositories: Cozy Client JS Reference Iintroduction documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers offline Cozy Bar Cozy UI introduction styleguide react components in storybook Raw Server API introduction: API architecture conventions JSON-API applications : install, update, list applications marketplace permissions notifications settings auth documents query the database files link files to documents jobs workers architecture and API inter-application communication sharing connectors realtime Proxy for remote data/API Available doctypes We maintain an index of all the currently available doctypes . To make your own doctypes available to other applications, please send a pull request to this repository.","title":"Introduction"},{"location":"/dev/#lets-hack-some-code","text":"","title":"Let's hack some code"},{"location":"/dev/#tutorials","text":"introduction \u00e0 l\u2019architecture de Cozy apprenez \u00e0 d\u00e9velopper votre premi\u00e8re application how to develop a connector how to create a mobile application with cordova how to send mail in development","title":"Tutorials"},{"location":"/dev/#how-to","text":"Cette documentation sera bient\u00f4t disponible.","title":"How to"},{"location":"/dev/#api-references","text":"Browse the full API reference inside our repositories:","title":"API References"},{"location":"/dev/#cozy-client-js-reference","text":"Iintroduction documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers offline Cozy Bar","title":"Cozy Client JS Reference"},{"location":"/dev/#cozy-ui","text":"introduction styleguide react components in storybook","title":"Cozy UI"},{"location":"/dev/#raw-server-api","text":"introduction: API architecture conventions JSON-API applications : install, update, list applications marketplace permissions notifications settings auth documents query the database files link files to documents jobs workers architecture and API inter-application communication sharing connectors realtime Proxy for remote data/API","title":"Raw Server API"},{"location":"/dev/#available-doctypes","text":"We maintain an index of all the currently available doctypes . To make your own doctypes available to other applications, please send a pull request to this repository.","title":"Available doctypes"},{"location":"/dev/intro/","text":"Introduction Cozy is a personal server hosting applications that allow collect and manipulate all your personal data. There are two kind of applications: web applications : that s Single Page Applications (SPA) written in HTML and JavaScript that run inside the user s browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails connectors : that s small application written in JavaScript, running on the server side, that import your data from remote sources. In this tutorial, you ll learn how to write a client application and a connector . Architecture Several layers can be distinguished. From inside to outside: the core is a database that store all user data; the database is accessible through a layer that control accesses and expose a REST API; Web applications and other clients offer nice user interfaces to interact with the data. One of our motto is \u00ab Cozy is Simple, Versatile, Yours \u00bb. This applies to our architecture: simple and easy to understand and deploy. Cozy doesn\u2019t require to setup and manage a lot of micro-services; versatile : our server is comfortable anywhere. You can host a single instance on a small Raspberry \u03c0 at home, or a cluster of thousands instances on dedicated servers inside a datacenter; yours : the users are the owners of their data, they keep the control. They can migrate their data from one server to another, and are not dependant from a single hosting provider. As we say: \u201cyou will stay because you can leave\u201d; The server The server consist of a single process. We call it the Cozy stack . It provides services through a REST API that allow to: create, update, delete documents inside the database; send emails; launch jobs on the server. Connectors that import data from remote websites are some sort of jobs. Jobs can be one time tasks (sending a message) or periodic tasks. Some jobs, like the connectors, that require executing third party code on the server side, are sandboxed (we user nsjail for now). \u2026 The server also allow to access the database replication API, allowing to sync documents between the server and local databases, for example in mobile clients. Two authentication methods are available: Web applications running on the server get a session token when the user log in; OAuth2 for other applications. The server is in charge of serving the Web applications users have installed from the application store. The database CouchDB is a document database. Everything, from user data to server settings, is stored inside typed documents, identified by an unique id. Two request methods are allowed: map-reduce or Mango , a specific query language. Every document has a doctype , and we keep an index of the definition of every doctype. Binary data are stored outside the database. Depending on the server configuration, they may be stored on a file system or a dedicated object storage like swift . The datasystem layer inside the Cozy stack is in charge of controlling access rights on documents and binaries. It allows fine gained access control, on a whole doctype or on a set of documents. The applications The server provide services to applications: real time notifications of events; methods allowing applications to communicate and share data; methods allowing sharing of documents between servers. Application store An application registry lists every available applications, and their characteristics. Each application can: create its own doctypes; request permission to access documents; offer services to other applications; register publics routes; create jobs that will be run on server side. Security Each application uses its own sub-domain name, so it gets sandboxed inside the browser: other application are not able to steal it access token and access its data. We use Content Security Policy to control what the application is allowed to do. For example, Web applications running inside Cozy are not allowed to send requests to other websites. This allow a strict control over applications, preventing them to leak your data.","title":"Architecture"},{"location":"/dev/intro/#introduction","text":"Cozy is a personal server hosting applications that allow collect and manipulate all your personal data. There are two kind of applications: web applications : that s Single Page Applications (SPA) written in HTML and JavaScript that run inside the user s browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails connectors : that s small application written in JavaScript, running on the server side, that import your data from remote sources. In this tutorial, you ll learn how to write a client application and a connector .","title":"Introduction"},{"location":"/dev/intro/#architecture","text":"Several layers can be distinguished. From inside to outside: the core is a database that store all user data; the database is accessible through a layer that control accesses and expose a REST API; Web applications and other clients offer nice user interfaces to interact with the data. One of our motto is \u00ab Cozy is Simple, Versatile, Yours \u00bb. This applies to our architecture: simple and easy to understand and deploy. Cozy doesn\u2019t require to setup and manage a lot of micro-services; versatile : our server is comfortable anywhere. You can host a single instance on a small Raspberry \u03c0 at home, or a cluster of thousands instances on dedicated servers inside a datacenter; yours : the users are the owners of their data, they keep the control. They can migrate their data from one server to another, and are not dependant from a single hosting provider. As we say: \u201cyou will stay because you can leave\u201d;","title":"Architecture"},{"location":"/dev/intro/#the-server","text":"The server consist of a single process. We call it the Cozy stack . It provides services through a REST API that allow to: create, update, delete documents inside the database; send emails; launch jobs on the server. Connectors that import data from remote websites are some sort of jobs. Jobs can be one time tasks (sending a message) or periodic tasks. Some jobs, like the connectors, that require executing third party code on the server side, are sandboxed (we user nsjail for now). \u2026 The server also allow to access the database replication API, allowing to sync documents between the server and local databases, for example in mobile clients. Two authentication methods are available: Web applications running on the server get a session token when the user log in; OAuth2 for other applications. The server is in charge of serving the Web applications users have installed from the application store.","title":"The server"},{"location":"/dev/intro/#the-database","text":"CouchDB is a document database. Everything, from user data to server settings, is stored inside typed documents, identified by an unique id. Two request methods are allowed: map-reduce or Mango , a specific query language. Every document has a doctype , and we keep an index of the definition of every doctype. Binary data are stored outside the database. Depending on the server configuration, they may be stored on a file system or a dedicated object storage like swift . The datasystem layer inside the Cozy stack is in charge of controlling access rights on documents and binaries. It allows fine gained access control, on a whole doctype or on a set of documents.","title":"The database"},{"location":"/dev/intro/#the-applications","text":"The server provide services to applications: real time notifications of events; methods allowing applications to communicate and share data; methods allowing sharing of documents between servers.","title":"The applications"},{"location":"/dev/intro/#application-store","text":"An application registry lists every available applications, and their characteristics. Each application can: create its own doctypes; request permission to access documents; offer services to other applications; register publics routes; create jobs that will be run on server side.","title":"Application store"},{"location":"/dev/intro/#security","text":"Each application uses its own sub-domain name, so it gets sandboxed inside the browser: other application are not able to steal it access token and access its data. We use Content Security Policy to control what the application is allowed to do. For example, Web applications running inside Cozy are not allowed to send requests to other websites. This allow a strict control over applications, preventing them to leak your data.","title":"Security"},{"location":"/dev/app/","text":"How to create your first Cozy application Prerequisite Developing an application for Cozy is quite easy. All you need to have is: NodeJS 8+ Yarn : a NodeJS package manager, like npm Docker to have a Cozy for dev Some basics about developing a single page application in HTML/JS or you just want to learn :) The only tool required to have a Cozy for development is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system. Install the development environment On GNU/Linux, according to the documentation : \u00ab The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at Docker\u2019s documentation on security . Every application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server. The easiest way is to use the Docker image for developers we provide. Just install it: docker pull cozy/cozy-app-dev (We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running docker pull cozy/cozy-app-dev from time to time). Create your application You can boostrap your application from scratch if you want, but we recommand to use our new community tool create-cozy-app to bootstrap very easily a Cozy application for you. This tool will generate an application using (P)React, the framework we internally use in the Cozy Front team. But options are available if you want to use other frameworks. For now the new cozy-client is used only in the (P)React template (it doesn t use the previous cozy-client-js anymore). This library is at an early stage but you can use it, it will be our next Cozy client for application development. First of all, run directly create-cozy-app without installing it globally by using the yarn create cozy-app command to bootstrap your application: yarn create cozy-app mycozyapp The script will download some dependencies (may take a while) and ask you a few questions, then create an application skeleton inside mycozyapp . That s all! You can start hacking: cd mycozyapp yarn watch:standalone After the webpack build, your app should be available at http://localhost:8888 You can change the host and the port of your application server here by using respectively the environment variables HOST and PORT Run it inside a Cozy using Docker You can run your application (here mycozyapp ) inside a Cozy thanks to the [cozy-stack docker image][cozy-stack-docker]: # in a terminal, run your app in watch mode $ cd mycozyapp $ yarn watch:browser Then, in another terminal: # in another terminal, run the docker container $ yarn stack:docker # or if you want the complete command (see more documentation below) $ docker run --rm -it -p 8080:8080 -v $(pwd)/build :/data/cozy-app/mycozyapp cozy/cozy-app-dev Your app is now available at http://mycozyapp.cozy.tools:8080. Extra documentation about application development How is the application working? Une application minimale ne se compose que de deux fichiers : un fichier HTML, index.html , contenant le balisage et le code de votre application ; a manifest describing the application. It\u2019s a JSON file named manifest.webapp with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. Your application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into index.html when it serves the page. So the index.html file has to contain some string that will be replaced by the server. The general syntax of this variables is {{\u2026}} , so don\u2019t use this syntax for other purpose in the page, for example inside comments. You can use the following variables: {{.Domain}} will be substituted by the URL of the API entrypoint {{.Token}} will be replaced by a token that authenticate your application when accessing the API {{.Locale}} : the lang f the instance {{.AppName}} : the name of the application {{.IconPath}} will be replaced by HTML code to display the favicon {{.CozyClientJS}} will be replaced with HTML code to inject the Cozy client library {{.CozyBar}} will be replaced with HTML code to inject the upper menu bar. Use the API with cozy-client-js We are currently working on a new cozy-client library which will be more updated and used in the future than cozy-client-js . But the two libraries ( cozy-client and cozy-client-js ) don t rely on each other so you can still use the one you want to handle Cozy data for now. If you added {{.CozyClientJS}} to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application): window.cozy.client.init({cozyURL: \u2026 , token: \u2026 }); You can then interact with the server by using methods of the window.cozy.client properties. For example, to get current disk usage: cozy.client.settings.diskUsage() .then(function (usage) {console.log( Usage (promise) , usage);}); .catch(function(err){ console.log( fail , err); }); This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link. Behind the magic Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Client JS library. Connecting to the API requires three things: its URL, injected into the page through the {{.Domain}} variable the application auth token, injected into the page through the {{.Token}} variable. Each request sent to the server must include this token in the Authorization header the session cookie, created when you connect to your server. This is an HttpOnly cookie , meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie. Here\u2019s a sample code that get API informations provided by the server and query the API: div data-cozy-token= {{.Token}} data-cozy-domain= {{.Domain}} / document.addEventListener('DOMContentLoaded', () = { use strict ; const app = document.querySelector('[data-cozy-token]'); fetch(`//${app.dataset.cozyDomain}/apps`, { method: 'GET', headers: { Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token }, credentials: 'include' // don\u2019t forget to include the session cookie }) .then(function (response) { if (response.ok) { response.json().then((result) = { console.log(result); }); } else { throw new Error('Network response was not ok.'); } }) .catch(function (error) { console.log('There has been a problem with your fetch operation: ' + error.message); }); }); The manifest Each application must have a \u201cmanifest\u201d. It\u2019s a JSON file named manifest.webapp stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026 Here\u2019s a sample manifest: { name : My Awesome application , permissions : { apps : { type : io.cozy.apps }, permissions : { type : io.cozy.permissions }, settings : { type : io.cozy.settings }, sample : { type : io.cozy.dev.sample , verbs : [ GET , POST , PUT , PATCH , DELETE ] }, jobs : { type : io.cozy.jobs } }, routes : { / : { folder : / , index : index.html , public : false }, /public : { folder : /public , index : index.html , public : true } } } Permissions Applications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time. A permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents. In the manifest, each permission is an object, with a random name and some properties: type : mandatory the document type or action name description : a text that will be displayed to the user to explain why the application require this permission verbs : an array of HTTP verbs. For example, to limit permissions to read access, use [ GET ] selector : a document attribute to limit access to a subset of documents values : array of allowed values for this attribute. An application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API. Samples Application require full access to files: { permissions : { files : { description : \u2026 , type : io.cozy.files }, } } Application want to be able to read the contact informations of cozy@cozycloud.cc { permissions : { contact : { type : io.cozy.contacts , verbs : [ GET ], selector : email , values : [ cozy@cozycloud.cc ] } } } Routing The application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties: folder : the base folder of the route index : the name of the file inside this folder public : a boolean specifying whether the route is public or private (default). Sample: routes : { /admin : { folder : / , index : admin.html , public : false }, /public : { folder : /public , index : index.html , public : true }, /assets : { folder : /assets , public : true } } cozy-client-js This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. The library expose a client API under the window.cozy.client namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application): window.cozy.client.init({cozyURL: \u2026 , token: \u2026 }); The library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add disablePromises to the options when initializing the library: window.cozy.client.init({cozyURL: \u2026 , token: \u2026 , disablePromises: true}); window.client.settings.diskUsage(function (err, res) { (\u2026) }); Raw API documentation In this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation: documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers sharing offline Cozy Bar Manipulating documents Inside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use the Java specification . Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by io.cozy or io.cozy.labs . If you don\u2019t own a domain name, and your email address is foo@bar.cloud , prefix your doctype names with cloud.bar.foo . We maintain an index of all the currently available doctypes . To make your own doctypes available to other applications, please send a pull request to this repository. Before manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically. Every method allowing to handle document are available under the cozy.client.data namespace. For example: cozy.client.data.create(doctype, attributes) , cozy.client.data.update(doctype, doc, newdoc) cozy.client.data.delete(doctype, doc) to create, update and delete documents cozy.client.data.updateAttributes(doctype, id, changes) to only update some attributes of a document cozy.client.data.find(doctype, id) return a document using its ident cozy.client.data.changesFeed(doctype, options) get the latests updates of documents of a doctype you can attach files to a document using cozy.client.data.addReferencedFiles(doc, fileIds) and list attachments with cozy.client.data.listReferencedFiles(doc) Querying To search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods: cozy.client.data.defineIndex(doctype, fields) to create the index cozy.client.data.query(indexReference, query) to query an index. The query parameter uses the syntax of the Mango API from CouchDB 2. For example, to search contacts by their email address, you could use: cozy.client.data.defineIndex( io.cozy.contacts , [ email ]) .then((index) = { return cozy.data.query(index, { selector : {email: cozy@cozycloud.cc }}) }) .then( (result) = { console.log(result[0].name); }); Manipulating files The metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system. The library offer a lot of methods under cozy.client.files namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the raw API documentation : create() and updateById() to create and update a file createDirectory() to create a folder updateAttributesById() et updateAttributesByPath() allow to update some metadata use destroyById to remove a file a virtual trash is available. You can put files into the trash ( trashById() ) and restore them ( restoreById() ). You can also list the content of the trash ( listTrash() ) and purge all trashed files ( clearTrash() ) statById(id) et statByPath(path) return the metadata and, or folders, their content Folders When using statById() or statByPath() to get metadata of of folder, you can than call relations() on the resulting object to access their content. For example, to list content of the root folder, use: cozy.client.files.statByPath( / ) .then((dir) = { console.log(dir.relations( contents )); }) Some special folder have a pre-defined id that will never change: io.cozy.files.root-dir is the root of the filesystem io.cozy.files.trash-dir is the trash. The Cozy Bar The Cozy Bar is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing. Your application interacts with this component through cozy-bar.js , a library injected into your pages by the server when you add {{.CozyBar}} in the header. It exposes an API behind the window.cozy.bar namespace. Before using it, you have to initialize the library: window.cozy.bar.init({appName: Mon application }) . Styling If you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then Cozy UI is here for you! It relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box. The development server using Docker (remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use sudo to run each of this commands.) To run your application inside the development server, just run the following command from the folder where your index.html and manifest.webapp files leave: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev Let\u2019s have a quick look at this command, so you can adapt it to your needs: rm will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images -it allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server -p 8080:8080 : the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use -p 9090:8080 -p 5984:5984 : this is just a convenient way to access the CouchDB database running inside the server. Point your browser to http://cozy.tools:5984/_utils/ to access its administrative interface -p 8025:8025 : Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to http://cozy.tools:8025/ to display the messages sent by the server -v $(pwd):/data/cozy-app this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server name cozydev name the running virtual machine cozydev , so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use docker exec -ti /bin/bash With this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database. However, if you want to persist data, you have to mount two folders from the virtual server to local folders: /usr/local/couchdb/data (database) and /data/cozy-storage (the virtual filesystem). This can be achieved by adding to the command line -v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage which will store the server\u2019s data into ~/cozy/data . Once the server started, go to http://app.cozy.tools:8080/# , connect to the server with the default password cozy and you should be able to start testing your application. You can also access the following URLs: http://cozy.tools:5984/_utils to get the database administrative panel http://cozy.tools:8025/ to display the emails sent by the server. Test multiple applications You can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of /data/cozy-apps . For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in ~/cozy/drive and ~/cozy/photos , start the development server with: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v ~/cozy/drive:/data/cozy-app/drive -v ~/cozy/photos:/data-cozy-app/photos --name=cozydev cozy/cozy-app-dev You\u2019ll access the applications by connecting to http://drive.cozy.tools:8080/ and http://photos.cozy.tools:8080 . What is cozy.tools ? This development server use the domain names *.cozy.tools . We have parameterized this domain to always redirect to 127.0.0.1 , your local computer address. With that, no need to configure your environment to set extra local hosts for development anymore.","title":"Cr\u00e9ez votre premi\u00e8re application"},{"location":"/dev/app/#how-to-create-your-first-cozy-application","text":"","title":"How to create your first Cozy application"},{"location":"/dev/app/#prerequisite","text":"Developing an application for Cozy is quite easy. All you need to have is: NodeJS 8+ Yarn : a NodeJS package manager, like npm Docker to have a Cozy for dev Some basics about developing a single page application in HTML/JS or you just want to learn :) The only tool required to have a Cozy for development is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system.","title":"Prerequisite"},{"location":"/dev/app/#install-the-development-environment","text":"On GNU/Linux, according to the documentation : \u00ab The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at Docker\u2019s documentation on security . Every application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server. The easiest way is to use the Docker image for developers we provide. Just install it: docker pull cozy/cozy-app-dev (We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running docker pull cozy/cozy-app-dev from time to time).","title":"Install the development environment"},{"location":"/dev/app/#create-your-application","text":"You can boostrap your application from scratch if you want, but we recommand to use our new community tool create-cozy-app to bootstrap very easily a Cozy application for you. This tool will generate an application using (P)React, the framework we internally use in the Cozy Front team. But options are available if you want to use other frameworks. For now the new cozy-client is used only in the (P)React template (it doesn t use the previous cozy-client-js anymore). This library is at an early stage but you can use it, it will be our next Cozy client for application development. First of all, run directly create-cozy-app without installing it globally by using the yarn create cozy-app command to bootstrap your application: yarn create cozy-app mycozyapp The script will download some dependencies (may take a while) and ask you a few questions, then create an application skeleton inside mycozyapp . That s all! You can start hacking: cd mycozyapp yarn watch:standalone After the webpack build, your app should be available at http://localhost:8888 You can change the host and the port of your application server here by using respectively the environment variables HOST and PORT","title":"Create your application"},{"location":"/dev/app/#run-it-inside-a-cozy-using-docker","text":"You can run your application (here mycozyapp ) inside a Cozy thanks to the [cozy-stack docker image][cozy-stack-docker]: # in a terminal, run your app in watch mode $ cd mycozyapp $ yarn watch:browser Then, in another terminal: # in another terminal, run the docker container $ yarn stack:docker # or if you want the complete command (see more documentation below) $ docker run --rm -it -p 8080:8080 -v $(pwd)/build :/data/cozy-app/mycozyapp cozy/cozy-app-dev Your app is now available at http://mycozyapp.cozy.tools:8080.","title":"Run it inside a Cozy using Docker"},{"location":"/dev/app/#extra-documentation-about-application-development","text":"","title":"Extra documentation about application development"},{"location":"/dev/app/#how-is-the-application-working","text":"Une application minimale ne se compose que de deux fichiers : un fichier HTML, index.html , contenant le balisage et le code de votre application ; a manifest describing the application. It\u2019s a JSON file named manifest.webapp with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. Your application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into index.html when it serves the page. So the index.html file has to contain some string that will be replaced by the server. The general syntax of this variables is {{\u2026}} , so don\u2019t use this syntax for other purpose in the page, for example inside comments. You can use the following variables: {{.Domain}} will be substituted by the URL of the API entrypoint {{.Token}} will be replaced by a token that authenticate your application when accessing the API {{.Locale}} : the lang f the instance {{.AppName}} : the name of the application {{.IconPath}} will be replaced by HTML code to display the favicon {{.CozyClientJS}} will be replaced with HTML code to inject the Cozy client library {{.CozyBar}} will be replaced with HTML code to inject the upper menu bar.","title":"How is the application working?"},{"location":"/dev/app/#use-the-api-with-cozy-client-js","text":"We are currently working on a new cozy-client library which will be more updated and used in the future than cozy-client-js . But the two libraries ( cozy-client and cozy-client-js ) don t rely on each other so you can still use the one you want to handle Cozy data for now. If you added {{.CozyClientJS}} to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application): window.cozy.client.init({cozyURL: \u2026 , token: \u2026 }); You can then interact with the server by using methods of the window.cozy.client properties. For example, to get current disk usage: cozy.client.settings.diskUsage() .then(function (usage) {console.log( Usage (promise) , usage);}); .catch(function(err){ console.log( fail , err); }); This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link.","title":"Use the API with cozy-client-js"},{"location":"/dev/app/#behind-the-magic","text":"Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Client JS library. Connecting to the API requires three things: its URL, injected into the page through the {{.Domain}} variable the application auth token, injected into the page through the {{.Token}} variable. Each request sent to the server must include this token in the Authorization header the session cookie, created when you connect to your server. This is an HttpOnly cookie , meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie. Here\u2019s a sample code that get API informations provided by the server and query the API: div data-cozy-token= {{.Token}} data-cozy-domain= {{.Domain}} / document.addEventListener('DOMContentLoaded', () = { use strict ; const app = document.querySelector('[data-cozy-token]'); fetch(`//${app.dataset.cozyDomain}/apps`, { method: 'GET', headers: { Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token }, credentials: 'include' // don\u2019t forget to include the session cookie }) .then(function (response) { if (response.ok) { response.json().then((result) = { console.log(result); }); } else { throw new Error('Network response was not ok.'); } }) .catch(function (error) { console.log('There has been a problem with your fetch operation: ' + error.message); }); });","title":"Behind the magic"},{"location":"/dev/app/#the-manifest","text":"Each application must have a \u201cmanifest\u201d. It\u2019s a JSON file named manifest.webapp stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026 Here\u2019s a sample manifest: { name : My Awesome application , permissions : { apps : { type : io.cozy.apps }, permissions : { type : io.cozy.permissions }, settings : { type : io.cozy.settings }, sample : { type : io.cozy.dev.sample , verbs : [ GET , POST , PUT , PATCH , DELETE ] }, jobs : { type : io.cozy.jobs } }, routes : { / : { folder : / , index : index.html , public : false }, /public : { folder : /public , index : index.html , public : true } } }","title":"The manifest"},{"location":"/dev/app/#permissions","text":"Applications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time. A permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents. In the manifest, each permission is an object, with a random name and some properties: type : mandatory the document type or action name description : a text that will be displayed to the user to explain why the application require this permission verbs : an array of HTTP verbs. For example, to limit permissions to read access, use [ GET ] selector : a document attribute to limit access to a subset of documents values : array of allowed values for this attribute. An application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API.","title":"Permissions"},{"location":"/dev/app/#samples","text":"Application require full access to files: { permissions : { files : { description : \u2026 , type : io.cozy.files }, } } Application want to be able to read the contact informations of cozy@cozycloud.cc { permissions : { contact : { type : io.cozy.contacts , verbs : [ GET ], selector : email , values : [ cozy@cozycloud.cc ] } } }","title":"Samples"},{"location":"/dev/app/#routing","text":"The application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties: folder : the base folder of the route index : the name of the file inside this folder public : a boolean specifying whether the route is public or private (default). Sample: routes : { /admin : { folder : / , index : admin.html , public : false }, /public : { folder : /public , index : index.html , public : true }, /assets : { folder : /assets , public : true } }","title":"Routing"},{"location":"/dev/app/#cozy-client-js","text":"This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. The library expose a client API under the window.cozy.client namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application): window.cozy.client.init({cozyURL: \u2026 , token: \u2026 }); The library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add disablePromises to the options when initializing the library: window.cozy.client.init({cozyURL: \u2026 , token: \u2026 , disablePromises: true}); window.client.settings.diskUsage(function (err, res) { (\u2026) });","title":"cozy-client-js"},{"location":"/dev/app/#raw-api-documentation","text":"In this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation: documents files authentification authentication with OAuth2 settings inter-app communication jobs and triggers sharing offline Cozy Bar","title":"Raw API documentation"},{"location":"/dev/app/#manipulating-documents","text":"Inside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use the Java specification . Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by io.cozy or io.cozy.labs . If you don\u2019t own a domain name, and your email address is foo@bar.cloud , prefix your doctype names with cloud.bar.foo . We maintain an index of all the currently available doctypes . To make your own doctypes available to other applications, please send a pull request to this repository. Before manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically. Every method allowing to handle document are available under the cozy.client.data namespace. For example: cozy.client.data.create(doctype, attributes) , cozy.client.data.update(doctype, doc, newdoc) cozy.client.data.delete(doctype, doc) to create, update and delete documents cozy.client.data.updateAttributes(doctype, id, changes) to only update some attributes of a document cozy.client.data.find(doctype, id) return a document using its ident cozy.client.data.changesFeed(doctype, options) get the latests updates of documents of a doctype you can attach files to a document using cozy.client.data.addReferencedFiles(doc, fileIds) and list attachments with cozy.client.data.listReferencedFiles(doc)","title":"Manipulating documents"},{"location":"/dev/app/#querying","text":"To search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods: cozy.client.data.defineIndex(doctype, fields) to create the index cozy.client.data.query(indexReference, query) to query an index. The query parameter uses the syntax of the Mango API from CouchDB 2. For example, to search contacts by their email address, you could use: cozy.client.data.defineIndex( io.cozy.contacts , [ email ]) .then((index) = { return cozy.data.query(index, { selector : {email: cozy@cozycloud.cc }}) }) .then( (result) = { console.log(result[0].name); });","title":"Querying"},{"location":"/dev/app/#manipulating-files","text":"The metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system. The library offer a lot of methods under cozy.client.files namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the raw API documentation : create() and updateById() to create and update a file createDirectory() to create a folder updateAttributesById() et updateAttributesByPath() allow to update some metadata use destroyById to remove a file a virtual trash is available. You can put files into the trash ( trashById() ) and restore them ( restoreById() ). You can also list the content of the trash ( listTrash() ) and purge all trashed files ( clearTrash() ) statById(id) et statByPath(path) return the metadata and, or folders, their content","title":"Manipulating files"},{"location":"/dev/app/#folders","text":"When using statById() or statByPath() to get metadata of of folder, you can than call relations() on the resulting object to access their content. For example, to list content of the root folder, use: cozy.client.files.statByPath( / ) .then((dir) = { console.log(dir.relations( contents )); }) Some special folder have a pre-defined id that will never change: io.cozy.files.root-dir is the root of the filesystem io.cozy.files.trash-dir is the trash.","title":"Folders"},{"location":"/dev/app/#the-cozy-bar","text":"The Cozy Bar is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing. Your application interacts with this component through cozy-bar.js , a library injected into your pages by the server when you add {{.CozyBar}} in the header. It exposes an API behind the window.cozy.bar namespace. Before using it, you have to initialize the library: window.cozy.bar.init({appName: Mon application }) .","title":"The Cozy Bar"},{"location":"/dev/app/#styling","text":"If you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then Cozy UI is here for you! It relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box.","title":"Styling"},{"location":"/dev/app/#the-development-server-using-docker","text":"(remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use sudo to run each of this commands.) To run your application inside the development server, just run the following command from the folder where your index.html and manifest.webapp files leave: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev Let\u2019s have a quick look at this command, so you can adapt it to your needs: rm will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images -it allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server -p 8080:8080 : the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use -p 9090:8080 -p 5984:5984 : this is just a convenient way to access the CouchDB database running inside the server. Point your browser to http://cozy.tools:5984/_utils/ to access its administrative interface -p 8025:8025 : Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to http://cozy.tools:8025/ to display the messages sent by the server -v $(pwd):/data/cozy-app this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server name cozydev name the running virtual machine cozydev , so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use docker exec -ti /bin/bash With this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database. However, if you want to persist data, you have to mount two folders from the virtual server to local folders: /usr/local/couchdb/data (database) and /data/cozy-storage (the virtual filesystem). This can be achieved by adding to the command line -v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage which will store the server\u2019s data into ~/cozy/data . Once the server started, go to http://app.cozy.tools:8080/# , connect to the server with the default password cozy and you should be able to start testing your application. You can also access the following URLs: http://cozy.tools:5984/_utils to get the database administrative panel http://cozy.tools:8025/ to display the emails sent by the server.","title":"The development server using Docker"},{"location":"/dev/app/#test-multiple-applications","text":"You can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of /data/cozy-apps . For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in ~/cozy/drive and ~/cozy/photos , start the development server with: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v ~/cozy/drive:/data/cozy-app/drive -v ~/cozy/photos:/data-cozy-app/photos --name=cozydev cozy/cozy-app-dev You\u2019ll access the applications by connecting to http://drive.cozy.tools:8080/ and http://photos.cozy.tools:8080 .","title":"Test multiple applications"},{"location":"/dev/app/#what-is-cozytools","text":"This development server use the domain names *.cozy.tools . We have parameterized this domain to always redirect to 127.0.0.1 , your local computer address. With that, no need to configure your environment to set extra local hosts for development anymore.","title":"What is cozy.tools ?"},{"location":"/dev/konnector/","text":"How to write a connector Introduction A connector (also known as konnector ) is a script that imports data from another web service and put those data into your cozy. Each connector is an independant application, managed by the Cozy Collect application. To protect your data, each connector runs inside a container in order to sandbox all their interactions with your data. How does it work? A connector is a NodeJS script. The target node version used to run your connector is the current LTS version (8 at the time this doc was written). Like client side apps, connectors communicate with the Cozy Stack using its HTTP API, and get an unique auth token every time they start. They need to register with a manifest, and ask the user for permissions. To facilitate connector development, a npm package, [konnectors/libs], provides some shared libraries that are adapted to be used for a connector: cheerio to easily query a HTML page request-promise : request with Promise support request-debug that displays all the requests and responses in the standard output. Toggle debug option in requestFactory options Besides, you ll probably need some other npm packages to help you run your connector: momentjs or date-fns to manage dates bluebird to get enhanced promises When the connector is started, it also receives some data via environment variables: COZY_CREDENTIALS : an auth token used by cozy-client-js to communicate with the server COZY_URL : the Cozy Stack API entry point COZY_FIELDS : settings coming from Cozy Collect and filled by the user (login, password, directory path). These variables are used by the connector and the cozy-client to configure the connection to the Cozy Stack with the right permissions as defined in the connector manifest. They are simulated in standalone mode so that you do not need a real Cozy Stack to develop a connector. [ More about BaseKonnector ] From the server point of view, each connector is a job which is executed periodically via a trigger . [ More about Cozy Stack jobs ] Let\u2019s create our first connector The easiest way to create a new connector is to use cozy-konnector-template : Run the sample First of all, download or clone the repository: git clone https://github.com/konnectors/cozy-konnector-template cozy-konnector-newservice cd cozy-konnector-newservice rm -rf .git git init yarn install # or npm install note: we use yarn , but if you prefer npm , keep using it, everything should work. The connector is ready to run with sample code. As a demo we will scrape a fictional website: books.toscrape.com , for which you do not need credentials . As indicated in the README.md file, just run: yarn standalone # or npm run standalone The very first run will create a konnector-dev-config.json file that allows you to configure the connector input when executing it with the CLI. This configuration comes from Cozy Collect when deployed. { COZY_URL : http://cozy.tools:8080 , fields : { // configuration injected to the start function } } The fields property allow you to set credentials for the targeted web service, such as login and password as if they come from Cozy Stack . The COZY_URL property will be used later. As explained earlier, the demo website books.toscrape.com does not need any credentials. But for the code to run without error, you need to register a fake login and a fake password: { COZY_URL : http://cozy.tools:8080 , fields : { login : zuck.m@rk.fb , password : 123456 } } In cozy-konnector-template, this configuration file is already added to .gitignore file to be sure your credentials stay private. Now you can run the connector again in standalone mode to see how jpg and related data are downloaded. In this mode, [ cozy-client-js ] is stubbed and all data meant to be saved in a cozy are displayed in the standard output and files are saved in the root directory of the connector. This is useful to start developing your connector without handling the state of a real Cozy Stack . Please check CLI section of the documentation for more information. Implement your connector There are four steps for a connector to save data to Cozy Stack : authentication request data parse and format data save data to cozy stack You can see these steps in the src/index.js in the konnectors/cozy-konnector-template : async function start(fields) { // step 1. log('info', 'Authenticating ...') await authenticate(fields.login, fields.password) log('info', 'Successfully logged in') // step 2. // The BaseKonnector instance expects a Promise as return of the function log('info', 'Fetching the list of documents') const $ = await request(`${baseUrl}/index.html`) // step 3. log('info', 'Parsing list of documents') const documents = await parseDocuments($) // step 4. // here we use the saveBills function even if what we fetch are not bills, but this is the most // common case in connectors log('info', 'Saving data to Cozy') await saveBills(documents, fields.folderPath, { // this is a bank identifier which will be used to link bills to bank operations. These // identifiers should be at least a word found in the title of a bank operation related to this // bill. It is not case sensitive. identifiers: ['books'] }) } Authentication Open the src/index.js file, there are comments to guide you through it. The very first step is to be able to authenticate to the remote service, this is done with the line: await authenticate(fields.login, fields.password) There are many obstacles at this level: is there a captcha? is there a 2FA? how is the form ? note: if the remote service exposes an API, you should use classical request call. Let s say the remote service exposes a simple classical form like https://www.trainline.eu/signin: form id= signin-form novalidate= class= signin__form data-ember-action= data-ember-action-680= 680 input name= email autocomplete= on placeholder= Email Address id= ember691 class= ember-text-field textfield ember-view data-enpass.usermodified= yes type= email input name= password autocomplete= on placeholder= Password id= ember696 class= ember-text-field textfield ember-view data-enpass.usermodified= yes type= password div class= signin__forgot span data-ember-action= data-ember-action-697= 697 a href= /password id= ember698 class= ember-view Forgot your password? /a /span /div div class= signin__buttons div class= signin__buttons-block button type= submit class= signin__button Sign In /button /div /div /form Find a CSS selector for the form tag: form#signin-form . Find the name of the input tags used to host user s credentials: email and password . You are ready to complete the signin(options) object called in the authenticate(username, password) function: function authenticate(username, password) { return signin({ url: `https://www.trainline.eu/signin`, formSelector: 'form#signin-form', formData: { email: username, password }, validate: (statusCode, $) = { // write some code to validate the form submission } }) } To implement the validate function, you need to check what is happening on a successful login and on an unsuccessful login. With the https://www.trainline.eu/signin example, fill the form with wrong credentials, open your browser s devtools (and check the network tab) and submit the form. Here it is clear, on incorrect credentials, the response have a status code 422 : HTTP/2.0 422 No Reason Phrase Do the same with valid crendentials. HTTP/2.0 200 OK Then you can write a simple and straight forward validate code: function authenticate(username, password) { return signin({ url: `https://www.trainline.eu/signin`, formSelector: 'form#signin-form', formData: { email: username, password }, validate: (statusCode, $) = { return statusCode === 200 || log('error', 'Invalid credentials') } }) } Request data Once the konnector is able to be authenticated by the online service, the next step is to fetch data. The most common case is that the invoices we want to fetch are listed in a HTML page. So to request data, we fetch the target webpage that contains invoices list. But sometimes, the webpage is a JavaScript page that uses a JSON API url. JSON is easier to parse than full HTML webpages. For the purpose of this guide, let s consider we are in the case of a full HTML webpage, like the service given as an example in the template: http://books.toscrape.com This is the easiest part, juste fetch the webpage: const $ = await request('http://books.toscrape.com/index.html') The $ variable is set to a cheerio object with useful API to crawl the webpage . That object will be very useful for the next step. Parse the document We want to get every of the page in a JavaScript Array: const articles = [].map.call($('article', node = node)) For every book, we want to catch the title attribute of this tag article h3 a . This is a CSS Selector that cheerio understands to select some part of the tree. In order to crawl a list of items to create an Array of json object, we can use the function scrape from the konnector libs : const docs = scrape( $, { title: { sel: 'h3 a', attr: 'title' }, amount: { sel: '.price_color', parse: normalizePrice }, url: { sel: 'h3 a', attr: 'href', parse: url = `${baseUrl}/${url}` }, fileurl: { sel: 'img', attr: 'src', parse: src = `${baseUrl}/${src}` }, filename: { sel: 'h3 a', attr: 'title', parse: title = `${title}.jpg` } }, 'article' ) This code will loop on and for each item will create a JSON object with the selector sel and the value of attribute attr if specified, otherwise it takes the value of the child node, this value can be edited with the parse function. Here is a sample for the following markup from http://books.toscrape.com: article class= product_pod div class= image_container a href= catalogue/a-light-in-the-attic_1000/index.html img src= media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg alt= A Light in the Attic class= thumbnail /a /div p class= star-rating Three i class= icon-star /i i class= icon-star /i i class= icon-star /i i class= icon-star /i i class= icon-star /i /p h3 a href= catalogue/a-light-in-the-attic_1000/index.html title= A Light in the Attic A Light in the ... /a /h3 div class= product_price p class= price_color \u00a351.77 /p p class= instock availability i class= icon-ok /i In stock /p form button type= submit class= btn btn-primary btn-block data-loading-text= Adding... Add to basket /button /form /div /article And we will get the following JSON object: { title : A Light in the Attic , amount : 51.77, url : http://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html , fileurl : http://books.toscrape.com/media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg , filename : A Light in the Attic.jpg } The code sample includes some other function to manipulate the result object, but we have the idea. Once we build a correct object, we can save it to Cozy Stack. Save data to Cozy Stack In the example we use some built-in function to save a bill to the Cozy Stack. But there is a bunch of functions available depending on what you want: addData filterData saveBills saveFiles and so on\u2026 We can find more information in the libs repository . Now that we pass on every steps, it is time to test the connector with yarn standalone . We will see in the following how to connect it effectively to a Cozy Stack. Going further Connector structure Basically, a connector is just a function passed to the BaseKonnector constructor, and which eventually returns a promise: To create the connector, just create a new instance of BaseKonnector with a function as argument: const {BaseKonnector} = require('cozy-konnector-libs') module.exports = new BaseKonnector(fields = { // use fields to get user credentials and choices console.log(fields, 'fields') }) Typical workflow Everytime the connector is run, it will call the function and wait for the resolution of the returned promise. This function can then: log into the target website, fetch data, and save them as an array of objects with specific attributes expected by the save function ( saveFiles , addData , filterData , saveBills ). A basic connector workflow involves: authenticate on the website or API. Might be tricky, but that s the fun :-) getting data from the online service. You can get the data by calling an API or scraping the webpage. Check if the webpage itself is not using an API to retrieve data, might speed up our job. Mobile phones applications usually connects to an API that might be a reliable source of data. A quick exemple of a scraper here . filtering data to remove the ones already present inside the database using filterData save the filtered data into the database ( addData ) save the related files using ( saveFiles ) Error handling If your connector hits an issue fetching or saving the data, it can return an error code by throwing it as an error. The error codes are defined inside the Cozy Collect application and will display an explicit error to the user: LOGIN_FAILED : the konnector could not login NOT_EXISTING_DIRECTORY : the folder specified as folder_to_save does not exist (checked automatically by the BaseKonnector) UNKNOWN_ERROR : there was an unexpected error, please take a look at the logs to know what appened VENDOR_DOWN : the target web site is down now USER_ACTION_NEEDED : The user needs to login to the service to do manual actions (could be Terms Of Service to validate) You can get the list of error codes in require( cozy-konnector-libs ).errors ( source ) const {BaseKonnector, errors} = require('cozy-konnector-libs') module.exports = new BaseKonnector(fields = { // Here, the following message will be displayed in cozy-collect : Bad credentials. Check the konnector fields and run the connection again. throw new Error(errors.LOGIN_FAILED) }) cozy-konnector-libs The Cozy Konnector Libs provide several useful methods for common tasks: BaseKonnector : creates the connector and fetches from the stack the connector s parameters (COZY_FIELDS ) cozyClient gives an instance of cozy-client-js already initialized according to COZY_URL , and COZY_CREDENTIALS . Your code can immediately interact with the server thanks to this client. requestFactory a function which returns an instance of request-promise initialized with defaults often used in connector development. log allows to log messages with different levels filterData to filter data addData to store the retrieved data into the cozy linkBankOperations to link a bill to a bank operation saveBills which uses filterData, addData, saveFiles and linkBankOperations and which is specific to bills updateOrCreate create or update documents inside database Linking your connector to a cozy : dev mode After several yarn standalone , your connector is able to automaticaly gather data from the targeted web service. It s time now to put this data in a real cozy. Here comes the dev mode . For that your connector needs more setup : a manifest.konnector file a COZY_URL section in konnector-dev-config.json The manifest Each connector is described by a manifest. This is a JSON file named manifest.konnector at the root of your code folder. It should include the following minimal information: { name : konnector name , type : node , slug : konnectorslug , description : description , source : git://github.com/cozy/cozy-konnector-thename.git , permissions : { accounts : { description : Required to get the account's data , type : io.cozy.accounts , verbs : [ GET ] } } } cozy-konnector-template already has a manifest which you can customize. You may add some permissions for your own doctype. Here is the detailed list of fields for a connector manifest file. You can also get more information on permissions in the official cozy-stack documentation konnector-dev-config.json If you want to put data from your connector to a real cozy, your must define where to find this cozy, and this must be a cozy for which you have the credentials. Here comes the COZY_URL in konnector-dev-config.json which defines just that. Run the dev mode Then you just have to run: yarn dev For the first run, the CLI will open a tab in your browser asking you to grant permissions to the connector. The connector will then save data directly into your cozy. This will validate that your manifest has the needed permissions on the data you want to save. This is the dev mode Integration in the store for all the users To run a connector, we do not want the cozy to install all dependencies of the connector each time it installs it. To avoid this, the connectors need to be compiled into one file in a dedicated branch of the repository and the repository needs to be a public git repository. The package.json file from cozy-konnector-template gives you the commands to do this : yarn build and yarn deploy but the last one needs to be configured in package.json Once your public git repository is configured, you only have to declare it. Cozy will soon have a store for connectors and you will be able to publish connectors yourself. But at the moment, you need to declare your new connector on the cozy forum . The Cozy team will review your code and add your connector to the Cozy Collect application. To make the connector available more quickly for all cozys, you can follow this few steps of packaging: Icon You need to push an icon in assets/ . Please respect this rules : Square icon, possibly a png or svg Try the Apple app store icon if needed Package.json Edit the name to be cozy-konnector- slug> Edit the repository URL Edit the command deploy with the correct repository URL Manifest.konnector Edit the name with a nice name (Capitals and spaces allowed here) Edit icon as needed Edit slug Edit source with the correct repository URL Add a correct vendor link Choose one or more categories in this list : banking, shopping, insurance, isp, telecom, energy, public_service, other If needed, change the input type the target website use to login the user: text , email or phone for instance, this will enforce pre-checking Edit for both locales en and fr the short description and long description FAQ When I run my connector, a ghost node process eats all my memory Cozy-konnector-libs uses cheerio which is great but causes some problems when you try to console.log a cheerio object. In standalone or dev mode, the BaseKonnector tries to catch errors and display a maximum of details about them. But when the error contains a cheerio object, the problem happens. If you get this problem, catch the error yourself and only display the message : .catch(err) { console.log(err.message) // good console.log(err) // bad } How do I scrap a website Use the request function from cozy-konnector-libs with the proper options. Here\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill: const {BaseKonnector, requestFactory} = require('cozy-konnector-libs') const rq = requestFactory({ jar: true, // handle the cookies like a browser json: false, // do not try to parse the result as a json document cheerio: true // automatically parse the result with [cheerio](https://github.com/cheeriojs/cheerio) }) const moment = require('moment') module.exports = new BaseKonnector(function fetch (fields) { return rq( https://login.remote.web ) .then($ = { // the result is automatically wrapped with cheerio and you can use it like jQuery const form = { form: { login: fields.login, password: fields.password, csrf_token: $('[name= csrf_token ]').val(), } } return rq({ method: 'POST', form }) }) .then($ = rq( https://admin.remote.web/bills )) .then($ = { return [{date: moment($( #bill_date )), value: $( #bill_value )}] }) .then(entries = addData(entries, 'io.cozy.bills')) })","title":"Cr\u00e9ez votre premier connecteur"},{"location":"/dev/konnector/#how-to-write-a-connector","text":"","title":"How to write a connector"},{"location":"/dev/konnector/#introduction","text":"A connector (also known as konnector ) is a script that imports data from another web service and put those data into your cozy. Each connector is an independant application, managed by the Cozy Collect application. To protect your data, each connector runs inside a container in order to sandbox all their interactions with your data.","title":"Introduction"},{"location":"/dev/konnector/#how-does-it-work","text":"A connector is a NodeJS script. The target node version used to run your connector is the current LTS version (8 at the time this doc was written). Like client side apps, connectors communicate with the Cozy Stack using its HTTP API, and get an unique auth token every time they start. They need to register with a manifest, and ask the user for permissions. To facilitate connector development, a npm package, [konnectors/libs], provides some shared libraries that are adapted to be used for a connector: cheerio to easily query a HTML page request-promise : request with Promise support request-debug that displays all the requests and responses in the standard output. Toggle debug option in requestFactory options Besides, you ll probably need some other npm packages to help you run your connector: momentjs or date-fns to manage dates bluebird to get enhanced promises When the connector is started, it also receives some data via environment variables: COZY_CREDENTIALS : an auth token used by cozy-client-js to communicate with the server COZY_URL : the Cozy Stack API entry point COZY_FIELDS : settings coming from Cozy Collect and filled by the user (login, password, directory path). These variables are used by the connector and the cozy-client to configure the connection to the Cozy Stack with the right permissions as defined in the connector manifest. They are simulated in standalone mode so that you do not need a real Cozy Stack to develop a connector. [ More about BaseKonnector ] From the server point of view, each connector is a job which is executed periodically via a trigger . [ More about Cozy Stack jobs ]","title":"How does it work?"},{"location":"/dev/konnector/#lets-create-our-first-connector","text":"The easiest way to create a new connector is to use cozy-konnector-template :","title":"Let\u2019s create our first connector"},{"location":"/dev/konnector/#run-the-sample","text":"First of all, download or clone the repository: git clone https://github.com/konnectors/cozy-konnector-template cozy-konnector-newservice cd cozy-konnector-newservice rm -rf .git git init yarn install # or npm install note: we use yarn , but if you prefer npm , keep using it, everything should work. The connector is ready to run with sample code. As a demo we will scrape a fictional website: books.toscrape.com , for which you do not need credentials . As indicated in the README.md file, just run: yarn standalone # or npm run standalone The very first run will create a konnector-dev-config.json file that allows you to configure the connector input when executing it with the CLI. This configuration comes from Cozy Collect when deployed. { COZY_URL : http://cozy.tools:8080 , fields : { // configuration injected to the start function } } The fields property allow you to set credentials for the targeted web service, such as login and password as if they come from Cozy Stack . The COZY_URL property will be used later. As explained earlier, the demo website books.toscrape.com does not need any credentials. But for the code to run without error, you need to register a fake login and a fake password: { COZY_URL : http://cozy.tools:8080 , fields : { login : zuck.m@rk.fb , password : 123456 } } In cozy-konnector-template, this configuration file is already added to .gitignore file to be sure your credentials stay private. Now you can run the connector again in standalone mode to see how jpg and related data are downloaded. In this mode, [ cozy-client-js ] is stubbed and all data meant to be saved in a cozy are displayed in the standard output and files are saved in the root directory of the connector. This is useful to start developing your connector without handling the state of a real Cozy Stack . Please check CLI section of the documentation for more information.","title":"Run the sample"},{"location":"/dev/konnector/#implement-your-connector","text":"There are four steps for a connector to save data to Cozy Stack : authentication request data parse and format data save data to cozy stack You can see these steps in the src/index.js in the konnectors/cozy-konnector-template : async function start(fields) { // step 1. log('info', 'Authenticating ...') await authenticate(fields.login, fields.password) log('info', 'Successfully logged in') // step 2. // The BaseKonnector instance expects a Promise as return of the function log('info', 'Fetching the list of documents') const $ = await request(`${baseUrl}/index.html`) // step 3. log('info', 'Parsing list of documents') const documents = await parseDocuments($) // step 4. // here we use the saveBills function even if what we fetch are not bills, but this is the most // common case in connectors log('info', 'Saving data to Cozy') await saveBills(documents, fields.folderPath, { // this is a bank identifier which will be used to link bills to bank operations. These // identifiers should be at least a word found in the title of a bank operation related to this // bill. It is not case sensitive. identifiers: ['books'] }) }","title":"Implement your connector"},{"location":"/dev/konnector/#authentication","text":"Open the src/index.js file, there are comments to guide you through it. The very first step is to be able to authenticate to the remote service, this is done with the line: await authenticate(fields.login, fields.password) There are many obstacles at this level: is there a captcha? is there a 2FA? how is the form ? note: if the remote service exposes an API, you should use classical request call. Let s say the remote service exposes a simple classical form like https://www.trainline.eu/signin: form id= signin-form novalidate= class= signin__form data-ember-action= data-ember-action-680= 680 input name= email autocomplete= on placeholder= Email Address id= ember691 class= ember-text-field textfield ember-view data-enpass.usermodified= yes type= email input name= password autocomplete= on placeholder= Password id= ember696 class= ember-text-field textfield ember-view data-enpass.usermodified= yes type= password div class= signin__forgot span data-ember-action= data-ember-action-697= 697 a href= /password id= ember698 class= ember-view Forgot your password? /a /span /div div class= signin__buttons div class= signin__buttons-block button type= submit class= signin__button Sign In /button /div /div /form Find a CSS selector for the form tag: form#signin-form . Find the name of the input tags used to host user s credentials: email and password . You are ready to complete the signin(options) object called in the authenticate(username, password) function: function authenticate(username, password) { return signin({ url: `https://www.trainline.eu/signin`, formSelector: 'form#signin-form', formData: { email: username, password }, validate: (statusCode, $) = { // write some code to validate the form submission } }) } To implement the validate function, you need to check what is happening on a successful login and on an unsuccessful login. With the https://www.trainline.eu/signin example, fill the form with wrong credentials, open your browser s devtools (and check the network tab) and submit the form. Here it is clear, on incorrect credentials, the response have a status code 422 : HTTP/2.0 422 No Reason Phrase Do the same with valid crendentials. HTTP/2.0 200 OK Then you can write a simple and straight forward validate code: function authenticate(username, password) { return signin({ url: `https://www.trainline.eu/signin`, formSelector: 'form#signin-form', formData: { email: username, password }, validate: (statusCode, $) = { return statusCode === 200 || log('error', 'Invalid credentials') } }) }","title":"Authentication"},{"location":"/dev/konnector/#request-data","text":"Once the konnector is able to be authenticated by the online service, the next step is to fetch data. The most common case is that the invoices we want to fetch are listed in a HTML page. So to request data, we fetch the target webpage that contains invoices list. But sometimes, the webpage is a JavaScript page that uses a JSON API url. JSON is easier to parse than full HTML webpages. For the purpose of this guide, let s consider we are in the case of a full HTML webpage, like the service given as an example in the template: http://books.toscrape.com This is the easiest part, juste fetch the webpage: const $ = await request('http://books.toscrape.com/index.html') The $ variable is set to a cheerio object with useful API to crawl the webpage . That object will be very useful for the next step.","title":"Request data"},{"location":"/dev/konnector/#parse-the-document","text":"We want to get every of the page in a JavaScript Array: const articles = [].map.call($('article', node = node)) For every book, we want to catch the title attribute of this tag article h3 a . This is a CSS Selector that cheerio understands to select some part of the tree. In order to crawl a list of items to create an Array of json object, we can use the function scrape from the konnector libs : const docs = scrape( $, { title: { sel: 'h3 a', attr: 'title' }, amount: { sel: '.price_color', parse: normalizePrice }, url: { sel: 'h3 a', attr: 'href', parse: url = `${baseUrl}/${url}` }, fileurl: { sel: 'img', attr: 'src', parse: src = `${baseUrl}/${src}` }, filename: { sel: 'h3 a', attr: 'title', parse: title = `${title}.jpg` } }, 'article' ) This code will loop on and for each item will create a JSON object with the selector sel and the value of attribute attr if specified, otherwise it takes the value of the child node, this value can be edited with the parse function. Here is a sample for the following markup from http://books.toscrape.com: article class= product_pod div class= image_container a href= catalogue/a-light-in-the-attic_1000/index.html img src= media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg alt= A Light in the Attic class= thumbnail /a /div p class= star-rating Three i class= icon-star /i i class= icon-star /i i class= icon-star /i i class= icon-star /i i class= icon-star /i /p h3 a href= catalogue/a-light-in-the-attic_1000/index.html title= A Light in the Attic A Light in the ... /a /h3 div class= product_price p class= price_color \u00a351.77 /p p class= instock availability i class= icon-ok /i In stock /p form button type= submit class= btn btn-primary btn-block data-loading-text= Adding... Add to basket /button /form /div /article And we will get the following JSON object: { title : A Light in the Attic , amount : 51.77, url : http://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html , fileurl : http://books.toscrape.com/media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg , filename : A Light in the Attic.jpg } The code sample includes some other function to manipulate the result object, but we have the idea. Once we build a correct object, we can save it to Cozy Stack.","title":"Parse the document"},{"location":"/dev/konnector/#save-data-to-cozy-stack","text":"In the example we use some built-in function to save a bill to the Cozy Stack. But there is a bunch of functions available depending on what you want: addData filterData saveBills saveFiles and so on\u2026 We can find more information in the libs repository . Now that we pass on every steps, it is time to test the connector with yarn standalone . We will see in the following how to connect it effectively to a Cozy Stack.","title":"Save data to Cozy Stack"},{"location":"/dev/konnector/#going-further","text":"","title":"Going further"},{"location":"/dev/konnector/#connector-structure","text":"Basically, a connector is just a function passed to the BaseKonnector constructor, and which eventually returns a promise: To create the connector, just create a new instance of BaseKonnector with a function as argument: const {BaseKonnector} = require('cozy-konnector-libs') module.exports = new BaseKonnector(fields = { // use fields to get user credentials and choices console.log(fields, 'fields') })","title":"Connector structure"},{"location":"/dev/konnector/#typical-workflow","text":"Everytime the connector is run, it will call the function and wait for the resolution of the returned promise. This function can then: log into the target website, fetch data, and save them as an array of objects with specific attributes expected by the save function ( saveFiles , addData , filterData , saveBills ). A basic connector workflow involves: authenticate on the website or API. Might be tricky, but that s the fun :-) getting data from the online service. You can get the data by calling an API or scraping the webpage. Check if the webpage itself is not using an API to retrieve data, might speed up our job. Mobile phones applications usually connects to an API that might be a reliable source of data. A quick exemple of a scraper here . filtering data to remove the ones already present inside the database using filterData save the filtered data into the database ( addData ) save the related files using ( saveFiles )","title":"Typical workflow"},{"location":"/dev/konnector/#error-handling","text":"If your connector hits an issue fetching or saving the data, it can return an error code by throwing it as an error. The error codes are defined inside the Cozy Collect application and will display an explicit error to the user: LOGIN_FAILED : the konnector could not login NOT_EXISTING_DIRECTORY : the folder specified as folder_to_save does not exist (checked automatically by the BaseKonnector) UNKNOWN_ERROR : there was an unexpected error, please take a look at the logs to know what appened VENDOR_DOWN : the target web site is down now USER_ACTION_NEEDED : The user needs to login to the service to do manual actions (could be Terms Of Service to validate) You can get the list of error codes in require( cozy-konnector-libs ).errors ( source ) const {BaseKonnector, errors} = require('cozy-konnector-libs') module.exports = new BaseKonnector(fields = { // Here, the following message will be displayed in cozy-collect : Bad credentials. Check the konnector fields and run the connection again. throw new Error(errors.LOGIN_FAILED) })","title":"Error handling"},{"location":"/dev/konnector/#cozy-konnector-libs","text":"The Cozy Konnector Libs provide several useful methods for common tasks: BaseKonnector : creates the connector and fetches from the stack the connector s parameters (COZY_FIELDS ) cozyClient gives an instance of cozy-client-js already initialized according to COZY_URL , and COZY_CREDENTIALS . Your code can immediately interact with the server thanks to this client. requestFactory a function which returns an instance of request-promise initialized with defaults often used in connector development. log allows to log messages with different levels filterData to filter data addData to store the retrieved data into the cozy linkBankOperations to link a bill to a bank operation saveBills which uses filterData, addData, saveFiles and linkBankOperations and which is specific to bills updateOrCreate create or update documents inside database","title":"cozy-konnector-libs"},{"location":"/dev/konnector/#linking-your-connector-to-a-cozy-dev-mode","text":"After several yarn standalone , your connector is able to automaticaly gather data from the targeted web service. It s time now to put this data in a real cozy. Here comes the dev mode . For that your connector needs more setup : a manifest.konnector file a COZY_URL section in konnector-dev-config.json","title":"Linking your connector to a cozy : dev mode"},{"location":"/dev/konnector/#the-manifest","text":"Each connector is described by a manifest. This is a JSON file named manifest.konnector at the root of your code folder. It should include the following minimal information: { name : konnector name , type : node , slug : konnectorslug , description : description , source : git://github.com/cozy/cozy-konnector-thename.git , permissions : { accounts : { description : Required to get the account's data , type : io.cozy.accounts , verbs : [ GET ] } } } cozy-konnector-template already has a manifest which you can customize. You may add some permissions for your own doctype. Here is the detailed list of fields for a connector manifest file. You can also get more information on permissions in the official cozy-stack documentation","title":"The manifest"},{"location":"/dev/konnector/#konnector-dev-configjson","text":"If you want to put data from your connector to a real cozy, your must define where to find this cozy, and this must be a cozy for which you have the credentials. Here comes the COZY_URL in konnector-dev-config.json which defines just that.","title":"konnector-dev-config.json"},{"location":"/dev/konnector/#run-the-dev-mode","text":"Then you just have to run: yarn dev For the first run, the CLI will open a tab in your browser asking you to grant permissions to the connector. The connector will then save data directly into your cozy. This will validate that your manifest has the needed permissions on the data you want to save. This is the dev mode","title":"Run the dev mode"},{"location":"/dev/konnector/#integration-in-the-store-for-all-the-users","text":"To run a connector, we do not want the cozy to install all dependencies of the connector each time it installs it. To avoid this, the connectors need to be compiled into one file in a dedicated branch of the repository and the repository needs to be a public git repository. The package.json file from cozy-konnector-template gives you the commands to do this : yarn build and yarn deploy but the last one needs to be configured in package.json Once your public git repository is configured, you only have to declare it. Cozy will soon have a store for connectors and you will be able to publish connectors yourself. But at the moment, you need to declare your new connector on the cozy forum . The Cozy team will review your code and add your connector to the Cozy Collect application. To make the connector available more quickly for all cozys, you can follow this few steps of packaging:","title":"Integration in the store for all the users"},{"location":"/dev/konnector/#icon","text":"You need to push an icon in assets/ . Please respect this rules : Square icon, possibly a png or svg Try the Apple app store icon if needed","title":"Icon"},{"location":"/dev/konnector/#packagejson","text":"Edit the name to be cozy-konnector- slug> Edit the repository URL Edit the command deploy with the correct repository URL","title":"Package.json"},{"location":"/dev/konnector/#manifestkonnector","text":"Edit the name with a nice name (Capitals and spaces allowed here) Edit icon as needed Edit slug Edit source with the correct repository URL Add a correct vendor link Choose one or more categories in this list : banking, shopping, insurance, isp, telecom, energy, public_service, other If needed, change the input type the target website use to login the user: text , email or phone for instance, this will enforce pre-checking Edit for both locales en and fr the short description and long description","title":"Manifest.konnector"},{"location":"/dev/konnector/#faq","text":"","title":"FAQ"},{"location":"/dev/konnector/#when-i-run-my-connector-a-ghost-node-process-eats-all-my-memory","text":"Cozy-konnector-libs uses cheerio which is great but causes some problems when you try to console.log a cheerio object. In standalone or dev mode, the BaseKonnector tries to catch errors and display a maximum of details about them. But when the error contains a cheerio object, the problem happens. If you get this problem, catch the error yourself and only display the message : .catch(err) { console.log(err.message) // good console.log(err) // bad }","title":"When I run my connector, a ghost node process eats all my memory"},{"location":"/dev/konnector/#how-do-i-scrap-a-website","text":"Use the request function from cozy-konnector-libs with the proper options. Here\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill: const {BaseKonnector, requestFactory} = require('cozy-konnector-libs') const rq = requestFactory({ jar: true, // handle the cookies like a browser json: false, // do not try to parse the result as a json document cheerio: true // automatically parse the result with [cheerio](https://github.com/cheeriojs/cheerio) }) const moment = require('moment') module.exports = new BaseKonnector(function fetch (fields) { return rq( https://login.remote.web ) .then($ = { // the result is automatically wrapped with cheerio and you can use it like jQuery const form = { form: { login: fields.login, password: fields.password, csrf_token: $('[name= csrf_token ]').val(), } } return rq({ method: 'POST', form }) }) .then($ = rq( https://admin.remote.web/bills )) .then($ = { return [{date: moment($( #bill_date )), value: $( #bill_value )}] }) .then(entries = addData(entries, 'io.cozy.bills')) })","title":"How do I scrap a website"},{"location":"/dev/cordova/","text":"How to create a mobile Cozy application The simplest way to create a mobile Cozy application is to use JavaScript as there already are JavaScript libraries to connect to the Cozy server, as known as cozy-stack. Therefore we will use the classical stack: a JavaScript web application and cordova At the end of this documentation , you will find how-tos to help you with cordova configuration , webpack builds and cordova deployments for Android and iOS . To create your first Cozy application , just follow the guide. As you can read there, Cozy applications are served by the Cozy server, this is the way that Cozy applications retrieve a token to query data. In the case of a mobile application, you need to retrieve a token differently. Hopefully we provide everything you need to do it easily. You ll need two libraries: cozy-client ( source ) cozy-bar ( source ) In the case of Cozy web applications served by the Cozy server, these two libraries are injected in the html file with variables {{.CozyClientJS}} and {{.CozyBar}} . Setup index.html First thing first, add JavaScript libraries files into your index.html : !DOCTYPE html html lang= en head meta charset= utf-8 title mobile Cozy application with Cordova /title script src= cozy-client.js /script script src= cozy-bar.js /script /head body !-- page content -- /body /html Connect to Cozy server When an user will start your mobile Cozy application, she/he will need to point to her/his server url to ask for permissions for her/his device. This is done by our library cozy-client , you just need to add a HTML form: form id= form label What is your cozy server url? input name= url id= url type= text / /label button type= submit Submit /button /form const urlInput = document.getElementById( url ); const form = document.getElementById( form ); form.addEventListener( submit , registerClient); function registerClient (event) { event.preventDefault(); const url = urlInput.value; const { client, token } = await cozyClient.register(url); // do whatever you need with client and token like persist } JS Bin on jsbin.com When cozyClient.register(url) is called, the cordova inapp browser plugin is used to display a password request and a permission acceptation page to let the end-user to register her/his device. That s all! Then you can use the cozy-client library as you would within a classic Cozy application . Initialize the Cozy bar The Cozy bar needs some information to be initialized and its initialization must be done in your front-end code: cozy.bar.init({ appName: App Name , appEditor: Editor Name , iconPath: require( ./assets/app-icon.svg ), lang: en-US , replaceTitleOnMobile: true }) Use Cordova Install and setup cordova Cordova is a tool to build Android and iOS applications from a web app. It works with a CLI that needs node . Look at the cordova documentation to install everything needed . Once cordova is installed, just run cordova create cozy-app com.example.cozyapp CozyApp and you get the following structure: ./ \u251c\u2500\u2500 config.xml \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 platforms \u251c\u2500\u2500 plugins \u2514\u2500\u2500 www \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 index.css \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 logo.png \u251c\u2500\u2500 index.html \u2514\u2500\u2500 js \u2514\u2500\u2500 index.js 7 directories, 6 files Note: everything you put in www/ will be served as your application content. Configure your build tool If you use a build tool to transpile your JavaScript code, you need to configure your tool to output the build into www/ . webpack configuration As Webpack is the most used build tool we will show you how to configure it with cordova: Create a webpack.config.js on the root folder of your project with: const path = require('path'); module.exports = { entry: './src/app.js', output: { filename: 'bundle.js', path.resolve(__dirname, 'www') } } And add the output bundle in the www/index.html file: html head ... /head body ... script src= bundle.js /script /body /html See the official webpack documentation for more details. Cordova Android Platform Use cordova platform add android and check your environment with cordova requirements : A bad requirements check: Requirements check results for android: Java JDK: installed . Android SDK: installed Android target: not installed Android SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME environment variable. Gradle: installed Error: Some of requirements check failed A good requirements check: Requirements check results for android: Java JDK: installed . Android SDK: installed Android target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23 Gradle: installed See cordova, android and ios documentation to customize your development environment for your special needs. Once everything is right, you could run cordova build and cordova run android to create an APK and push the APK on a device. Note: The device should be connected with usb. See official android documentation for more details . iOS development For building an iOS app, you need xcode . [[more to come]] See further details on the cordova official documentation about iOS .","title":"Cr\u00e9ez une application mobile avec Cordova"},{"location":"/dev/cordova/#how-to-create-a-mobile-cozy-application","text":"The simplest way to create a mobile Cozy application is to use JavaScript as there already are JavaScript libraries to connect to the Cozy server, as known as cozy-stack. Therefore we will use the classical stack: a JavaScript web application and cordova At the end of this documentation , you will find how-tos to help you with cordova configuration , webpack builds and cordova deployments for Android and iOS . To create your first Cozy application , just follow the guide. As you can read there, Cozy applications are served by the Cozy server, this is the way that Cozy applications retrieve a token to query data. In the case of a mobile application, you need to retrieve a token differently. Hopefully we provide everything you need to do it easily. You ll need two libraries: cozy-client ( source ) cozy-bar ( source ) In the case of Cozy web applications served by the Cozy server, these two libraries are injected in the html file with variables {{.CozyClientJS}} and {{.CozyBar}} .","title":"How to create a mobile Cozy application"},{"location":"/dev/cordova/#setup-indexhtml","text":"First thing first, add JavaScript libraries files into your index.html : !DOCTYPE html html lang= en head meta charset= utf-8 title mobile Cozy application with Cordova /title script src= cozy-client.js /script script src= cozy-bar.js /script /head body !-- page content -- /body /html","title":"Setup index.html"},{"location":"/dev/cordova/#connect-to-cozy-server","text":"When an user will start your mobile Cozy application, she/he will need to point to her/his server url to ask for permissions for her/his device. This is done by our library cozy-client , you just need to add a HTML form: form id= form label What is your cozy server url? input name= url id= url type= text / /label button type= submit Submit /button /form const urlInput = document.getElementById( url ); const form = document.getElementById( form ); form.addEventListener( submit , registerClient); function registerClient (event) { event.preventDefault(); const url = urlInput.value; const { client, token } = await cozyClient.register(url); // do whatever you need with client and token like persist } JS Bin on jsbin.com When cozyClient.register(url) is called, the cordova inapp browser plugin is used to display a password request and a permission acceptation page to let the end-user to register her/his device. That s all! Then you can use the cozy-client library as you would within a classic Cozy application .","title":"Connect to Cozy server"},{"location":"/dev/cordova/#initialize-the-cozy-bar","text":"The Cozy bar needs some information to be initialized and its initialization must be done in your front-end code: cozy.bar.init({ appName: App Name , appEditor: Editor Name , iconPath: require( ./assets/app-icon.svg ), lang: en-US , replaceTitleOnMobile: true })","title":"Initialize the Cozy bar"},{"location":"/dev/cordova/#use-cordova","text":"","title":"Use Cordova"},{"location":"/dev/cordova/#install-and-setup-cordova","text":"Cordova is a tool to build Android and iOS applications from a web app. It works with a CLI that needs node . Look at the cordova documentation to install everything needed . Once cordova is installed, just run cordova create cozy-app com.example.cozyapp CozyApp and you get the following structure: ./ \u251c\u2500\u2500 config.xml \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 platforms \u251c\u2500\u2500 plugins \u2514\u2500\u2500 www \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 index.css \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 logo.png \u251c\u2500\u2500 index.html \u2514\u2500\u2500 js \u2514\u2500\u2500 index.js 7 directories, 6 files Note: everything you put in www/ will be served as your application content.","title":"Install and setup cordova"},{"location":"/dev/cordova/#configure-your-build-tool","text":"If you use a build tool to transpile your JavaScript code, you need to configure your tool to output the build into www/ .","title":"Configure your build tool"},{"location":"/dev/cordova/#webpack-configuration","text":"As Webpack is the most used build tool we will show you how to configure it with cordova: Create a webpack.config.js on the root folder of your project with: const path = require('path'); module.exports = { entry: './src/app.js', output: { filename: 'bundle.js', path.resolve(__dirname, 'www') } } And add the output bundle in the www/index.html file: html head ... /head body ... script src= bundle.js /script /body /html See the official webpack documentation for more details.","title":"webpack configuration"},{"location":"/dev/cordova/#cordova","text":"","title":"Cordova"},{"location":"/dev/cordova/#android-platform","text":"Use cordova platform add android and check your environment with cordova requirements : A bad requirements check: Requirements check results for android: Java JDK: installed . Android SDK: installed Android target: not installed Android SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME environment variable. Gradle: installed Error: Some of requirements check failed A good requirements check: Requirements check results for android: Java JDK: installed . Android SDK: installed Android target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23 Gradle: installed See cordova, android and ios documentation to customize your development environment for your special needs. Once everything is right, you could run cordova build and cordova run android to create an APK and push the APK on a device. Note: The device should be connected with usb. See official android documentation for more details .","title":"Android Platform"},{"location":"/dev/cordova/#ios-development","text":"For building an iOS app, you need xcode . [[more to come]] See further details on the cordova official documentation about iOS .","title":"iOS development"},{"location":"/dev/sendmail/","text":"Share and send mail in development Cozy apps let users share documents from cozy to cozy . Meet Alice and Bob. Alice wants to share a folder with Bob. Alice clicks on the share button and fills in the email input with Bob s email address. Bob receives an email with a \u00ab Accept the sharing \u00bb button. Bob clicks on that button and is redirected to Alice s cozy to enter his own cozy url to link both cozys. Bob sees Alice s shared folder in his own cozy. \ud83e\udd14 But how could we do this scenario on development environment? With the docker image If you develop with the cozy-app-dev docker image , MailHog is running inside it to catch emails. If cozy-stack has to send an email, MailHog catches it and exposes it on its web interface on http://cozy.tools:8025/. With the binary cozy-stack If you develop with the cozy-stack CLI , you have to run MailHog on your computer and tell cozy-stack serve where to find the mail server with some options : ./cozy-stack serve --appdir drive:../cozy-drive/build,settings:../cozy-settings/build --mail-disable-tls --mail-port 1025 This commands assumes you git clone cozy-drive and cozy-settings in the same folder than you git clone cozy-stack . Then simply run MailHog and open http://cozy.tools:8025/. Retrieve sent emails With MailHog, every email sent by cozy-stack is caught. That means the email address does not have to be a real one , ie. bob@cozy , bob@cozy.tools are perfectly fine. It could be a real one , but the email will not reach the real recipient s inbox, say contact@cozycloud.cc .","title":"Envoyer un courriel"},{"location":"/dev/sendmail/#share-and-send-mail-in-development","text":"Cozy apps let users share documents from cozy to cozy . Meet Alice and Bob. Alice wants to share a folder with Bob. Alice clicks on the share button and fills in the email input with Bob s email address. Bob receives an email with a \u00ab Accept the sharing \u00bb button. Bob clicks on that button and is redirected to Alice s cozy to enter his own cozy url to link both cozys. Bob sees Alice s shared folder in his own cozy. \ud83e\udd14 But how could we do this scenario on development environment?","title":"Share and send mail in development"},{"location":"/dev/sendmail/#with-the-docker-image","text":"If you develop with the cozy-app-dev docker image , MailHog is running inside it to catch emails. If cozy-stack has to send an email, MailHog catches it and exposes it on its web interface on http://cozy.tools:8025/.","title":"With the docker image"},{"location":"/dev/sendmail/#with-the-binary-cozy-stack","text":"If you develop with the cozy-stack CLI , you have to run MailHog on your computer and tell cozy-stack serve where to find the mail server with some options : ./cozy-stack serve --appdir drive:../cozy-drive/build,settings:../cozy-settings/build --mail-disable-tls --mail-port 1025 This commands assumes you git clone cozy-drive and cozy-settings in the same folder than you git clone cozy-stack . Then simply run MailHog and open http://cozy.tools:8025/.","title":"With the binary cozy-stack"},{"location":"/dev/sendmail/#retrieve-sent-emails","text":"With MailHog, every email sent by cozy-stack is caught. That means the email address does not have to be a real one , ie. bob@cozy , bob@cozy.tools are perfectly fine. It could be a real one , but the email will not reach the real recipient s inbox, say contact@cozycloud.cc .","title":"Retrieve sent emails"}]}